/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__mmfparser__texpack
#define __PYX_HAVE_API__mmfparser__texpack
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include "./maxrects/MaxRectsBinPack.cpp"
#include "./maxrects/Rect.cpp"
#include "./maxrects/frontend.cpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmfparser\\texpack.pyx",
  "mmfparser\\common.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9mmfparser_7texpack_Sprite;
struct __pyx_obj_9mmfparser_7texpack_MaxRects;
struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images;

/* "mmfparser\texpack.pyx":36
 * from PIL import Image
 * 
 * cdef class Sprite:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int x, y, w, h
 */
struct __pyx_obj_9mmfparser_7texpack_Sprite {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_7texpack_Sprite *__pyx_vtab;
  int x;
  int y;
  int w;
  int h;
  PyObject *image;
};


/* "mmfparser\texpack.pyx":48
 *         self.image = image
 * 
 * cdef class MaxRects:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int width, height
 */
struct __pyx_obj_9mmfparser_7texpack_MaxRects {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_7texpack_MaxRects *__pyx_vtab;
  int width;
  int height;
  PyObject *results;
};


/* "mmfparser\texpack.pyx":83
 * 
 * 
 * def pack_images(images, width, height):             # <<<<<<<<<<<<<<
 *     cdef list new_images = []
 *     cdef vector[RectSize] rects
 */
struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images {
  PyObject_HEAD
  std::vector<struct rbp::Rect>  __pyx_v_dst;
  PyObject *__pyx_v_h;
  PyObject *__pyx_v_height;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_idx;
  PyObject *__pyx_v_image;
  PyObject *__pyx_v_images;
  rbp::MaxRectsBinPack __pyx_v_maxrects;
  PyObject *__pyx_v_new_images;
  struct rbp::RectSize __pyx_v_rect;
  std::vector<struct rbp::RectSize>  __pyx_v_rects;
  struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_res;
  struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_sprite;
  PyObject *__pyx_v_w;
  PyObject *__pyx_v_width;
};



/* "mmfparser\texpack.pyx":36
 * from PIL import Image
 * 
 * cdef class Sprite:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int x, y, w, h
 */

struct __pyx_vtabstruct_9mmfparser_7texpack_Sprite {
  void (*init)(struct __pyx_obj_9mmfparser_7texpack_Sprite *, struct rbp::Rect const &, PyObject *);
};
static struct __pyx_vtabstruct_9mmfparser_7texpack_Sprite *__pyx_vtabptr_9mmfparser_7texpack_Sprite;


/* "mmfparser\texpack.pyx":48
 *         self.image = image
 * 
 * cdef class MaxRects:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int width, height
 */

struct __pyx_vtabstruct_9mmfparser_7texpack_MaxRects {
  void (*set_result)(struct __pyx_obj_9mmfparser_7texpack_MaxRects *, int, int, std::vector<int>  &, std::vector<struct rbp::Rect>  const &, PyObject *);
};
static struct __pyx_vtabstruct_9mmfparser_7texpack_MaxRects *__pyx_vtabptr_9mmfparser_7texpack_MaxRects;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#define __Pyx_DelItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_DelItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_DelItem_Generic(o, to_py_func(i))))
static CYTHON_INLINE int __Pyx_DelItem_Generic(PyObject *o, PyObject *j);
static CYTHON_INLINE int __Pyx_DelItemInt_Fast(PyObject *o, Py_ssize_t i,
                                               CYTHON_UNUSED int is_list, int wraparound);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#include <string.h>

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

#include <new>

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_9mmfparser_7texpack_6Sprite_init(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, struct rbp::Rect const &__pyx_v_rect, PyObject *__pyx_v_image); /* proto*/
static void __pyx_f_9mmfparser_7texpack_8MaxRects_set_result(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, int __pyx_v_width, int __pyx_v_height, std::vector<int>  &__pyx_v_idx, std::vector<struct rbp::Rect>  const &__pyx_v_dst, PyObject *__pyx_v_images); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'mmfparser.common' */
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int, char **); /*proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'mmfparser.texpack' */
static PyTypeObject *__pyx_ptype_9mmfparser_7texpack_Sprite = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_7texpack_MaxRects = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_7texpack___pyx_scope_struct__pack_images = 0;
static void __pyx_f_9mmfparser_7texpack_set_bit(char *, int); /*proto*/
static CYTHON_INLINE int __pyx_f_9mmfparser_7texpack_pack_bits(unsigned char, int, unsigned char *); /*proto*/
#define __Pyx_MODULE_NAME "mmfparser.texpack"
int __pyx_module_is_main_mmfparser__texpack = 0;

/* Implementation of 'mmfparser.texpack' */
static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1x___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_1x_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1y___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_1y_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1w___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_1w_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1h___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_1h_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_5image___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_5image_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_7texpack_6Sprite_5image_4__del__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_get(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_5width___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_8MaxRects_5width_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_6height___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_8MaxRects_6height_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_7results___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_4__del__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_pack_images(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_images, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_3get_alpha_bits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_5to_a4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_7to_a4_ignore_rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_9to_l4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_11to_a8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_13to_l8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_15to_rgb565_with_alpha(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_17to_rgb565_without_alpha(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_19to_rgba4444(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_21to_rgba5551(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9mmfparser_7texpack_23to_rgb888(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_tp_new_9mmfparser_7texpack_Sprite(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_7texpack_MaxRects(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_7texpack___pyx_scope_struct__pack_images(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_r[] = "r";
static char __pyx_k_w[] = "w";
static char __pyx_k_PIL[] = "PIL";
static char __pyx_k_dst[] = "dst";
static char __pyx_k_end[] = "end";
static char __pyx_k_idx[] = "idx";
static char __pyx_k_new[] = "new";
static char __pyx_k_res[] = "res";
static char __pyx_k_ret[] = "ret";
static char __pyx_k_RGBA[] = "RGBA";
static char __pyx_k_args[] = "args";
static char __pyx_k_crop[] = "crop";
static char __pyx_k_data[] = "data";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_rect[] = "rect";
static char __pyx_k_send[] = "send";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Image[] = "Image";
static char __pyx_k_close[] = "close";
static char __pyx_k_dst_s[] = "dst_s";
static char __pyx_k_image[] = "image";
static char __pyx_k_paste[] = "paste";
static char __pyx_k_print[] = "print";
static char __pyx_k_rects[] = "rects";
static char __pyx_k_src_c[] = "src_c";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_to_a4[] = "to_a4";
static char __pyx_k_to_a8[] = "to_a8";
static char __pyx_k_to_l4[] = "to_l4";
static char __pyx_k_to_l8[] = "to_l8";
static char __pyx_k_width[] = "width";
static char __pyx_k_height[] = "height";
static char __pyx_k_images[] = "images";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_sprite[] = "sprite";
static char __pyx_k_convert[] = "convert";
static char __pyx_k_tobytes[] = "tobytes";
static char __pyx_k_bit_size[] = "bit_size";
static char __pyx_k_maxrects[] = "maxrects";
static char __pyx_k_to_rgb888[] = "to_rgb888";
static char __pyx_k_new_images[] = "new_images";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_pack_images[] = "pack_images";
static char __pyx_k_to_rgba4444[] = "to_rgba4444";
static char __pyx_k_to_rgba5551[] = "to_rgba5551";
static char __pyx_k_get_alpha_bits[] = "get_alpha_bits";
static char __pyx_k_to_a4_ignore_rgb[] = "to_a4_ignore_rgb";
static char __pyx_k_mmfparser_texpack[] = "mmfparser.texpack";
static char __pyx_k_remaining_sprites[] = "remaining sprites:";
static char __pyx_k_to_rgb565_with_alpha[] = "to_rgb565_with_alpha";
static char __pyx_k_to_rgb565_without_alpha[] = "to_rgb565_without_alpha";
static char __pyx_k_C_LAPTOP_Downloads_AnacondaDev_b[] = "C:\\LAPTOP\\Downloads\\AnacondaDev-b2c583a408de197bd210236d50a501047dce6853\\AnacondaDev-b2c583a408de197bd210236d50a501047dce6853\\mmfparser\\texpack.pyx";
static char __pyx_k_Truncating_image_in_texture_atla[] = "Truncating image in texture atlas:";
static PyObject *__pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b;
static PyObject *__pyx_n_s_Image;
static PyObject *__pyx_n_s_PIL;
static PyObject *__pyx_n_s_RGBA;
static PyObject *__pyx_kp_s_Truncating_image_in_texture_atla;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bit_size;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_convert;
static PyObject *__pyx_n_s_crop;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_dst;
static PyObject *__pyx_n_s_dst_s;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get_alpha_bits;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_images;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxrects;
static PyObject *__pyx_n_s_mmfparser_texpack;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_images;
static PyObject *__pyx_n_s_pack_images;
static PyObject *__pyx_n_s_paste;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_rect;
static PyObject *__pyx_n_s_rects;
static PyObject *__pyx_kp_s_remaining_sprites;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sprite;
static PyObject *__pyx_n_s_src_c;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_to_a4;
static PyObject *__pyx_n_s_to_a4_ignore_rgb;
static PyObject *__pyx_n_s_to_a8;
static PyObject *__pyx_n_s_to_l4;
static PyObject *__pyx_n_s_to_l8;
static PyObject *__pyx_n_s_to_rgb565_with_alpha;
static PyObject *__pyx_n_s_to_rgb565_without_alpha;
static PyObject *__pyx_n_s_to_rgb888;
static PyObject *__pyx_n_s_to_rgba4444;
static PyObject *__pyx_n_s_to_rgba5551;
static PyObject *__pyx_n_s_tobytes;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_255;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;

/* "mmfparser\texpack.pyx":41
 *         object image
 * 
 *     cdef void init(self, const Rect & rect, object image):             # <<<<<<<<<<<<<<
 *         self.x = rect.x
 *         self.y = rect.y
 */

static void __pyx_f_9mmfparser_7texpack_6Sprite_init(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, struct rbp::Rect const &__pyx_v_rect, PyObject *__pyx_v_image) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("init", 0);

  /* "mmfparser\texpack.pyx":42
 * 
 *     cdef void init(self, const Rect & rect, object image):
 *         self.x = rect.x             # <<<<<<<<<<<<<<
 *         self.y = rect.y
 *         self.w = rect.width
 */
  __pyx_t_1 = __pyx_v_rect.x;
  __pyx_v_self->x = __pyx_t_1;

  /* "mmfparser\texpack.pyx":43
 *     cdef void init(self, const Rect & rect, object image):
 *         self.x = rect.x
 *         self.y = rect.y             # <<<<<<<<<<<<<<
 *         self.w = rect.width
 *         self.h = rect.height
 */
  __pyx_t_1 = __pyx_v_rect.y;
  __pyx_v_self->y = __pyx_t_1;

  /* "mmfparser\texpack.pyx":44
 *         self.x = rect.x
 *         self.y = rect.y
 *         self.w = rect.width             # <<<<<<<<<<<<<<
 *         self.h = rect.height
 *         self.image = image
 */
  __pyx_t_1 = __pyx_v_rect.width;
  __pyx_v_self->w = __pyx_t_1;

  /* "mmfparser\texpack.pyx":45
 *         self.y = rect.y
 *         self.w = rect.width
 *         self.h = rect.height             # <<<<<<<<<<<<<<
 *         self.image = image
 * 
 */
  __pyx_t_1 = __pyx_v_rect.height;
  __pyx_v_self->h = __pyx_t_1;

  /* "mmfparser\texpack.pyx":46
 *         self.w = rect.width
 *         self.h = rect.height
 *         self.image = image             # <<<<<<<<<<<<<<
 * 
 * cdef class MaxRects:
 */
  __Pyx_INCREF(__pyx_v_image);
  __Pyx_GIVEREF(__pyx_v_image);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = __pyx_v_image;

  /* "mmfparser\texpack.pyx":41
 *         object image
 * 
 *     cdef void init(self, const Rect & rect, object image):             # <<<<<<<<<<<<<<
 *         self.x = rect.x
 *         self.y = rect.y
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\texpack.pyx":38
 * cdef class Sprite:
 *     cdef public:
 *         int x, y, w, h             # <<<<<<<<<<<<<<
 *         object image
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1x___get__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1x___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1x_2__set__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_1x_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1y___get__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1y___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1y_2__set__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_1y_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1w_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1w_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1w___get__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1w___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->w); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.w.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1w_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1w_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1w_2__set__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_1w_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->w = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.w.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1h___get__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_1h___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->h); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1h_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_1h_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_1h_2__set__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_1h_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->h = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.Sprite.h.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":39
 *     cdef public:
 *         int x, y, w, h
 *         object image             # <<<<<<<<<<<<<<
 * 
 *     cdef void init(self, const Rect & rect, object image):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_5image_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_6Sprite_5image_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_5image___get__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_6Sprite_5image___get__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->image);
  __pyx_r = __pyx_v_self->image;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_5image_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_5image_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_5image_2__set__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_5image_2__set__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_6Sprite_5image_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_6Sprite_5image_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_6Sprite_5image_4__del__(((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_6Sprite_5image_4__del__(struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->image);
  __Pyx_DECREF(__pyx_v_self->image);
  __pyx_v_self->image = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":53
 *         list results
 * 
 *     cdef void set_result(self, int width, int height,             # <<<<<<<<<<<<<<
 *                          vector[int] & idx, const vector[Rect] & dst,
 *                          list images):
 */

static void __pyx_f_9mmfparser_7texpack_8MaxRects_set_result(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, int __pyx_v_width, int __pyx_v_height, std::vector<int>  &__pyx_v_idx, std::vector<struct rbp::Rect>  const &__pyx_v_dst, PyObject *__pyx_v_images) {
  struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_s = 0;
  int __pyx_v_rect_idx;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<int> ::iterator __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_result", 0);

  /* "mmfparser\texpack.pyx":56
 *                          vector[int] & idx, const vector[Rect] & dst,
 *                          list images):
 *         self.width = width             # <<<<<<<<<<<<<<
 *         self.height = height
 *         self.results = []
 */
  __pyx_v_self->width = __pyx_v_width;

  /* "mmfparser\texpack.pyx":57
 *                          list images):
 *         self.width = width
 *         self.height = height             # <<<<<<<<<<<<<<
 *         self.results = []
 *         cdef Sprite s
 */
  __pyx_v_self->height = __pyx_v_height;

  /* "mmfparser\texpack.pyx":58
 *         self.width = width
 *         self.height = height
 *         self.results = []             # <<<<<<<<<<<<<<
 *         cdef Sprite s
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->results);
  __Pyx_DECREF(__pyx_v_self->results);
  __pyx_v_self->results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":62
 * 
 *         cdef int rect_idx
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 * 
 *         for rect_idx in idx:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":64
 *         cdef int i = 0
 * 
 *         for rect_idx in idx:             # <<<<<<<<<<<<<<
 *             s = Sprite.__new__(Sprite)
 *             s.init(dst[i], images[rect_idx])
 */
  __pyx_t_2 = __pyx_v_idx.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_idx.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_rect_idx = __pyx_t_3;

    /* "mmfparser\texpack.pyx":65
 * 
 *         for rect_idx in idx:
 *             s = Sprite.__new__(Sprite)             # <<<<<<<<<<<<<<
 *             s.init(dst[i], images[rect_idx])
 *             self.results.append(s)
 */
    __pyx_t_1 = __pyx_tp_new_9mmfparser_7texpack_Sprite(((PyTypeObject *)((PyObject*)__pyx_ptype_9mmfparser_7texpack_Sprite)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_7texpack_Sprite)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_s, ((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "mmfparser\texpack.pyx":66
 *         for rect_idx in idx:
 *             s = Sprite.__new__(Sprite)
 *             s.init(dst[i], images[rect_idx])             # <<<<<<<<<<<<<<
 *             self.results.append(s)
 *             i += 1
 */
    if (unlikely(__pyx_v_images == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_images, __pyx_v_rect_idx, int, 1, __Pyx_PyInt_From_int, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_9mmfparser_7texpack_Sprite *)__pyx_v_s->__pyx_vtab)->init(__pyx_v_s, (__pyx_v_dst[__pyx_v_i]), __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser\texpack.pyx":67
 *             s = Sprite.__new__(Sprite)
 *             s.init(dst[i], images[rect_idx])
 *             self.results.append(s)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    if (unlikely(__pyx_v_self->results == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->results, ((PyObject *)__pyx_v_s)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "mmfparser\texpack.pyx":68
 *             s.init(dst[i], images[rect_idx])
 *             self.results.append(s)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "mmfparser\texpack.pyx":64
 *         cdef int i = 0
 * 
 *         for rect_idx in idx:             # <<<<<<<<<<<<<<
 *             s = Sprite.__new__(Sprite)
 *             s.init(dst[i], images[rect_idx])
 */
  }

  /* "mmfparser\texpack.pyx":53
 *         list results
 * 
 *     cdef void set_result(self, int width, int height,             # <<<<<<<<<<<<<<
 *                          vector[int] & idx, const vector[Rect] & dst,
 *                          list images):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("mmfparser.texpack.MaxRects.set_result", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\texpack.pyx":70
 *             i += 1
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         im = Image.new('RGBA', (self.width, self.height), (255, 20, 147, 255))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_1get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_1get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_get(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_get(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self) {
  PyObject *__pyx_v_im = NULL;
  struct __pyx_obj_9mmfparser_7texpack_Sprite *__pyx_v_sprite = 0;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "mmfparser\texpack.pyx":71
 * 
 *     def get(self):
 *         im = Image.new('RGBA', (self.width, self.height), (255, 20, 147, 255))             # <<<<<<<<<<<<<<
 * 
 *         cdef Sprite sprite
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Image); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_new); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_RGBA);
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_n_s_RGBA);
  __Pyx_GIVEREF(__pyx_n_s_RGBA);
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_tuple_);
  PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_im = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":74
 * 
 *         cdef Sprite sprite
 *         for sprite in self.results:             # <<<<<<<<<<<<<<
 *             x, y, w, h = (sprite.x, sprite.y,
 *                           sprite.w, sprite.h)
 */
  if (unlikely(__pyx_v_self->results == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_self->results; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9mmfparser_7texpack_Sprite))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_sprite, ((struct __pyx_obj_9mmfparser_7texpack_Sprite *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mmfparser\texpack.pyx":75
 *         cdef Sprite sprite
 *         for sprite in self.results:
 *             x, y, w, h = (sprite.x, sprite.y,             # <<<<<<<<<<<<<<
 *                           sprite.w, sprite.h)
 *             tmp = sprite.image.convert('RGBA')
 */
    __pyx_t_7 = __pyx_v_sprite->x;
    __pyx_t_8 = __pyx_v_sprite->y;

    /* "mmfparser\texpack.pyx":76
 *         for sprite in self.results:
 *             x, y, w, h = (sprite.x, sprite.y,
 *                           sprite.w, sprite.h)             # <<<<<<<<<<<<<<
 *             tmp = sprite.image.convert('RGBA')
 *             im.paste(tmp, (x, y, x + w, y + h))
 */
    __pyx_t_9 = __pyx_v_sprite->w;
    __pyx_t_10 = __pyx_v_sprite->h;
    __pyx_v_x = __pyx_t_7;
    __pyx_v_y = __pyx_t_8;
    __pyx_v_w = __pyx_t_9;
    __pyx_v_h = __pyx_t_10;

    /* "mmfparser\texpack.pyx":77
 *             x, y, w, h = (sprite.x, sprite.y,
 *                           sprite.w, sprite.h)
 *             tmp = sprite.image.convert('RGBA')             # <<<<<<<<<<<<<<
 *             im.paste(tmp, (x, y, x + w, y + h))
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sprite->image, __pyx_n_s_convert); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mmfparser\texpack.pyx":78
 *                           sprite.w, sprite.h)
 *             tmp = sprite.image.convert('RGBA')
 *             im.paste(tmp, (x, y, x + w, y + h))             # <<<<<<<<<<<<<<
 * 
 *         return im
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_im, __pyx_n_s_paste); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_x + __pyx_v_w)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyInt_From_int((__pyx_v_y + __pyx_v_h)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyTuple_New(4); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_14 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_12) {
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_INCREF(__pyx_v_tmp);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_14, __pyx_v_tmp);
    __Pyx_GIVEREF(__pyx_v_tmp);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_14, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser\texpack.pyx":74
 * 
 *         cdef Sprite sprite
 *         for sprite in self.results:             # <<<<<<<<<<<<<<
 *             x, y, w, h = (sprite.x, sprite.y,
 *                           sprite.w, sprite.h)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":80
 *             im.paste(tmp, (x, y, x + w, y + h))
 * 
 *         return im             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_im);
  __pyx_r = __pyx_v_im;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":70
 *             i += 1
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         im = Image.new('RGBA', (self.width, self.height), (255, 20, 147, 255))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_im);
  __Pyx_XDECREF((PyObject *)__pyx_v_sprite);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":50
 * cdef class MaxRects:
 *     cdef public:
 *         int width, height             # <<<<<<<<<<<<<<
 *         list results
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_5width___get__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_5width___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_5width_2__set__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_8MaxRects_5width_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_6height___get__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_6height___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_6height_2__set__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_8MaxRects_6height_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":51
 *     cdef public:
 *         int width, height
 *         list results             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_result(self, int width, int height,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_7results_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_7texpack_8MaxRects_7results_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_7results___get__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_8MaxRects_7results___get__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->results);
  __pyx_r = __pyx_v_self->results;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_2__set__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_2__set__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->results);
  __Pyx_DECREF(__pyx_v_self->results);
  __pyx_v_self->results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.texpack.MaxRects.results.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_4__del__(((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_7texpack_8MaxRects_7results_4__del__(struct __pyx_obj_9mmfparser_7texpack_MaxRects *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->results);
  __Pyx_DECREF(__pyx_v_self->results);
  __pyx_v_self->results = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9mmfparser_7texpack_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "mmfparser\texpack.pyx":83
 * 
 * 
 * def pack_images(images, width, height):             # <<<<<<<<<<<<<<
 *     cdef list new_images = []
 *     cdef vector[RectSize] rects
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_1pack_images(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_1pack_images = {"pack_images", (PyCFunction)__pyx_pw_9mmfparser_7texpack_1pack_images, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_1pack_images(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_images = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack_images (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_images,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_images)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pack_images", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pack_images", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pack_images") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_images = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack_images", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.texpack.pack_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_7texpack_pack_images(__pyx_self, __pyx_v_images, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_pack_images(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_images, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_images", 0);
  __pyx_cur_scope = (struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)__pyx_tp_new_9mmfparser_7texpack___pyx_scope_struct__pack_images(__pyx_ptype_9mmfparser_7texpack___pyx_scope_struct__pack_images, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_images = __pyx_v_images;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_images);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_images);
  __pyx_cur_scope->__pyx_v_width = __pyx_v_width;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_width);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_width);
  __pyx_cur_scope->__pyx_v_height = __pyx_v_height;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_height);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_height);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_9mmfparser_7texpack_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_pack_images, __pyx_n_s_pack_images); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.texpack.pack_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9mmfparser_7texpack_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *__pyx_cur_scope = ((struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  std::vector<int> ::iterator __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":84
 * 
 * def pack_images(images, width, height):
 *     cdef list new_images = []             # <<<<<<<<<<<<<<
 *     cdef vector[RectSize] rects
 *     cdef Sprite sprite
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_new_images = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":89
 *     cdef RectSize rect
 * 
 *     for image in images:             # <<<<<<<<<<<<<<
 *         w, h = image.size
 *         if w > width or h > height:
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_images)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_images)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_images; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_images); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_image);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_image, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mmfparser\texpack.pyx":90
 * 
 *     for image in images:
 *         w, h = image.size             # <<<<<<<<<<<<<<
 *         if w > width or h > height:
 *             print 'Truncating image in texture atlas:', w, h
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_image, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_h);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_h, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "mmfparser\texpack.pyx":91
 *     for image in images:
 *         w, h = image.size
 *         if w > width or h > height:             # <<<<<<<<<<<<<<
 *             print 'Truncating image in texture atlas:', w, h
 *             image = image.crop((0, 0, min(w, width), min(h, height)))
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_w, __pyx_cur_scope->__pyx_v_width, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_h, __pyx_cur_scope->__pyx_v_height, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_9) {

      /* "mmfparser\texpack.pyx":92
 *         w, h = image.size
 *         if w > width or h > height:
 *             print 'Truncating image in texture atlas:', w, h             # <<<<<<<<<<<<<<
 *             image = image.crop((0, 0, min(w, width), min(h, height)))
 *         new_images.append(image)
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s_Truncating_image_in_texture_atla);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_Truncating_image_in_texture_atla);
      __Pyx_GIVEREF(__pyx_kp_s_Truncating_image_in_texture_atla);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_w);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_w);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_w);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_h);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_cur_scope->__pyx_v_h);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_h);
      if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mmfparser\texpack.pyx":93
 *         if w > width or h > height:
 *             print 'Truncating image in texture atlas:', w, h
 *             image = image.crop((0, 0, min(w, width), min(h, height)))             # <<<<<<<<<<<<<<
 *         new_images.append(image)
 *         rect.width, rect.height = image.size
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_image, __pyx_n_s_crop); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_width);
      __pyx_t_5 = __pyx_cur_scope->__pyx_v_width;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_w);
      __pyx_t_7 = __pyx_cur_scope->__pyx_v_w;
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_5, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_9) {
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_11 = __pyx_t_5;
      } else {
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_11 = __pyx_t_7;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_height);
      __pyx_t_5 = __pyx_cur_scope->__pyx_v_height;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_h);
      __pyx_t_7 = __pyx_cur_scope->__pyx_v_h;
      __pyx_t_13 = PyObject_RichCompare(__pyx_t_5, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (__pyx_t_9) {
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_12 = __pyx_t_5;
      } else {
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_12 = __pyx_t_7;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      __Pyx_INCREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      __Pyx_INCREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_12) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_image);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_image, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "mmfparser\texpack.pyx":94
 *             print 'Truncating image in texture atlas:', w, h
 *             image = image.crop((0, 0, min(w, width), min(h, height)))
 *         new_images.append(image)             # <<<<<<<<<<<<<<
 *         rect.width, rect.height = image.size
 *         rects.push_back(rect)
 */
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_new_images, __pyx_cur_scope->__pyx_v_image); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "mmfparser\texpack.pyx":95
 *             image = image.crop((0, 0, min(w, width), min(h, height)))
 *         new_images.append(image)
 *         rect.width, rect.height = image.size             # <<<<<<<<<<<<<<
 *         rects.push_back(rect)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_image, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_11 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L12_unpacking_done:;
    }
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_cur_scope->__pyx_v_rect.width = __pyx_t_15;
    __pyx_cur_scope->__pyx_v_rect.height = __pyx_t_16;

    /* "mmfparser\texpack.pyx":96
 *         new_images.append(image)
 *         rect.width, rect.height = image.size
 *         rects.push_back(rect)             # <<<<<<<<<<<<<<
 * 
 *     cdef MaxRectsBinPack maxrects
 */
    __pyx_cur_scope->__pyx_v_rects.push_back(__pyx_cur_scope->__pyx_v_rect);

    /* "mmfparser\texpack.pyx":89
 *     cdef RectSize rect
 * 
 *     for image in images:             # <<<<<<<<<<<<<<
 *         w, h = image.size
 *         if w > width or h > height:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":103
 *     cdef vector[Rect] dst
 * 
 *     cdef MaxRects res = MaxRects()             # <<<<<<<<<<<<<<
 *     cdef int i
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_7texpack_MaxRects)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_res = ((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":106
 *     cdef int i
 * 
 *     while new_images:             # <<<<<<<<<<<<<<
 *         maxrects.Init(width, height)
 *         maxrects.Insert(rects, dst, idx, RectBestShortSideFit)
 */
  while (1) {
    __pyx_t_9 = (__pyx_cur_scope->__pyx_v_new_images != Py_None) && (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_new_images) != 0);
    if (!__pyx_t_9) break;

    /* "mmfparser\texpack.pyx":107
 * 
 *     while new_images:
 *         maxrects.Init(width, height)             # <<<<<<<<<<<<<<
 *         maxrects.Insert(rects, dst, idx, RectBestShortSideFit)
 *         res.set_result(width, height, idx, dst, new_images)
 */
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_width); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_height); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_maxrects.Init(__pyx_t_16, __pyx_t_15);

    /* "mmfparser\texpack.pyx":108
 *     while new_images:
 *         maxrects.Init(width, height)
 *         maxrects.Insert(rects, dst, idx, RectBestShortSideFit)             # <<<<<<<<<<<<<<
 *         res.set_result(width, height, idx, dst, new_images)
 *         sort_indexes(idx)
 */
    __pyx_cur_scope->__pyx_v_maxrects.Insert(__pyx_cur_scope->__pyx_v_rects, __pyx_cur_scope->__pyx_v_dst, __pyx_cur_scope->__pyx_v_idx, rbp::MaxRectsBinPack::RectBestShortSideFit);

    /* "mmfparser\texpack.pyx":109
 *         maxrects.Init(width, height)
 *         maxrects.Insert(rects, dst, idx, RectBestShortSideFit)
 *         res.set_result(width, height, idx, dst, new_images)             # <<<<<<<<<<<<<<
 *         sort_indexes(idx)
 * 
 */
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_width); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_height); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_vtabstruct_9mmfparser_7texpack_MaxRects *)__pyx_cur_scope->__pyx_v_res->__pyx_vtab)->set_result(__pyx_cur_scope->__pyx_v_res, __pyx_t_15, __pyx_t_16, __pyx_cur_scope->__pyx_v_idx, __pyx_cur_scope->__pyx_v_dst, __pyx_cur_scope->__pyx_v_new_images);

    /* "mmfparser\texpack.pyx":110
 *         maxrects.Insert(rects, dst, idx, RectBestShortSideFit)
 *         res.set_result(width, height, idx, dst, new_images)
 *         sort_indexes(idx)             # <<<<<<<<<<<<<<
 * 
 *         for i in idx:
 */
    sort_indexes(__pyx_cur_scope->__pyx_v_idx);

    /* "mmfparser\texpack.pyx":112
 *         sort_indexes(idx)
 * 
 *         for i in idx:             # <<<<<<<<<<<<<<
 *             rects.erase(rects.begin() + i)
 *             del new_images[i]
 */
    __pyx_t_17 = __pyx_cur_scope->__pyx_v_idx.begin();
    for (;;) {
      if (!(__pyx_t_17 != __pyx_cur_scope->__pyx_v_idx.end())) break;
      __pyx_t_16 = *__pyx_t_17;
      ++__pyx_t_17;
      __pyx_cur_scope->__pyx_v_i = __pyx_t_16;

      /* "mmfparser\texpack.pyx":113
 * 
 *         for i in idx:
 *             rects.erase(rects.begin() + i)             # <<<<<<<<<<<<<<
 *             del new_images[i]
 * 
 */
      __pyx_cur_scope->__pyx_v_rects.erase((__pyx_cur_scope->__pyx_v_rects.begin() + __pyx_cur_scope->__pyx_v_i));

      /* "mmfparser\texpack.pyx":114
 *         for i in idx:
 *             rects.erase(rects.begin() + i)
 *             del new_images[i]             # <<<<<<<<<<<<<<
 * 
 *         yield res
 */
      if (__Pyx_DelItemInt(__pyx_cur_scope->__pyx_v_new_images, __pyx_cur_scope->__pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "mmfparser\texpack.pyx":112
 *         sort_indexes(idx)
 * 
 *         for i in idx:             # <<<<<<<<<<<<<<
 *             rects.erase(rects.begin() + i)
 *             del new_images[i]
 */
    }

    /* "mmfparser\texpack.pyx":116
 *             del new_images[i]
 * 
 *         yield res             # <<<<<<<<<<<<<<
 * 
 *         print 'remaining sprites:', len(new_images)
 */
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_res));
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_res);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L17_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "mmfparser\texpack.pyx":118
 *         yield res
 * 
 *         print 'remaining sprites:', len(new_images)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_new_images); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s_remaining_sprites);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_remaining_sprites);
    __Pyx_GIVEREF(__pyx_kp_s_remaining_sprites);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "mmfparser\texpack.pyx":83
 * 
 * 
 * def pack_images(images, width, height):             # <<<<<<<<<<<<<<
 *     cdef list new_images = []
 *     cdef vector[RectSize] rects
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pack_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "mmfparser\texpack.pyx":121
 * 
 * 
 * cdef void set_bit(char * data, int b):             # <<<<<<<<<<<<<<
 *     data[b / 8] |= 1 << (b % 8)
 * 
 */

static void __pyx_f_9mmfparser_7texpack_set_bit(char *__pyx_v_data, int __pyx_v_b) {
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("set_bit", 0);

  /* "mmfparser\texpack.pyx":122
 * 
 * cdef void set_bit(char * data, int b):
 *     data[b / 8] |= 1 << (b % 8)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = (__pyx_v_b / 8);
  (__pyx_v_data[__pyx_t_1]) = ((__pyx_v_data[__pyx_t_1]) | (1 << (__pyx_v_b % 8)));

  /* "mmfparser\texpack.pyx":121
 * 
 * 
 * cdef void set_bit(char * data, int b):             # <<<<<<<<<<<<<<
 *     data[b / 8] |= 1 << (b % 8)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\texpack.pyx":125
 * 
 * 
 * def get_alpha_bits(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_4get_alpha_bits(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_4get_alpha_bits = {"get_alpha_bits", (PyCFunction)__pyx_pw_9mmfparser_7texpack_4get_alpha_bits, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_4get_alpha_bits(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_alpha_bits (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_3get_alpha_bits(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_3get_alpha_bits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  int __pyx_v_bit_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_alpha_bits", 0);

  /* "mmfparser\texpack.pyx":126
 * 
 * def get_alpha_bits(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":127
 * def get_alpha_bits(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":129
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef int bit_size = (size + 32 - 1) / 32
 *     cdef object ret = allocate_memory(bit_size, &dst)
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":130
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef int bit_size = (size + 32 - 1) / 32             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(bit_size, &dst)
 *     memset(dst, 0, bit_size)
 */
  __pyx_v_bit_size = (((__pyx_v_size + 32) - 1) / 32);

  /* "mmfparser\texpack.pyx":131
 *     cdef int size = len(data)
 *     cdef int bit_size = (size + 32 - 1) / 32
 *     cdef object ret = allocate_memory(bit_size, &dst)             # <<<<<<<<<<<<<<
 *     memset(dst, 0, bit_size)
 *     cdef int i = 0
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory(__pyx_v_bit_size, (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":132
 *     cdef int bit_size = (size + 32 - 1) / 32
 *     cdef object ret = allocate_memory(bit_size, &dst)
 *     memset(dst, 0, bit_size)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     while i < size:
 */
  memset(__pyx_v_dst, 0, __pyx_v_bit_size);

  /* "mmfparser\texpack.pyx":133
 *     cdef object ret = allocate_memory(bit_size, &dst)
 *     memset(dst, 0, bit_size)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     while i < size:
 *         if src_c[i + 3] != 0:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":134
 *     memset(dst, 0, bit_size)
 *     cdef int i = 0
 *     while i < size:             # <<<<<<<<<<<<<<
 *         if src_c[i + 3] != 0:
 *             set_bit(dst, i / 4)
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":135
 *     cdef int i = 0
 *     while i < size:
 *         if src_c[i + 3] != 0:             # <<<<<<<<<<<<<<
 *             set_bit(dst, i / 4)
 *         i += 4
 */
    __pyx_t_6 = (((__pyx_v_src_c[(__pyx_v_i + 3)]) != 0) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":136
 *     while i < size:
 *         if src_c[i + 3] != 0:
 *             set_bit(dst, i / 4)             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
      __pyx_f_9mmfparser_7texpack_set_bit(__pyx_v_dst, (__pyx_v_i / 4));
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "mmfparser\texpack.pyx":137
 *         if src_c[i + 3] != 0:
 *             set_bit(dst, i / 4)
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":138
 *             set_bit(dst, i / 4)
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":125
 * 
 * 
 * def get_alpha_bits(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.get_alpha_bits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":141
 * 
 * 
 * cdef inline bint pack_bits(unsigned char v, int n, unsigned char * out):             # <<<<<<<<<<<<<<
 *     n = 8 - n
 *     cdef unsigned char vv = v >> n
 */

static CYTHON_INLINE int __pyx_f_9mmfparser_7texpack_pack_bits(unsigned char __pyx_v_v, int __pyx_v_n, unsigned char *__pyx_v_out) {
  unsigned char __pyx_v_vv;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pack_bits", 0);

  /* "mmfparser\texpack.pyx":142
 * 
 * cdef inline bint pack_bits(unsigned char v, int n, unsigned char * out):
 *     n = 8 - n             # <<<<<<<<<<<<<<
 *     cdef unsigned char vv = v >> n
 *     if v != (vv << n):
 */
  __pyx_v_n = (8 - __pyx_v_n);

  /* "mmfparser\texpack.pyx":143
 * cdef inline bint pack_bits(unsigned char v, int n, unsigned char * out):
 *     n = 8 - n
 *     cdef unsigned char vv = v >> n             # <<<<<<<<<<<<<<
 *     if v != (vv << n):
 *         return False
 */
  __pyx_v_vv = (__pyx_v_v >> __pyx_v_n);

  /* "mmfparser\texpack.pyx":144
 *     n = 8 - n
 *     cdef unsigned char vv = v >> n
 *     if v != (vv << n):             # <<<<<<<<<<<<<<
 *         return False
 *     out[0] = vv
 */
  __pyx_t_1 = ((__pyx_v_v != (__pyx_v_vv << __pyx_v_n)) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\texpack.pyx":145
 *     cdef unsigned char vv = v >> n
 *     if v != (vv << n):
 *         return False             # <<<<<<<<<<<<<<
 *     out[0] = vv
 *     return True
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\texpack.pyx":146
 *     if v != (vv << n):
 *         return False
 *     out[0] = vv             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  (__pyx_v_out[0]) = __pyx_v_vv;

  /* "mmfparser\texpack.pyx":147
 *         return False
 *     out[0] = vv
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":141
 * 
 * 
 * cdef inline bint pack_bits(unsigned char v, int n, unsigned char * out):             # <<<<<<<<<<<<<<
 *     n = 8 - n
 *     cdef unsigned char vv = v >> n
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":150
 * 
 * 
 * def to_a4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_6to_a4(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_6to_a4 = {"to_a4", (PyCFunction)__pyx_pw_9mmfparser_7texpack_6to_a4, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_6to_a4(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_a4 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_5to_a4(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_5to_a4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_a4", 0);

  /* "mmfparser\texpack.pyx":151
 * 
 * def to_a4(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":152
 * def to_a4(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":154
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":155
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 8), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":156
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":158
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":159
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":160
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":161
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":162
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if r != 255 or g != 255 or b != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":163
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(a, 4, &a):
 */
    __pyx_t_7 = ((__pyx_v_r != 255) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_g != 255) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_b != 255) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":164
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(a, 4, &a):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":165
 *         if r != 255 or g != 255 or b != 255:
 *             return None
 *         if not pack_bits(a, 4, &a):             # <<<<<<<<<<<<<<
 *             return None
 *         if i % 8 == 0:
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_a, 4, (&__pyx_v_a)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":166
 *             return None
 *         if not pack_bits(a, 4, &a):
 *             return None             # <<<<<<<<<<<<<<
 *         if i % 8 == 0:
 *             dst[0] |= a << 4
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":167
 *         if not pack_bits(a, 4, &a):
 *             return None
 *         if i % 8 == 0:             # <<<<<<<<<<<<<<
 *             dst[0] |= a << 4
 *         else:
 */
    __pyx_t_6 = (((__pyx_v_i % 8) == 0) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":168
 *             return None
 *         if i % 8 == 0:
 *             dst[0] |= a << 4             # <<<<<<<<<<<<<<
 *         else:
 *             dst[0] |= a
 */
      __pyx_t_8 = 0;
      (__pyx_v_dst[__pyx_t_8]) = ((__pyx_v_dst[__pyx_t_8]) | (__pyx_v_a << 4));
      goto __pyx_L10;
    }
    /*else*/ {

      /* "mmfparser\texpack.pyx":170
 *             dst[0] |= a << 4
 *         else:
 *             dst[0] |= a             # <<<<<<<<<<<<<<
 *             dst += 1
 *         i += 4
 */
      __pyx_t_8 = 0;
      (__pyx_v_dst[__pyx_t_8]) = ((__pyx_v_dst[__pyx_t_8]) | __pyx_v_a);

      /* "mmfparser\texpack.pyx":171
 *         else:
 *             dst[0] |= a
 *             dst += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
      __pyx_v_dst = (__pyx_v_dst + 1);
    }
    __pyx_L10:;

    /* "mmfparser\texpack.pyx":172
 *             dst[0] |= a
 *             dst += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":173
 *             dst += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":150
 * 
 * 
 * def to_a4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_a4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":176
 * 
 * 
 * def to_a4_ignore_rgb(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_8to_a4_ignore_rgb(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_8to_a4_ignore_rgb = {"to_a4_ignore_rgb", (PyCFunction)__pyx_pw_9mmfparser_7texpack_8to_a4_ignore_rgb, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_8to_a4_ignore_rgb(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_a4_ignore_rgb (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_7to_a4_ignore_rgb(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_7to_a4_ignore_rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_a4_ignore_rgb", 0);

  /* "mmfparser\texpack.pyx":177
 * 
 * def to_a4_ignore_rgb(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":178
 * def to_a4_ignore_rgb(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":180
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":181
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 8), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":182
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":184
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if not pack_bits(a, 4, &a):
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":185
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if not pack_bits(a, 4, &a):
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":186
 *     while i < size:
 *         a = src_c[i+3]
 *         if not pack_bits(a, 4, &a):             # <<<<<<<<<<<<<<
 *             return None
 *         if i % 8 == 0:
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_a, 4, (&__pyx_v_a)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":187
 *         a = src_c[i+3]
 *         if not pack_bits(a, 4, &a):
 *             return None             # <<<<<<<<<<<<<<
 *         if i % 8 == 0:
 *             dst[0] |= a << 4
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":188
 *         if not pack_bits(a, 4, &a):
 *             return None
 *         if i % 8 == 0:             # <<<<<<<<<<<<<<
 *             dst[0] |= a << 4
 *         else:
 */
    __pyx_t_6 = (((__pyx_v_i % 8) == 0) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":189
 *             return None
 *         if i % 8 == 0:
 *             dst[0] |= a << 4             # <<<<<<<<<<<<<<
 *         else:
 *             dst[0] |= a
 */
      __pyx_t_7 = 0;
      (__pyx_v_dst[__pyx_t_7]) = ((__pyx_v_dst[__pyx_t_7]) | (__pyx_v_a << 4));
      goto __pyx_L6;
    }
    /*else*/ {

      /* "mmfparser\texpack.pyx":191
 *             dst[0] |= a << 4
 *         else:
 *             dst[0] |= a             # <<<<<<<<<<<<<<
 *             dst += 1
 *         i += 4
 */
      __pyx_t_7 = 0;
      (__pyx_v_dst[__pyx_t_7]) = ((__pyx_v_dst[__pyx_t_7]) | __pyx_v_a);

      /* "mmfparser\texpack.pyx":192
 *         else:
 *             dst[0] |= a
 *             dst += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
      __pyx_v_dst = (__pyx_v_dst + 1);
    }
    __pyx_L6:;

    /* "mmfparser\texpack.pyx":193
 *             dst[0] |= a
 *             dst += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":194
 *             dst += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":176
 * 
 * 
 * def to_a4_ignore_rgb(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_a4_ignore_rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":197
 * 
 * 
 * def to_l4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_10to_l4(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_10to_l4 = {"to_l4", (PyCFunction)__pyx_pw_9mmfparser_7texpack_10to_l4, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_10to_l4(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_l4 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_9to_l4(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_9to_l4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_l4", 0);

  /* "mmfparser\texpack.pyx":198
 * 
 * def to_l4(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":199
 * def to_l4(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":201
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":202
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 8), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":203
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 8, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":205
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":206
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":207
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":208
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":209
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if r != g or r != b or g != b or a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":210
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(r, 4, &r):
 */
    __pyx_t_7 = ((__pyx_v_r != __pyx_v_g) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_r != __pyx_v_b) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_g != __pyx_v_b) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_a != 255) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":211
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(r, 4, &r):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":212
 *         if r != g or r != b or g != b or a != 255:
 *             return None
 *         if not pack_bits(r, 4, &r):             # <<<<<<<<<<<<<<
 *             return None
 *         if i % 8 == 0:
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_r, 4, (&__pyx_v_r)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":213
 *             return None
 *         if not pack_bits(r, 4, &r):
 *             return None             # <<<<<<<<<<<<<<
 *         if i % 8 == 0:
 *             dst[0] |= r << 4
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":214
 *         if not pack_bits(r, 4, &r):
 *             return None
 *         if i % 8 == 0:             # <<<<<<<<<<<<<<
 *             dst[0] |= r << 4
 *         else:
 */
    __pyx_t_6 = (((__pyx_v_i % 8) == 0) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":215
 *             return None
 *         if i % 8 == 0:
 *             dst[0] |= r << 4             # <<<<<<<<<<<<<<
 *         else:
 *             dst[0] |= r
 */
      __pyx_t_8 = 0;
      (__pyx_v_dst[__pyx_t_8]) = ((__pyx_v_dst[__pyx_t_8]) | (__pyx_v_r << 4));
      goto __pyx_L11;
    }
    /*else*/ {

      /* "mmfparser\texpack.pyx":217
 *             dst[0] |= r << 4
 *         else:
 *             dst[0] |= r             # <<<<<<<<<<<<<<
 *             dst += 1
 *         i += 4
 */
      __pyx_t_8 = 0;
      (__pyx_v_dst[__pyx_t_8]) = ((__pyx_v_dst[__pyx_t_8]) | __pyx_v_r);

      /* "mmfparser\texpack.pyx":218
 *         else:
 *             dst[0] |= r
 *             dst += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
      __pyx_v_dst = (__pyx_v_dst + 1);
    }
    __pyx_L11:;

    /* "mmfparser\texpack.pyx":219
 *             dst[0] |= r
 *             dst += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":220
 *             dst += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":197
 * 
 * 
 * def to_l4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_l4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":223
 * 
 * 
 * def to_a8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_12to_a8(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_12to_a8 = {"to_a8", (PyCFunction)__pyx_pw_9mmfparser_7texpack_12to_a8, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_12to_a8(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_a8 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_11to_a8(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_11to_a8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_a8", 0);

  /* "mmfparser\texpack.pyx":224
 * 
 * def to_a8(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":225
 * def to_a8(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":227
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 4, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":228
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 4, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 4), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":229
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 4, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":231
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":232
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":233
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":234
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":235
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if r != 255 or g != 255 or b != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":236
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         dst[0] = a
 */
    __pyx_t_7 = ((__pyx_v_r != 255) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_g != 255) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_b != 255) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":237
 *         a = src_c[i+3]
 *         if r != 255 or g != 255 or b != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         dst[0] = a
 *         dst += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":238
 *         if r != 255 or g != 255 or b != 255:
 *             return None
 *         dst[0] = a             # <<<<<<<<<<<<<<
 *         dst += 1
 *         i += 4
 */
    (__pyx_v_dst[0]) = __pyx_v_a;

    /* "mmfparser\texpack.pyx":239
 *             return None
 *         dst[0] = a
 *         dst += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst = (__pyx_v_dst + 1);

    /* "mmfparser\texpack.pyx":240
 *         dst[0] = a
 *         dst += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":241
 *         dst += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":223
 * 
 * 
 * def to_a8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_a8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":244
 * 
 * 
 * def to_l8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_14to_l8(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_14to_l8 = {"to_l8", (PyCFunction)__pyx_pw_9mmfparser_7texpack_14to_l8, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_14to_l8(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_l8 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_13to_l8(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_13to_l8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_l8", 0);

  /* "mmfparser\texpack.pyx":245
 * 
 * def to_l8(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":246
 * def to_l8(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":248
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 4, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":249
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 4, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 4), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":250
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 4, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":252
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":253
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":254
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":255
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":256
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if r != g or r != b or g != b or a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":257
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         dst[0] = r
 */
    __pyx_t_7 = ((__pyx_v_r != __pyx_v_g) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_r != __pyx_v_b) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_g != __pyx_v_b) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_a != 255) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":258
 *         a = src_c[i+3]
 *         if r != g or r != b or g != b or a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         dst[0] = r
 *         dst += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":259
 *         if r != g or r != b or g != b or a != 255:
 *             return None
 *         dst[0] = r             # <<<<<<<<<<<<<<
 *         dst += 1
 *         i += 4
 */
    (__pyx_v_dst[0]) = __pyx_v_r;

    /* "mmfparser\texpack.pyx":260
 *             return None
 *         dst[0] = r
 *         dst += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst = (__pyx_v_dst + 1);

    /* "mmfparser\texpack.pyx":261
 *         dst[0] = r
 *         dst += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":262
 *         dst += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":244
 * 
 * 
 * def to_l8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_l8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":265
 * 
 * 
 * def to_rgb565_with_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_16to_rgb565_with_alpha(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_16to_rgb565_with_alpha = {"to_rgb565_with_alpha", (PyCFunction)__pyx_pw_9mmfparser_7texpack_16to_rgb565_with_alpha, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_16to_rgb565_with_alpha(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_rgb565_with_alpha (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_15to_rgb565_with_alpha(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_15to_rgb565_with_alpha(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  unsigned short *__pyx_v_dst_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_rgb565_with_alpha", 0);

  /* "mmfparser\texpack.pyx":266
 * 
 * def to_rgb565_with_alpha(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":267
 * def to_rgb565_with_alpha(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":269
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":270
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 2), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":271
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":273
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst             # <<<<<<<<<<<<<<
 *     while i < size:
 *         r = src_c[i]
 */
  __pyx_v_dst_s = ((unsigned short *)__pyx_v_dst);

  /* "mmfparser\texpack.pyx":274
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":275
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":276
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":277
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":278
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":279
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(r, 5, &r):
 */
    __pyx_t_6 = ((__pyx_v_a != 255) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":280
 *         a = src_c[i+3]
 *         if a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(r, 5, &r):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":281
 *         if a != 255:
 *             return None
 *         if not pack_bits(r, 5, &r):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(g, 6, &g):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_r, 5, (&__pyx_v_r)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":282
 *             return None
 *         if not pack_bits(r, 5, &r):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(g, 6, &g):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":283
 *         if not pack_bits(r, 5, &r):
 *             return None
 *         if not pack_bits(g, 6, &g):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(b, 5, &b):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_g, 6, (&__pyx_v_g)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":284
 *             return None
 *         if not pack_bits(g, 6, &g):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(b, 5, &b):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":285
 *         if not pack_bits(g, 6, &g):
 *             return None
 *         if not pack_bits(b, 5, &b):             # <<<<<<<<<<<<<<
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_b, 5, (&__pyx_v_b)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":286
 *             return None
 *         if not pack_bits(b, 5, &b):
 *             return None             # <<<<<<<<<<<<<<
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":287
 *         if not pack_bits(b, 5, &b):
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b             # <<<<<<<<<<<<<<
 *         dst_s += 1
 *         i += 4
 */
    (__pyx_v_dst_s[0]) = (((__pyx_v_r << 11) | (__pyx_v_g << 5)) | __pyx_v_b);

    /* "mmfparser\texpack.pyx":288
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst_s = (__pyx_v_dst_s + 1);

    /* "mmfparser\texpack.pyx":289
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":290
 *         dst_s += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":265
 * 
 * 
 * def to_rgb565_with_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_rgb565_with_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":293
 * 
 * 
 * def to_rgb565_without_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_18to_rgb565_without_alpha(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_18to_rgb565_without_alpha = {"to_rgb565_without_alpha", (PyCFunction)__pyx_pw_9mmfparser_7texpack_18to_rgb565_without_alpha, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_18to_rgb565_without_alpha(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_rgb565_without_alpha (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_17to_rgb565_without_alpha(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_17to_rgb565_without_alpha(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  CYTHON_UNUSED unsigned char __pyx_v_a;
  unsigned short *__pyx_v_dst_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_rgb565_without_alpha", 0);

  /* "mmfparser\texpack.pyx":294
 * 
 * def to_rgb565_without_alpha(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":295
 * def to_rgb565_without_alpha(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":297
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":298
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 2), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":299
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":301
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst             # <<<<<<<<<<<<<<
 *     while i < size:
 *         r = src_c[i]
 */
  __pyx_v_dst_s = ((unsigned short *)__pyx_v_dst);

  /* "mmfparser\texpack.pyx":302
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":303
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":304
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":305
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if not pack_bits(r, 5, &r):
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":306
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if not pack_bits(r, 5, &r):
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":307
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if not pack_bits(r, 5, &r):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(g, 6, &g):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_r, 5, (&__pyx_v_r)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":308
 *         a = src_c[i+3]
 *         if not pack_bits(r, 5, &r):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(g, 6, &g):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":309
 *         if not pack_bits(r, 5, &r):
 *             return None
 *         if not pack_bits(g, 6, &g):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(b, 5, &b):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_g, 6, (&__pyx_v_g)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":310
 *             return None
 *         if not pack_bits(g, 6, &g):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(b, 5, &b):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":311
 *         if not pack_bits(g, 6, &g):
 *             return None
 *         if not pack_bits(b, 5, &b):             # <<<<<<<<<<<<<<
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_b, 5, (&__pyx_v_b)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":312
 *             return None
 *         if not pack_bits(b, 5, &b):
 *             return None             # <<<<<<<<<<<<<<
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":313
 *         if not pack_bits(b, 5, &b):
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b             # <<<<<<<<<<<<<<
 *         dst_s += 1
 *         i += 4
 */
    (__pyx_v_dst_s[0]) = (((__pyx_v_r << 11) | (__pyx_v_g << 5)) | __pyx_v_b);

    /* "mmfparser\texpack.pyx":314
 *             return None
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst_s = (__pyx_v_dst_s + 1);

    /* "mmfparser\texpack.pyx":315
 *         dst_s[0] = (r << 11) | (g << 5) | b
 *         dst_s += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":316
 *         dst_s += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":293
 * 
 * 
 * def to_rgb565_without_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_rgb565_without_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":319
 * 
 * 
 * def to_rgba4444(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_20to_rgba4444(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_20to_rgba4444 = {"to_rgba4444", (PyCFunction)__pyx_pw_9mmfparser_7texpack_20to_rgba4444, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_20to_rgba4444(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_rgba4444 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_19to_rgba4444(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_19to_rgba4444(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  unsigned short *__pyx_v_dst_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_rgba4444", 0);

  /* "mmfparser\texpack.pyx":320
 * 
 * def to_rgba4444(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":321
 * def to_rgba4444(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":323
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":324
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 2), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":325
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":327
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst             # <<<<<<<<<<<<<<
 *     while i < size:
 *         r = src_c[i]
 */
  __pyx_v_dst_s = ((unsigned short *)__pyx_v_dst);

  /* "mmfparser\texpack.pyx":328
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":329
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":330
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":331
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":332
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":333
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(r, 4, &r):
 */
    __pyx_t_6 = ((__pyx_v_a != 255) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":334
 *         a = src_c[i+3]
 *         if a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(r, 4, &r):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":335
 *         if a != 255:
 *             return None
 *         if not pack_bits(r, 4, &r):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(g, 4, &g):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_r, 4, (&__pyx_v_r)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":336
 *             return None
 *         if not pack_bits(r, 4, &r):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(g, 4, &g):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":337
 *         if not pack_bits(r, 4, &r):
 *             return None
 *         if not pack_bits(g, 4, &g):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(b, 4, &b):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_g, 4, (&__pyx_v_g)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":338
 *             return None
 *         if not pack_bits(g, 4, &g):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(b, 4, &b):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":339
 *         if not pack_bits(g, 4, &g):
 *             return None
 *         if not pack_bits(b, 4, &b):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(a, 4, &a):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_b, 4, (&__pyx_v_b)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":340
 *             return None
 *         if not pack_bits(b, 4, &b):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(a, 4, &a):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":341
 *         if not pack_bits(b, 4, &b):
 *             return None
 *         if not pack_bits(a, 4, &a):             # <<<<<<<<<<<<<<
 *             return None
 *         dst_s[0] = (r << 12) | (g << 8) | (b << 4) | a
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_a, 4, (&__pyx_v_a)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":342
 *             return None
 *         if not pack_bits(a, 4, &a):
 *             return None             # <<<<<<<<<<<<<<
 *         dst_s[0] = (r << 12) | (g << 8) | (b << 4) | a
 *         dst_s += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":343
 *         if not pack_bits(a, 4, &a):
 *             return None
 *         dst_s[0] = (r << 12) | (g << 8) | (b << 4) | a             # <<<<<<<<<<<<<<
 *         dst_s += 1
 *         i += 4
 */
    (__pyx_v_dst_s[0]) = ((((__pyx_v_r << 12) | (__pyx_v_g << 8)) | (__pyx_v_b << 4)) | __pyx_v_a);

    /* "mmfparser\texpack.pyx":344
 *             return None
 *         dst_s[0] = (r << 12) | (g << 8) | (b << 4) | a
 *         dst_s += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst_s = (__pyx_v_dst_s + 1);

    /* "mmfparser\texpack.pyx":345
 *         dst_s[0] = (r << 12) | (g << 8) | (b << 4) | a
 *         dst_s += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":346
 *         dst_s += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":319
 * 
 * 
 * def to_rgba4444(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_rgba4444", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":349
 * 
 * 
 * def to_rgba5551(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_22to_rgba5551(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_22to_rgba5551 = {"to_rgba5551", (PyCFunction)__pyx_pw_9mmfparser_7texpack_22to_rgba5551, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_22to_rgba5551(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_rgba5551 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_21to_rgba5551(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_21to_rgba5551(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  unsigned short *__pyx_v_dst_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_rgba5551", 0);

  /* "mmfparser\texpack.pyx":350
 * 
 * def to_rgba5551(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":351
 * def to_rgba5551(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":353
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":354
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size / 2), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":355
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory(size / 2, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":357
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst             # <<<<<<<<<<<<<<
 *     while i < size:
 *         r = src_c[i]
 */
  __pyx_v_dst_s = ((unsigned short *)__pyx_v_dst);

  /* "mmfparser\texpack.pyx":358
 *     cdef unsigned char r, g, b, a
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":359
 *     cdef unsigned short * dst_s = <unsigned short*>dst
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":360
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":361
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":362
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":363
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(r, 5, &r):
 */
    __pyx_t_6 = ((__pyx_v_a != 255) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":364
 *         a = src_c[i+3]
 *         if a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(r, 5, &r):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":365
 *         if a != 255:
 *             return None
 *         if not pack_bits(r, 5, &r):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(g, 5, &g):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_r, 5, (&__pyx_v_r)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":366
 *             return None
 *         if not pack_bits(r, 5, &r):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(g, 5, &g):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":367
 *         if not pack_bits(r, 5, &r):
 *             return None
 *         if not pack_bits(g, 5, &g):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(b, 5, &b):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_g, 5, (&__pyx_v_g)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":368
 *             return None
 *         if not pack_bits(g, 5, &g):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(b, 5, &b):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":369
 *         if not pack_bits(g, 5, &g):
 *             return None
 *         if not pack_bits(b, 5, &b):             # <<<<<<<<<<<<<<
 *             return None
 *         if not pack_bits(a, 1, &a):
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_b, 5, (&__pyx_v_b)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":370
 *             return None
 *         if not pack_bits(b, 5, &b):
 *             return None             # <<<<<<<<<<<<<<
 *         if not pack_bits(a, 1, &a):
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":371
 *         if not pack_bits(b, 5, &b):
 *             return None
 *         if not pack_bits(a, 1, &a):             # <<<<<<<<<<<<<<
 *             return None
 *         dst_s[0] = (r << 11) | (g << 6) | (b << 1) | a
 */
    __pyx_t_6 = ((!(__pyx_f_9mmfparser_7texpack_pack_bits(__pyx_v_a, 1, (&__pyx_v_a)) != 0)) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":372
 *             return None
 *         if not pack_bits(a, 1, &a):
 *             return None             # <<<<<<<<<<<<<<
 *         dst_s[0] = (r << 11) | (g << 6) | (b << 1) | a
 *         dst_s += 1
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":373
 *         if not pack_bits(a, 1, &a):
 *             return None
 *         dst_s[0] = (r << 11) | (g << 6) | (b << 1) | a             # <<<<<<<<<<<<<<
 *         dst_s += 1
 *         i += 4
 */
    (__pyx_v_dst_s[0]) = ((((__pyx_v_r << 11) | (__pyx_v_g << 6)) | (__pyx_v_b << 1)) | __pyx_v_a);

    /* "mmfparser\texpack.pyx":374
 *             return None
 *         dst_s[0] = (r << 11) | (g << 6) | (b << 1) | a
 *         dst_s += 1             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst_s = (__pyx_v_dst_s + 1);

    /* "mmfparser\texpack.pyx":375
 *         dst_s[0] = (r << 11) | (g << 6) | (b << 1) | a
 *         dst_s += 1
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":376
 *         dst_s += 1
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":349
 * 
 * 
 * def to_rgba5551(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_rgba5551", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\texpack.pyx":379
 * 
 * 
 * def to_rgb888(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_7texpack_24to_rgb888(PyObject *__pyx_self, PyObject *__pyx_v_image); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_7texpack_24to_rgb888 = {"to_rgb888", (PyCFunction)__pyx_pw_9mmfparser_7texpack_24to_rgb888, METH_O, 0};
static PyObject *__pyx_pw_9mmfparser_7texpack_24to_rgb888(PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_rgb888 (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_7texpack_23to_rgb888(__pyx_self, ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_7texpack_23to_rgb888(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_v_data = 0;
  char *__pyx_v_src_c;
  char *__pyx_v_dst;
  int __pyx_v_size;
  PyObject *__pyx_v_ret = 0;
  int __pyx_v_i;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  unsigned char __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_rgb888", 0);

  /* "mmfparser\texpack.pyx":380
 * 
 * def to_rgb888(image):
 *     cdef bytes data = image.tobytes()             # <<<<<<<<<<<<<<
 *     cdef char * src_c = data
 *     cdef char * dst
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":381
 * def to_rgb888(image):
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data             # <<<<<<<<<<<<<<
 *     cdef char * dst
 *     cdef int size = len(data)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_src_c = __pyx_t_4;

  /* "mmfparser\texpack.pyx":383
 *     cdef char * src_c = data
 *     cdef char * dst
 *     cdef int size = len(data)             # <<<<<<<<<<<<<<
 *     cdef object ret = allocate_memory((size / 4) * 3, &dst)
 *     cdef int i = 0
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_5;

  /* "mmfparser\texpack.pyx":384
 *     cdef char * dst
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory((size / 4) * 3, &dst)             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 */
  __pyx_t_1 = __pyx_f_9mmfparser_6common_allocate_memory(((__pyx_v_size / 4) * 3), (&__pyx_v_dst)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\texpack.pyx":385
 *     cdef int size = len(data)
 *     cdef object ret = allocate_memory((size / 4) * 3, &dst)
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 */
  __pyx_v_i = 0;

  /* "mmfparser\texpack.pyx":387
 *     cdef int i = 0
 *     cdef unsigned char r, g, b, a
 *     while i < size:             # <<<<<<<<<<<<<<
 *         r = src_c[i]
 *         g = src_c[i+1]
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_i < __pyx_v_size) != 0);
    if (!__pyx_t_6) break;

    /* "mmfparser\texpack.pyx":388
 *     cdef unsigned char r, g, b, a
 *     while i < size:
 *         r = src_c[i]             # <<<<<<<<<<<<<<
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 */
    __pyx_v_r = (__pyx_v_src_c[__pyx_v_i]);

    /* "mmfparser\texpack.pyx":389
 *     while i < size:
 *         r = src_c[i]
 *         g = src_c[i+1]             # <<<<<<<<<<<<<<
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 */
    __pyx_v_g = (__pyx_v_src_c[(__pyx_v_i + 1)]);

    /* "mmfparser\texpack.pyx":390
 *         r = src_c[i]
 *         g = src_c[i+1]
 *         b = src_c[i+2]             # <<<<<<<<<<<<<<
 *         a = src_c[i+3]
 *         if a != 255:
 */
    __pyx_v_b = (__pyx_v_src_c[(__pyx_v_i + 2)]);

    /* "mmfparser\texpack.pyx":391
 *         g = src_c[i+1]
 *         b = src_c[i+2]
 *         a = src_c[i+3]             # <<<<<<<<<<<<<<
 *         if a != 255:
 *             return None
 */
    __pyx_v_a = (__pyx_v_src_c[(__pyx_v_i + 3)]);

    /* "mmfparser\texpack.pyx":392
 *         b = src_c[i+2]
 *         a = src_c[i+3]
 *         if a != 255:             # <<<<<<<<<<<<<<
 *             return None
 *         dst[0] = r
 */
    __pyx_t_6 = ((__pyx_v_a != 255) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\texpack.pyx":393
 *         a = src_c[i+3]
 *         if a != 255:
 *             return None             # <<<<<<<<<<<<<<
 *         dst[0] = r
 *         dst[1] = g
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "mmfparser\texpack.pyx":394
 *         if a != 255:
 *             return None
 *         dst[0] = r             # <<<<<<<<<<<<<<
 *         dst[1] = g
 *         dst[2] = b
 */
    (__pyx_v_dst[0]) = __pyx_v_r;

    /* "mmfparser\texpack.pyx":395
 *             return None
 *         dst[0] = r
 *         dst[1] = g             # <<<<<<<<<<<<<<
 *         dst[2] = b
 *         dst += 3
 */
    (__pyx_v_dst[1]) = __pyx_v_g;

    /* "mmfparser\texpack.pyx":396
 *         dst[0] = r
 *         dst[1] = g
 *         dst[2] = b             # <<<<<<<<<<<<<<
 *         dst += 3
 *         i += 4
 */
    (__pyx_v_dst[2]) = __pyx_v_b;

    /* "mmfparser\texpack.pyx":397
 *         dst[1] = g
 *         dst[2] = b
 *         dst += 3             # <<<<<<<<<<<<<<
 *         i += 4
 *     return ret
 */
    __pyx_v_dst = (__pyx_v_dst + 3);

    /* "mmfparser\texpack.pyx":398
 *         dst[2] = b
 *         dst += 3
 *         i += 4             # <<<<<<<<<<<<<<
 *     return ret
 */
    __pyx_v_i = (__pyx_v_i + 4);
  }

  /* "mmfparser\texpack.pyx":399
 *         dst += 3
 *         i += 4
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\texpack.pyx":379
 * 
 * 
 * def to_rgb888(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.texpack.to_rgb888", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int __pyx_v_size, char **__pyx_v_i) {
  PyObject *__pyx_v_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allocate_memory", 0);

  /* "mmfparser\common.pxd":24
 * 
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:             # <<<<<<<<<<<<<<
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 */
  __pyx_t_1 = ((__pyx_v_size < 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\common.pxd":25
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:
 *         size = 0             # <<<<<<<<<<<<<<
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 */
    __pyx_v_size = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "mmfparser\common.pxd":26
 *     if size < 0:
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)             # <<<<<<<<<<<<<<
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob
 */
  __pyx_t_2 = PyString_FromStringAndSize(NULL, __pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ob = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser\common.pxd":27
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)             # <<<<<<<<<<<<<<
 *     return ob
 */
  (__pyx_v_i[0]) = PyString_AS_STRING(__pyx_v_ob);

  /* "mmfparser\common.pxd":28
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ob);
  __pyx_r = __pyx_v_ob;
  goto __pyx_L0;

  /* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.common.allocate_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9mmfparser_7texpack_Sprite __pyx_vtable_9mmfparser_7texpack_Sprite;

static PyObject *__pyx_tp_new_9mmfparser_7texpack_Sprite(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9mmfparser_7texpack_Sprite *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_7texpack_Sprite *)o);
  p->__pyx_vtab = __pyx_vtabptr_9mmfparser_7texpack_Sprite;
  p->image = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_7texpack_Sprite(PyObject *o) {
  struct __pyx_obj_9mmfparser_7texpack_Sprite *p = (struct __pyx_obj_9mmfparser_7texpack_Sprite *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->image);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9mmfparser_7texpack_Sprite(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_7texpack_Sprite *p = (struct __pyx_obj_9mmfparser_7texpack_Sprite *)o;
  if (p->image) {
    e = (*v)(p->image, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_7texpack_Sprite(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_7texpack_Sprite *p = (struct __pyx_obj_9mmfparser_7texpack_Sprite *)o;
  tmp = ((PyObject*)p->image);
  p->image = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_6Sprite_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_6Sprite_1x_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_6Sprite_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_6Sprite_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_6Sprite_1y_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_6Sprite_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_6Sprite_w(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_6Sprite_1w_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_6Sprite_w(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_1w_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_6Sprite_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_6Sprite_1h_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_6Sprite_h(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_1h_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_6Sprite_image(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_6Sprite_5image_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_6Sprite_image(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_5image_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_7texpack_6Sprite_5image_5__del__(o);
  }
}

static struct PyGetSetDef __pyx_getsets_9mmfparser_7texpack_Sprite[] = {
  {(char *)"x", __pyx_getprop_9mmfparser_7texpack_6Sprite_x, __pyx_setprop_9mmfparser_7texpack_6Sprite_x, 0, 0},
  {(char *)"y", __pyx_getprop_9mmfparser_7texpack_6Sprite_y, __pyx_setprop_9mmfparser_7texpack_6Sprite_y, 0, 0},
  {(char *)"w", __pyx_getprop_9mmfparser_7texpack_6Sprite_w, __pyx_setprop_9mmfparser_7texpack_6Sprite_w, 0, 0},
  {(char *)"h", __pyx_getprop_9mmfparser_7texpack_6Sprite_h, __pyx_setprop_9mmfparser_7texpack_6Sprite_h, 0, 0},
  {(char *)"image", __pyx_getprop_9mmfparser_7texpack_6Sprite_image, __pyx_setprop_9mmfparser_7texpack_6Sprite_image, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_7texpack_Sprite = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.texpack.Sprite", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_7texpack_Sprite), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_7texpack_Sprite, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_7texpack_Sprite, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_7texpack_Sprite, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_7texpack_Sprite, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_7texpack_Sprite, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_7texpack_MaxRects __pyx_vtable_9mmfparser_7texpack_MaxRects;

static PyObject *__pyx_tp_new_9mmfparser_7texpack_MaxRects(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9mmfparser_7texpack_MaxRects *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)o);
  p->__pyx_vtab = __pyx_vtabptr_9mmfparser_7texpack_MaxRects;
  p->results = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_7texpack_MaxRects(PyObject *o) {
  struct __pyx_obj_9mmfparser_7texpack_MaxRects *p = (struct __pyx_obj_9mmfparser_7texpack_MaxRects *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->results);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9mmfparser_7texpack_MaxRects(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_7texpack_MaxRects *p = (struct __pyx_obj_9mmfparser_7texpack_MaxRects *)o;
  if (p->results) {
    e = (*v)(p->results, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_7texpack_MaxRects(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_7texpack_MaxRects *p = (struct __pyx_obj_9mmfparser_7texpack_MaxRects *)o;
  tmp = ((PyObject*)p->results);
  p->results = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_8MaxRects_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_8MaxRects_5width_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_8MaxRects_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_8MaxRects_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_8MaxRects_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_8MaxRects_6height_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_8MaxRects_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_8MaxRects_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_7texpack_8MaxRects_results(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_1__get__(o);
}

static int __pyx_setprop_9mmfparser_7texpack_8MaxRects_results(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_7texpack_8MaxRects_7results_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_7texpack_MaxRects[] = {
  {"get", (PyCFunction)__pyx_pw_9mmfparser_7texpack_8MaxRects_1get, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_7texpack_MaxRects[] = {
  {(char *)"width", __pyx_getprop_9mmfparser_7texpack_8MaxRects_width, __pyx_setprop_9mmfparser_7texpack_8MaxRects_width, 0, 0},
  {(char *)"height", __pyx_getprop_9mmfparser_7texpack_8MaxRects_height, __pyx_setprop_9mmfparser_7texpack_8MaxRects_height, 0, 0},
  {(char *)"results", __pyx_getprop_9mmfparser_7texpack_8MaxRects_results, __pyx_setprop_9mmfparser_7texpack_8MaxRects_results, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_7texpack_MaxRects = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.texpack.MaxRects", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_7texpack_MaxRects), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_7texpack_MaxRects, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_7texpack_MaxRects, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_7texpack_MaxRects, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_7texpack_MaxRects, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_7texpack_MaxRects, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_7texpack_MaxRects, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *__pyx_freelist_9mmfparser_7texpack___pyx_scope_struct__pack_images[8];
static int __pyx_freecount_9mmfparser_7texpack___pyx_scope_struct__pack_images = 0;

static PyObject *__pyx_tp_new_9mmfparser_7texpack___pyx_scope_struct__pack_images(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9mmfparser_7texpack___pyx_scope_struct__pack_images > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images)))) {
    o = (PyObject*)__pyx_freelist_9mmfparser_7texpack___pyx_scope_struct__pack_images[--__pyx_freecount_9mmfparser_7texpack___pyx_scope_struct__pack_images];
    memset(o, 0, sizeof(struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)o);
  new((void*)&(p->__pyx_v_dst)) std::vector<struct rbp::Rect> ();
  new((void*)&(p->__pyx_v_idx)) std::vector<int> ();
  new((void*)&(p->__pyx_v_maxrects)) rbp::MaxRectsBinPack();
  new((void*)&(p->__pyx_v_rects)) std::vector<struct rbp::RectSize> ();
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_7texpack___pyx_scope_struct__pack_images(PyObject *o) {
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *p = (struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->__pyx_v_dst);
  __Pyx_call_destructor(&p->__pyx_v_idx);
  __Pyx_call_destructor(&p->__pyx_v_maxrects);
  __Pyx_call_destructor(&p->__pyx_v_rects);
  Py_CLEAR(p->__pyx_v_h);
  Py_CLEAR(p->__pyx_v_height);
  Py_CLEAR(p->__pyx_v_image);
  Py_CLEAR(p->__pyx_v_images);
  Py_CLEAR(p->__pyx_v_new_images);
  Py_CLEAR(p->__pyx_v_res);
  Py_CLEAR(p->__pyx_v_sprite);
  Py_CLEAR(p->__pyx_v_w);
  Py_CLEAR(p->__pyx_v_width);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9mmfparser_7texpack___pyx_scope_struct__pack_images < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images)))) {
    __pyx_freelist_9mmfparser_7texpack___pyx_scope_struct__pack_images[__pyx_freecount_9mmfparser_7texpack___pyx_scope_struct__pack_images++] = ((struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9mmfparser_7texpack___pyx_scope_struct__pack_images(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *p = (struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)o;
  if (p->__pyx_v_h) {
    e = (*v)(p->__pyx_v_h, a); if (e) return e;
  }
  if (p->__pyx_v_height) {
    e = (*v)(p->__pyx_v_height, a); if (e) return e;
  }
  if (p->__pyx_v_image) {
    e = (*v)(p->__pyx_v_image, a); if (e) return e;
  }
  if (p->__pyx_v_images) {
    e = (*v)(p->__pyx_v_images, a); if (e) return e;
  }
  if (p->__pyx_v_new_images) {
    e = (*v)(p->__pyx_v_new_images, a); if (e) return e;
  }
  if (p->__pyx_v_res) {
    e = (*v)(((PyObject*)p->__pyx_v_res), a); if (e) return e;
  }
  if (p->__pyx_v_sprite) {
    e = (*v)(((PyObject*)p->__pyx_v_sprite), a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  if (p->__pyx_v_width) {
    e = (*v)(p->__pyx_v_width, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_7texpack___pyx_scope_struct__pack_images(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *p = (struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images *)o;
  tmp = ((PyObject*)p->__pyx_v_h);
  p->__pyx_v_h = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_height);
  p->__pyx_v_height = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_image);
  p->__pyx_v_image = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_images);
  p->__pyx_v_images = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_new_images);
  p->__pyx_v_new_images = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_res);
  p->__pyx_v_res = ((struct __pyx_obj_9mmfparser_7texpack_MaxRects *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sprite);
  p->__pyx_v_sprite = ((struct __pyx_obj_9mmfparser_7texpack_Sprite *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_width);
  p->__pyx_v_width = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9mmfparser_7texpack___pyx_scope_struct__pack_images = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.texpack.__pyx_scope_struct__pack_images", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_7texpack___pyx_scope_struct__pack_images), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_7texpack___pyx_scope_struct__pack_images, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_7texpack___pyx_scope_struct__pack_images, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_7texpack___pyx_scope_struct__pack_images, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_7texpack___pyx_scope_struct__pack_images, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "texpack",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_k_C_LAPTOP_Downloads_AnacondaDev_b, sizeof(__pyx_k_C_LAPTOP_Downloads_AnacondaDev_b), 0, 0, 1, 0},
  {&__pyx_n_s_Image, __pyx_k_Image, sizeof(__pyx_k_Image), 0, 0, 1, 1},
  {&__pyx_n_s_PIL, __pyx_k_PIL, sizeof(__pyx_k_PIL), 0, 0, 1, 1},
  {&__pyx_n_s_RGBA, __pyx_k_RGBA, sizeof(__pyx_k_RGBA), 0, 0, 1, 1},
  {&__pyx_kp_s_Truncating_image_in_texture_atla, __pyx_k_Truncating_image_in_texture_atla, sizeof(__pyx_k_Truncating_image_in_texture_atla), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bit_size, __pyx_k_bit_size, sizeof(__pyx_k_bit_size), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_convert, __pyx_k_convert, sizeof(__pyx_k_convert), 0, 0, 1, 1},
  {&__pyx_n_s_crop, __pyx_k_crop, sizeof(__pyx_k_crop), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_dst, __pyx_k_dst, sizeof(__pyx_k_dst), 0, 0, 1, 1},
  {&__pyx_n_s_dst_s, __pyx_k_dst_s, sizeof(__pyx_k_dst_s), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_get_alpha_bits, __pyx_k_get_alpha_bits, sizeof(__pyx_k_get_alpha_bits), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_images, __pyx_k_images, sizeof(__pyx_k_images), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxrects, __pyx_k_maxrects, sizeof(__pyx_k_maxrects), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_texpack, __pyx_k_mmfparser_texpack, sizeof(__pyx_k_mmfparser_texpack), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_images, __pyx_k_new_images, sizeof(__pyx_k_new_images), 0, 0, 1, 1},
  {&__pyx_n_s_pack_images, __pyx_k_pack_images, sizeof(__pyx_k_pack_images), 0, 0, 1, 1},
  {&__pyx_n_s_paste, __pyx_k_paste, sizeof(__pyx_k_paste), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_rect, __pyx_k_rect, sizeof(__pyx_k_rect), 0, 0, 1, 1},
  {&__pyx_n_s_rects, __pyx_k_rects, sizeof(__pyx_k_rects), 0, 0, 1, 1},
  {&__pyx_kp_s_remaining_sprites, __pyx_k_remaining_sprites, sizeof(__pyx_k_remaining_sprites), 0, 0, 1, 0},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sprite, __pyx_k_sprite, sizeof(__pyx_k_sprite), 0, 0, 1, 1},
  {&__pyx_n_s_src_c, __pyx_k_src_c, sizeof(__pyx_k_src_c), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_to_a4, __pyx_k_to_a4, sizeof(__pyx_k_to_a4), 0, 0, 1, 1},
  {&__pyx_n_s_to_a4_ignore_rgb, __pyx_k_to_a4_ignore_rgb, sizeof(__pyx_k_to_a4_ignore_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_to_a8, __pyx_k_to_a8, sizeof(__pyx_k_to_a8), 0, 0, 1, 1},
  {&__pyx_n_s_to_l4, __pyx_k_to_l4, sizeof(__pyx_k_to_l4), 0, 0, 1, 1},
  {&__pyx_n_s_to_l8, __pyx_k_to_l8, sizeof(__pyx_k_to_l8), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgb565_with_alpha, __pyx_k_to_rgb565_with_alpha, sizeof(__pyx_k_to_rgb565_with_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgb565_without_alpha, __pyx_k_to_rgb565_without_alpha, sizeof(__pyx_k_to_rgb565_without_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgb888, __pyx_k_to_rgb888, sizeof(__pyx_k_to_rgb888), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgba4444, __pyx_k_to_rgba4444, sizeof(__pyx_k_to_rgba4444), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgba5551, __pyx_k_to_rgba5551, sizeof(__pyx_k_to_rgba5551), 0, 0, 1, 1},
  {&__pyx_n_s_tobytes, __pyx_k_tobytes, sizeof(__pyx_k_tobytes), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mmfparser\texpack.pyx":71
 * 
 *     def get(self):
 *         im = Image.new('RGBA', (self.width, self.height), (255, 20, 147, 255))             # <<<<<<<<<<<<<<
 * 
 *         cdef Sprite sprite
 */
  __pyx_tuple_ = PyTuple_Pack(4, __pyx_int_255, __pyx_int_20, __pyx_int_147, __pyx_int_255); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "mmfparser\texpack.pyx":77
 *             x, y, w, h = (sprite.x, sprite.y,
 *                           sprite.w, sprite.h)
 *             tmp = sprite.image.convert('RGBA')             # <<<<<<<<<<<<<<
 *             im.paste(tmp, (x, y, x + w, y + h))
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_RGBA); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "mmfparser\texpack.pyx":83
 * 
 * 
 * def pack_images(images, width, height):             # <<<<<<<<<<<<<<
 *     cdef list new_images = []
 *     cdef vector[RectSize] rects
 */
  __pyx_tuple__3 = PyTuple_Pack(15, __pyx_n_s_images, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_new_images, __pyx_n_s_rects, __pyx_n_s_sprite, __pyx_n_s_rect, __pyx_n_s_image, __pyx_n_s_w, __pyx_n_s_h, __pyx_n_s_maxrects, __pyx_n_s_idx, __pyx_n_s_dst, __pyx_n_s_res, __pyx_n_s_i); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(3, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_pack_images, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":125
 * 
 * 
 * def get_alpha_bits(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__5 = PyTuple_Pack(8, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_bit_size, __pyx_n_s_ret, __pyx_n_s_i); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_get_alpha_bits, 125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":150
 * 
 * 
 * def to_a4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__7 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_a4, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":176
 * 
 * 
 * def to_a4_ignore_rgb(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__9 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_a4_ignore_rgb, 176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":197
 * 
 * 
 * def to_l4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__11 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_l4, 197, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":223
 * 
 * 
 * def to_a8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__13 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_a8, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":244
 * 
 * 
 * def to_l8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__15 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_l8, 244, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":265
 * 
 * 
 * def to_rgb565_with_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__17 = PyTuple_Pack(12, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_dst_s); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_rgb565_with_alpha, 265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":293
 * 
 * 
 * def to_rgb565_without_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__19 = PyTuple_Pack(12, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_dst_s); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_rgb565_without_alpha, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":319
 * 
 * 
 * def to_rgba4444(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__21 = PyTuple_Pack(12, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_dst_s); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_rgba4444, 319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":349
 * 
 * 
 * def to_rgba5551(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__23 = PyTuple_Pack(12, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_dst_s); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_rgba5551, 349, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\texpack.pyx":379
 * 
 * 
 * def to_rgb888(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_tuple__25 = PyTuple_Pack(11, __pyx_n_s_image, __pyx_n_s_data, __pyx_n_s_src_c, __pyx_n_s_dst, __pyx_n_s_size, __pyx_n_s_ret, __pyx_n_s_i, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_to_rgb888, 379, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittexpack(void); /*proto*/
PyMODINIT_FUNC inittexpack(void)
#else
PyMODINIT_FUNC PyInit_texpack(void); /*proto*/
PyMODINIT_FUNC PyInit_texpack(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_texpack(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("texpack", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_mmfparser__texpack) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "mmfparser.texpack")) {
      if (unlikely(PyDict_SetItemString(modules, "mmfparser.texpack", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9mmfparser_7texpack_Sprite = &__pyx_vtable_9mmfparser_7texpack_Sprite;
  __pyx_vtable_9mmfparser_7texpack_Sprite.init = (void (*)(struct __pyx_obj_9mmfparser_7texpack_Sprite *, struct rbp::Rect const &, PyObject *))__pyx_f_9mmfparser_7texpack_6Sprite_init;
  if (PyType_Ready(&__pyx_type_9mmfparser_7texpack_Sprite) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_7texpack_Sprite.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_7texpack_Sprite.tp_dict, __pyx_vtabptr_9mmfparser_7texpack_Sprite) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Sprite", (PyObject *)&__pyx_type_9mmfparser_7texpack_Sprite) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_7texpack_Sprite = &__pyx_type_9mmfparser_7texpack_Sprite;
  __pyx_vtabptr_9mmfparser_7texpack_MaxRects = &__pyx_vtable_9mmfparser_7texpack_MaxRects;
  __pyx_vtable_9mmfparser_7texpack_MaxRects.set_result = (void (*)(struct __pyx_obj_9mmfparser_7texpack_MaxRects *, int, int, std::vector<int>  &, std::vector<struct rbp::Rect>  const &, PyObject *))__pyx_f_9mmfparser_7texpack_8MaxRects_set_result;
  if (PyType_Ready(&__pyx_type_9mmfparser_7texpack_MaxRects) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_7texpack_MaxRects.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_7texpack_MaxRects.tp_dict, __pyx_vtabptr_9mmfparser_7texpack_MaxRects) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "MaxRects", (PyObject *)&__pyx_type_9mmfparser_7texpack_MaxRects) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_7texpack_MaxRects = &__pyx_type_9mmfparser_7texpack_MaxRects;
  if (PyType_Ready(&__pyx_type_9mmfparser_7texpack___pyx_scope_struct__pack_images) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_7texpack___pyx_scope_struct__pack_images.tp_print = 0;
  __pyx_ptype_9mmfparser_7texpack___pyx_scope_struct__pack_images = &__pyx_type_9mmfparser_7texpack___pyx_scope_struct__pack_images;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "mmfparser\texpack.pyx":34
 *     void sort_indexes(vector[int] & idx)
 * 
 * from PIL import Image             # <<<<<<<<<<<<<<
 * 
 * cdef class Sprite:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Image);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Image);
  __Pyx_GIVEREF(__pyx_n_s_Image);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_PIL, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Image); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Image, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":83
 * 
 * 
 * def pack_images(images, width, height):             # <<<<<<<<<<<<<<
 *     cdef list new_images = []
 *     cdef vector[RectSize] rects
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_1pack_images, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pack_images, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":125
 * 
 * 
 * def get_alpha_bits(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_4get_alpha_bits, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_alpha_bits, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":150
 * 
 * 
 * def to_a4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_6to_a4, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_a4, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":176
 * 
 * 
 * def to_a4_ignore_rgb(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_8to_a4_ignore_rgb, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_a4_ignore_rgb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":197
 * 
 * 
 * def to_l4(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_10to_l4, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_l4, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":223
 * 
 * 
 * def to_a8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_12to_a8, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_a8, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":244
 * 
 * 
 * def to_l8(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_14to_l8, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_l8, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":265
 * 
 * 
 * def to_rgb565_with_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_16to_rgb565_with_alpha, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_rgb565_with_alpha, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":293
 * 
 * 
 * def to_rgb565_without_alpha(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_18to_rgb565_without_alpha, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_rgb565_without_alpha, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":319
 * 
 * 
 * def to_rgba4444(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_20to_rgba4444, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_rgba4444, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":349
 * 
 * 
 * def to_rgba5551(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_22to_rgba5551, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_rgba5551, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":379
 * 
 * 
 * def to_rgb888(image):             # <<<<<<<<<<<<<<
 *     cdef bytes data = image.tobytes()
 *     cdef char * src_c = data
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_7texpack_24to_rgb888, NULL, __pyx_n_s_mmfparser_texpack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_rgb888, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\texpack.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from mmfparser.common cimport allocate_memory
 * from libc.string cimport memset
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmfparser.texpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmfparser.texpack");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static CYTHON_INLINE int __Pyx_DelItem_Generic(PyObject *o, PyObject *j) {
    int r;
    if (!j) return -1;
    r = PyObject_DelItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_DelItemInt_Fast(PyObject *o, Py_ssize_t i,
                                               CYTHON_UNUSED int is_list, int wraparound) {
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || PySequence_Check(o)) {
        return PySequence_DelItem(o, i);
    }
#else
    PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
    if (likely(m && m->sq_ass_item)) {
        if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
            Py_ssize_t l = m->sq_length(o);
            if (likely(l >= 0)) {
                i += l;
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    return -1;
            }
        }
        return m->sq_ass_item(o, i, (PyObject *)NULL);
    }
#endif
    return __Pyx_DelItem_Generic(o, PyInt_FromSsize_t(i));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Generator_get_name(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Generator_set_name(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Generator_get_qualname(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Generator_set_qualname(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Generator_get_name, (setter)__Pyx_Generator_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Generator_get_qualname, (setter)__Pyx_Generator_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_GeneratorObject, is_running), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {"throw", (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {"close", (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_GeneratorObject),
    0,
    (destructor) __Pyx_Generator_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Generator_traverse,
    0,
    0,
    offsetof(__pyx_GeneratorObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Generator_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
