/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__mmfparser__data__chunk
#define __PYX_HAVE_API__mmfparser__data__chunk
#include "string.h"
#include "stdio.h"
#include "chunk_cm.cpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmfparser\\data\\chunk.pyx",
  "mmfparser\\bytereader.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9mmfparser_10bytereader_ByteReader;
struct __pyx_obj_9mmfparser_6loader_DataLoader;
struct __pyx_obj_9mmfparser_4data_5chunk_Chunk;
struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList;
struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString;

/* "mmfparser\bytereader.pxd":33
 *     cpdef int tell(self)
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)             # <<<<<<<<<<<<<<
 *     cpdef read(self, int size = ?)
 *     cpdef adjust(self, int to)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek {
  int __pyx_n;
  int mode;
};

/* "mmfparser\bytereader.pxd":34
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)
 *     cpdef read(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read {
  int __pyx_n;
  int size;
};

/* "mmfparser\bytereader.pxd":37
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10
 *     cpdef float readFloat(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":38
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":41
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":42
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef unicode readUnicodeString(self, size=?)
 *     cpdef tuple readColor(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":43
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef tuple readColor(self)
 *     cpdef ByteReader readReader(self, size_t size)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString;

/* "mmfparser\loader.pxd":31
 *     cdef bint init(self, ByteReader reader, DataLoader parent,
 *                    dict settings) except False
 *     cpdef readString(self, ByteReader reader, size=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */
struct __pyx_obj_9mmfparser_10bytereader_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtab;
  unsigned char *buffer;
  unsigned int start;
  unsigned int pos;
  unsigned int data_size;
  unsigned int lastPosition;
  PyObject *original;
  int shared;
  PyObject *python_fp;
};

struct __pyx_obj_9mmfparser_6loader_DataLoader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtab;
  PyObject *settings;
  struct __pyx_obj_9mmfparser_6loader_DataLoader *parent;
};


/* "mmfparser\data\chunk.pyx":34
 *     return newLoader
 * 
 * cdef class Chunk(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         str data
 */
struct __pyx_obj_9mmfparser_4data_5chunk_Chunk {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *data;
  short id;
  short flags;
  struct __pyx_obj_9mmfparser_6loader_DataLoader *loader;
};


/* "mmfparser\data\chunk.pyx":154
 *         return bytes(ret_arr)
 * 
 * cdef class ChunkList(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         list items
 */
struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *items;
};


/* "mmfparser\data\chunk.pyx":263
 *             chunk.write(reader)
 * 
 * cdef class PreservingLoader(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         bytes realData
 */
struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *realData;
};



/* "mmfparser\bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */

struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader {
  int (*tell)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*data)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  int (*seek)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args);
  PyObject *(*read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args);
  PyObject *(*adjust)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch);
  size_t (*size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  short (*readByte)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  double (*readDouble)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*readInt)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args);
  PyObject *(*readUnicodeString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args);
  PyObject *(*readColor)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *(*readReader)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*write)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch);
  int (*write_size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch);
  int (*skipBytes)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*rewind)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*_read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int);
};
static struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtabptr_9mmfparser_10bytereader_ByteReader;


struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader {
  PyObject *(*read)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*initialize)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch);
  int (*init)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, struct __pyx_obj_9mmfparser_6loader_DataLoader *, PyObject *);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString *__pyx_optional_args);
};
static struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtabptr_9mmfparser_6loader_DataLoader;


/* "mmfparser\data\chunk.pyx":34
 *     return newLoader
 * 
 * cdef class Chunk(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         str data
 */

struct __pyx_vtabstruct_9mmfparser_4data_5chunk_Chunk {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_Chunk *__pyx_vtabptr_9mmfparser_4data_5chunk_Chunk;


/* "mmfparser\data\chunk.pyx":154
 *         return bytes(ret_arr)
 * 
 * cdef class ChunkList(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         list items
 */

struct __pyx_vtabstruct_9mmfparser_4data_5chunk_ChunkList {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *(*getId)(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *, unsigned int);
};
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_ChunkList *__pyx_vtabptr_9mmfparser_4data_5chunk_ChunkList;


/* "mmfparser\data\chunk.pyx":263
 *             chunk.write(reader)
 * 
 * cdef class PreservingLoader(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         bytes realData
 */

struct __pyx_vtabstruct_9mmfparser_4data_5chunk_PreservingLoader {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_PreservingLoader *__pyx_vtabptr_9mmfparser_4data_5chunk_PreservingLoader;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_9mmfparser_4data_5chunk_5Chunk_read(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_initialize(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_read(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_getId(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, unsigned int __pyx_v_typ); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_16PreservingLoader_read(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'mmfparser.bytereader' */
static PyTypeObject *__pyx_ptype_9mmfparser_10bytereader_ByteReader = 0;

/* Module declarations from 'mmfparser.loader' */
static PyTypeObject *__pyx_ptype_9mmfparser_6loader_DataLoader = 0;

/* Module declarations from 'mmfparser.data.chunk' */
static PyTypeObject *__pyx_ptype_9mmfparser_4data_5chunk_Chunk = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_5chunk_ChunkList = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_5chunk_PreservingLoader = 0;
static int __pyx_v_9mmfparser_4data_5chunk_initialized;
static PyObject *__pyx_v_9mmfparser_4data_5chunk_chunkLoaders = 0;
static PyObject *__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds = 0;
static PyObject *__pyx_v_9mmfparser_4data_5chunk_oldLoadersReal = 0;
static int __pyx_v_9mmfparser_4data_5chunk_LAST;
static int __pyx_v_9mmfparser_4data_5chunk_APPTARGETFILENAME;
static int __pyx_v_9mmfparser_4data_5chunk_PROTECTION;
static PyObject *__pyx_f_9mmfparser_4data_5chunk_create_transform_part(PyObject *); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_create_transform(PyObject *, PyObject *, PyObject *, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(void); /*proto*/
static CYTHON_INLINE void __pyx_f_9mmfparser_4data_5chunk_setup(void); /*proto*/
#define __Pyx_MODULE_NAME "mmfparser.data.chunk"
int __pyx_module_is_main_mmfparser__data__chunk = 0;

/* Implementation of 'mmfparser.data.chunk' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_makeValueChunk(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_klass, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_read(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_2getName(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_4write(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_2create_transform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_editor, PyObject *__pyx_v_name, PyObject *__pyx_v_copyright, int __pyx_v_is_ascii, int __pyx_v_build); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_initialize(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_2read(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_4append(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_loader, PyObject *__pyx_v_compressed); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_6popChunk(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkType, int __pyx_v_returnNone); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_8indexChunk(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkType); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_10popName(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkName); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_12write(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items___get__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_read(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_2write(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData___get__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_5chunk_10OldLoaders___getitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_Chunk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_ChunkList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_PreservingLoader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "";
static char __pyx_k__2[] = "\000";
static char __pyx_k_at[] = "at";
static char __pyx_k_id[] = "id";
static char __pyx_k_all[] = "all";
static char __pyx_k_chr[] = "chr";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_end[] = "end";
static char __pyx_k_get[] = "get";
static char __pyx_k_key[] = "key";
static char __pyx_k_new[] = "new";
static char __pyx_k_old[] = "old";
static char __pyx_k_LAST[] = "LAST";
static char __pyx_k_Last[] = "Last";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_read[] = "read";
static char __pyx_k_self[] = "self";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Chunk[] = "Chunk";
static char __pyx_k_FONTS[] = "FONTS";
static char __pyx_k_FRAME[] = "FRAME";
static char __pyx_k_Frame[] = "Frame";
static char __pyx_k_all_2[] = "__all__";
static char __pyx_k_build[] = "build";
static char __pyx_k_chunk[] = "chunk";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_flags[] = "flags";
static char __pyx_k_klass[] = "klass";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_trans[] = "trans";
static char __pyx_k_value[] = "value";
static char __pyx_k_write[] = "write";
static char __pyx_k_APPDOC[] = "APPDOC";
static char __pyx_k_AppDoc[] = "AppDoc";
static char __pyx_k_Events[] = "Events";
static char __pyx_k_FadeIn[] = "FadeIn";
static char __pyx_k_IMAGES[] = "IMAGES";
static char __pyx_k_Layers[] = "Layers";
static char __pyx_k_MUSICS[] = "MUSICS";
static char __pyx_k_SECNUM[] = "SECNUM";
static char __pyx_k_SOUNDS[] = "SOUNDS";
static char __pyx_k_SecNum[] = "SecNum";
static char __pyx_k_editor[] = "editor";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_loader[] = "loader";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_name_2[] = "__name__";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_APPMENU[] = "APPMENU";
static char __pyx_k_APPNAME[] = "APPNAME";
static char __pyx_k_AppIcon[] = "AppIcon";
static char __pyx_k_AppMenu[] = "AppMenu";
static char __pyx_k_AppName[] = "AppName";
static char __pyx_k_EXEONLY[] = "EXEONLY";
static char __pyx_k_EXTDATA[] = "EXTDATA";
static char __pyx_k_EXTPATH[] = "EXTPATH";
static char __pyx_k_ExeOnly[] = "ExeOnly";
static char __pyx_k_ExtData[] = "ExtData";
static char __pyx_k_ExtPath[] = "ExtPath";
static char __pyx_k_FadeOut[] = "FadeOut";
static char __pyx_k_MVTEXTS[] = "MVTEXTS";
static char __pyx_k_PREVIEW[] = "PREVIEW";
static char __pyx_k_SHADERS[] = "SHADERS";
static char __pyx_k_Shaders[] = "Shaders";
static char __pyx_k_getName[] = "getName";
static char __pyx_k_getitem[] = "__getitem__";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_setData[] = "setData";
static char __pyx_k_unicode[] = "unicode";
static char __pyx_k_writing[] = "writing";
static char __pyx_k_FontBank[] = "FontBank";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_chunkIds[] = "chunkIds";
static char __pyx_k_compress[] = "compress";
static char __pyx_k_generate[] = "generate";
static char __pyx_k_is_ascii[] = "is_ascii";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_writeInt[] = "writeInt";
static char __pyx_k_zlibdata[] = "zlibdata";
static char __pyx_k_ABOUTTEXT[] = "ABOUTTEXT";
static char __pyx_k_APPAUTHOR[] = "APPAUTHOR";
static char __pyx_k_APPHEADER[] = "APPHEADER";
static char __pyx_k_AboutText[] = "AboutText";
static char __pyx_k_AppAuthor[] = "AppAuthor";
static char __pyx_k_AppHeader[] = "AppHeader";
static char __pyx_k_COPYRIGHT[] = "COPYRIGHT";
static char __pyx_k_ChunkList[] = "ChunkList";
static char __pyx_k_Copyright[] = "Copyright";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_FRAMENAME[] = "FRAMENAME";
static char __pyx_k_FrameName[] = "FrameName";
static char __pyx_k_ImageBank[] = "ImageBank";
static char __pyx_k_MusicBank[] = "MusicBank";
static char __pyx_k_OTHEREXTS[] = "OTHEREXTS";
static char __pyx_k_SoundBank[] = "SoundBank";
static char __pyx_k_chunkType[] = "chunkType";
static char __pyx_k_copyright[] = "copyright";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_newLoader[] = "newLoader";
static char __pyx_k_utf_16_le[] = "utf-16-le";
static char __pyx_k_APPHEADER2[] = "APPHEADER2";
static char __pyx_k_EXTENSIONS[] = "EXTENSIONS";
static char __pyx_k_FRAMEITEMS[] = "FRAMEITEMS";
static char __pyx_k_FrameItems[] = "FrameItems";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ObjectName[] = "ObjectName";
static char __pyx_k_OldLoaders[] = "OldLoaders";
static char __pyx_k_PROTECTION[] = "PROTECTION";
static char __pyx_k_Protection[] = "Protection";
static char __pyx_k_RANDOMSEED[] = "RANDOMSEED";
static char __pyx_k_chunkNames[] = "chunkNames";
static char __pyx_k_compressed[] = "compressed";
static char __pyx_k_decompress[] = "decompress";
static char __pyx_k_initialize[] = "initialize";
static char __pyx_k_oldLoaders[] = "oldLoaders";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_returnNone[] = "returnNone";
static char __pyx_k_writeShort[] = "writeShort";
static char __pyx_k_BINARYFILES[] = "BINARYFILES";
static char __pyx_k_BinaryFiles[] = "BinaryFiles";
static char __pyx_k_DEMOVERSION[] = "DEMOVERSION";
static char __pyx_k_EXTENSIONS2[] = "EXTENSIONS2";
static char __pyx_k_FRAMEEVENTS[] = "FRAMEEVENTS";
static char __pyx_k_FRAMEFADEIN[] = "FRAMEFADEIN";
static char __pyx_k_FRAMEHEADER[] = "FRAMEHEADER";
static char __pyx_k_FRAMELAYERS[] = "FRAMELAYERS";
static char __pyx_k_FontOffsets[] = "FontOffsets";
static char __pyx_k_FrameHeader[] = "FrameHeader";
static char __pyx_k_OBJINFONAME[] = "OBJINFONAME";
static char __pyx_k_VirtualSize[] = "VirtualSize";
static char __pyx_k_writeReader[] = "writeReader";
static char __pyx_k_DEMOFILEPATH[] = "DEMOFILEPATH";
static char __pyx_k_DemoFilePath[] = "DemoFilePath";
static char __pyx_k_FONTSOFFSETS[] = "FONTSOFFSETS";
static char __pyx_k_FRAMEEFFECTS[] = "FRAMEEFFECTS";
static char __pyx_k_FRAMEFADEOUT[] = "FRAMEFADEOUT";
static char __pyx_k_FRAMEHANDLES[] = "FRAMEHANDLES";
static char __pyx_k_FRAMEITEMS_2[] = "FRAMEITEMS_2";
static char __pyx_k_FRAMEPALETTE[] = "FRAMEPALETTE";
static char __pyx_k_FrameEffects[] = "FrameEffects";
static char __pyx_k_FrameHandles[] = "FrameHandles";
static char __pyx_k_FramePalette[] = "FramePalette";
static char __pyx_k_GLOBALEVENTS[] = "GLOBALEVENTS";
static char __pyx_k_GLOBALVALUES[] = "GLOBALVALUES";
static char __pyx_k_GlobalValues[] = "GlobalValues";
static char __pyx_k_ImageOffsets[] = "ImageOffsets";
static char __pyx_k_LayerEffects[] = "LayerEffects";
static char __pyx_k_MVTTIMERBASE[] = "MVTTIMERBASE";
static char __pyx_k_MusicOffsets[] = "MusicOffsets";
static char __pyx_k_ObjectHeader[] = "ObjectHeader";
static char __pyx_k_SoundOffsets[] = "SoundOffsets";
static char __pyx_k_onepointfive[] = "onepointfive";
static char __pyx_k_APPMENUIMAGES[] = "APPMENUIMAGES";
static char __pyx_k_APPMINIHEADER[] = "APPMINIHEADER";
static char __pyx_k_ExtensionList[] = "ExtensionList";
static char __pyx_k_FRAMEPASSWORD[] = "FRAMEPASSWORD";
static char __pyx_k_FramePassword[] = "FramePassword";
static char __pyx_k_GLOBALSTRINGS[] = "GLOBALSTRINGS";
static char __pyx_k_GlobalStrings[] = "GlobalStrings";
static char __pyx_k_IMAGESOFFSETS[] = "IMAGESOFFSETS";
static char __pyx_k_MUSICSOFFSETS[] = "MUSICSOFFSETS";
static char __pyx_k_OBJECTEFFECTS[] = "OBJECTEFFECTS";
static char __pyx_k_OBJECTSCOMMON[] = "OBJECTSCOMMON";
static char __pyx_k_OBJECTUNKNOWN[] = "OBJECTUNKNOWN";
static char __pyx_k_OBJINFOHEADER[] = "OBJINFOHEADER";
static char __pyx_k_ObjectEffects[] = "ObjectEffects";
static char __pyx_k_SOUNDSOFFSETS[] = "SOUNDSOFFSETS";
static char __pyx_k_EditorFilename[] = "EditorFilename";
static char __pyx_k_ExtendedHeader[] = "ExtendedHeader";
static char __pyx_k_TargetFilename[] = "TargetFilename";
static char __pyx_k_makeValueChunk[] = "makeValueChunk";
static char __pyx_k_mmfparser_data[] = "mmfparser.data";
static char __pyx_k_APPICON_16x16x8[] = "APPICON_16x16x8";
static char __pyx_k_FRAMEPLAYHEADER[] = "FRAMEPLAYHEADER";
static char __pyx_k_ObjectInstances[] = "ObjectInstances";
static char __pyx_k_OtherExtensions[] = "OtherExtensions";
static char __pyx_k_VitalizePreview[] = "VitalizePreview";
static char __pyx_k_unknown_chunk_s[] = "(unknown chunk %s)";
static char __pyx_k_FRAMEFADEINFRAME[] = "FRAMEFADEINFRAME";
static char __pyx_k_FRAMEVIRTUALRECT[] = "FRAMEVIRTUALRECT";
static char __pyx_k_GLOBALVALUENAMES[] = "GLOBALVALUENAMES";
static char __pyx_k_MOSAICIMAGETABLE[] = "MOSAICIMAGETABLE";
static char __pyx_k_ObjectProperties[] = "ObjectProperties";
static char __pyx_k_APPEDITORFILENAME[] = "APPEDITORFILENAME";
static char __pyx_k_APPTARGETFILENAME[] = "APPTARGETFILENAME";
static char __pyx_k_FRAMEFADEOUTFRAME[] = "FRAMEFADEOUTFRAME";
static char __pyx_k_FRAMELAYEREFFECTS[] = "FRAMELAYEREFFECTS";
static char __pyx_k_GLOBALSTRINGNAMES[] = "GLOBALSTRINGNAMES";
static char __pyx_k_MovementTimerBase[] = "MovementTimerBase";
static char __pyx_k_BLURAYFRAMEOPTIONS[] = "BLURAYFRAMEOPTIONS";
static char __pyx_k_FRAMEITEMINSTANCES[] = "FRAMEITEMINSTANCES";
static char __pyx_k_MovementExtensions[] = "MovementExtensions";
static char __pyx_k_ADDITIONAL_EXTENSION[] = "ADDITIONAL_EXTENSION";
static char __pyx_k_ADDITIONAL_FRAMEITEM[] = "ADDITIONAL_FRAMEITEM";
static char __pyx_k_FRAME_IPHONE_OPTIONS[] = "FRAME_IPHONE_OPTIONS";
static char __pyx_k_OldLoaders___getitem[] = "OldLoaders.__getitem__";
static char __pyx_k_mmfparser_data_chunk[] = "mmfparser.data.chunk";
static char __pyx_k_chunkname_r_not_found[] = "chunkname %r not found";
static char __pyx_k_chunktype_r_not_found[] = "chunktype %r not found";
static char __pyx_k_s_has_not_been_implemented[] = "%s has not been implemented";
static char __pyx_k_creating_new_data_transform[] = "creating new data transform";
static char __pyx_k_mmfparser_data_chunkloaders[] = "mmfparser.data.chunkloaders";
static char __pyx_k_ADDITIONAL_FRAMEITEMINSTANCE[] = "ADDITIONAL_FRAMEITEMINSTANCE";
static char __pyx_k_unsupported_compression_flag_s[] = "unsupported compression flag: %s";
static char __pyx_k_E_LAPTOP_Downloads_AnalCondom_Pl[] = "E:\\LAPTOP\\Downloads\\AnalCondom-Plus - Copy\\AnacondaDev - Compression\\mmfparser\\data\\chunk.pyx";
static char __pyx_k_Last_chunk_not_found_in_ChunkLis[] = "Last chunk not found in ChunkList";
static char __pyx_k_mmfparser_data_chunkloaders_onep[] = "mmfparser.data.chunkloaders.onepointfive";
static PyObject *__pyx_kp_b_;
static PyObject *__pyx_n_s_ABOUTTEXT;
static PyObject *__pyx_n_s_ADDITIONAL_EXTENSION;
static PyObject *__pyx_n_s_ADDITIONAL_FRAMEITEM;
static PyObject *__pyx_n_s_ADDITIONAL_FRAMEITEMINSTANCE;
static PyObject *__pyx_n_s_APPAUTHOR;
static PyObject *__pyx_n_s_APPDOC;
static PyObject *__pyx_n_s_APPEDITORFILENAME;
static PyObject *__pyx_n_s_APPHEADER;
static PyObject *__pyx_n_s_APPHEADER2;
static PyObject *__pyx_n_s_APPICON_16x16x8;
static PyObject *__pyx_n_s_APPMENU;
static PyObject *__pyx_n_s_APPMENUIMAGES;
static PyObject *__pyx_n_s_APPMINIHEADER;
static PyObject *__pyx_n_s_APPNAME;
static PyObject *__pyx_n_s_APPTARGETFILENAME;
static PyObject *__pyx_n_s_AboutText;
static PyObject *__pyx_n_s_AppAuthor;
static PyObject *__pyx_n_s_AppDoc;
static PyObject *__pyx_n_s_AppHeader;
static PyObject *__pyx_n_s_AppIcon;
static PyObject *__pyx_n_s_AppMenu;
static PyObject *__pyx_n_s_AppName;
static PyObject *__pyx_n_s_BINARYFILES;
static PyObject *__pyx_n_s_BLURAYFRAMEOPTIONS;
static PyObject *__pyx_n_s_BinaryFiles;
static PyObject *__pyx_n_s_COPYRIGHT;
static PyObject *__pyx_n_s_Chunk;
static PyObject *__pyx_n_s_ChunkList;
static PyObject *__pyx_n_s_Copyright;
static PyObject *__pyx_n_s_DEMOFILEPATH;
static PyObject *__pyx_n_s_DEMOVERSION;
static PyObject *__pyx_n_s_DemoFilePath;
static PyObject *__pyx_n_s_EXEONLY;
static PyObject *__pyx_n_s_EXTDATA;
static PyObject *__pyx_n_s_EXTENSIONS;
static PyObject *__pyx_n_s_EXTENSIONS2;
static PyObject *__pyx_n_s_EXTPATH;
static PyObject *__pyx_kp_s_E_LAPTOP_Downloads_AnalCondom_Pl;
static PyObject *__pyx_n_s_EditorFilename;
static PyObject *__pyx_n_s_Events;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_ExeOnly;
static PyObject *__pyx_n_s_ExtData;
static PyObject *__pyx_n_s_ExtPath;
static PyObject *__pyx_n_s_ExtendedHeader;
static PyObject *__pyx_n_s_ExtensionList;
static PyObject *__pyx_n_s_FONTS;
static PyObject *__pyx_n_s_FONTSOFFSETS;
static PyObject *__pyx_n_s_FRAME;
static PyObject *__pyx_n_s_FRAMEEFFECTS;
static PyObject *__pyx_n_s_FRAMEEVENTS;
static PyObject *__pyx_n_s_FRAMEFADEIN;
static PyObject *__pyx_n_s_FRAMEFADEINFRAME;
static PyObject *__pyx_n_s_FRAMEFADEOUT;
static PyObject *__pyx_n_s_FRAMEFADEOUTFRAME;
static PyObject *__pyx_n_s_FRAMEHANDLES;
static PyObject *__pyx_n_s_FRAMEHEADER;
static PyObject *__pyx_n_s_FRAMEITEMINSTANCES;
static PyObject *__pyx_n_s_FRAMEITEMS;
static PyObject *__pyx_n_s_FRAMEITEMS_2;
static PyObject *__pyx_n_s_FRAMELAYEREFFECTS;
static PyObject *__pyx_n_s_FRAMELAYERS;
static PyObject *__pyx_n_s_FRAMENAME;
static PyObject *__pyx_n_s_FRAMEPALETTE;
static PyObject *__pyx_n_s_FRAMEPASSWORD;
static PyObject *__pyx_n_s_FRAMEPLAYHEADER;
static PyObject *__pyx_n_s_FRAMEVIRTUALRECT;
static PyObject *__pyx_n_s_FRAME_IPHONE_OPTIONS;
static PyObject *__pyx_n_s_FadeIn;
static PyObject *__pyx_n_s_FadeOut;
static PyObject *__pyx_n_s_FontBank;
static PyObject *__pyx_n_s_FontOffsets;
static PyObject *__pyx_n_s_Frame;
static PyObject *__pyx_n_s_FrameEffects;
static PyObject *__pyx_n_s_FrameHandles;
static PyObject *__pyx_n_s_FrameHeader;
static PyObject *__pyx_n_s_FrameItems;
static PyObject *__pyx_n_s_FrameName;
static PyObject *__pyx_n_s_FramePalette;
static PyObject *__pyx_n_s_FramePassword;
static PyObject *__pyx_n_s_GLOBALEVENTS;
static PyObject *__pyx_n_s_GLOBALSTRINGNAMES;
static PyObject *__pyx_n_s_GLOBALSTRINGS;
static PyObject *__pyx_n_s_GLOBALVALUENAMES;
static PyObject *__pyx_n_s_GLOBALVALUES;
static PyObject *__pyx_n_s_GlobalStrings;
static PyObject *__pyx_n_s_GlobalValues;
static PyObject *__pyx_n_s_IMAGES;
static PyObject *__pyx_n_s_IMAGESOFFSETS;
static PyObject *__pyx_n_s_ImageBank;
static PyObject *__pyx_n_s_ImageOffsets;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_LAST;
static PyObject *__pyx_n_s_Last;
static PyObject *__pyx_kp_s_Last_chunk_not_found_in_ChunkLis;
static PyObject *__pyx_n_s_LayerEffects;
static PyObject *__pyx_n_s_Layers;
static PyObject *__pyx_n_s_MOSAICIMAGETABLE;
static PyObject *__pyx_n_s_MUSICS;
static PyObject *__pyx_n_s_MUSICSOFFSETS;
static PyObject *__pyx_n_s_MVTEXTS;
static PyObject *__pyx_n_s_MVTTIMERBASE;
static PyObject *__pyx_n_s_MovementExtensions;
static PyObject *__pyx_n_s_MovementTimerBase;
static PyObject *__pyx_n_s_MusicBank;
static PyObject *__pyx_n_s_MusicOffsets;
static PyObject *__pyx_n_s_OBJECTEFFECTS;
static PyObject *__pyx_n_s_OBJECTSCOMMON;
static PyObject *__pyx_n_s_OBJECTUNKNOWN;
static PyObject *__pyx_n_s_OBJINFOHEADER;
static PyObject *__pyx_n_s_OBJINFONAME;
static PyObject *__pyx_n_s_OTHEREXTS;
static PyObject *__pyx_n_s_ObjectEffects;
static PyObject *__pyx_n_s_ObjectHeader;
static PyObject *__pyx_n_s_ObjectInstances;
static PyObject *__pyx_n_s_ObjectName;
static PyObject *__pyx_n_s_ObjectProperties;
static PyObject *__pyx_n_s_OldLoaders;
static PyObject *__pyx_n_s_OldLoaders___getitem;
static PyObject *__pyx_n_s_OtherExtensions;
static PyObject *__pyx_n_s_PREVIEW;
static PyObject *__pyx_n_s_PROTECTION;
static PyObject *__pyx_n_s_Protection;
static PyObject *__pyx_n_s_RANDOMSEED;
static PyObject *__pyx_n_s_SECNUM;
static PyObject *__pyx_n_s_SHADERS;
static PyObject *__pyx_n_s_SOUNDS;
static PyObject *__pyx_n_s_SOUNDSOFFSETS;
static PyObject *__pyx_n_s_SecNum;
static PyObject *__pyx_n_s_Shaders;
static PyObject *__pyx_n_s_SoundBank;
static PyObject *__pyx_n_s_SoundOffsets;
static PyObject *__pyx_n_s_TargetFilename;
static PyObject *__pyx_n_s_VirtualSize;
static PyObject *__pyx_n_s_VitalizePreview;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_2;
static PyObject *__pyx_n_s_at;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_chunk;
static PyObject *__pyx_n_s_chunkIds;
static PyObject *__pyx_n_s_chunkNames;
static PyObject *__pyx_n_s_chunkType;
static PyObject *__pyx_kp_s_chunkname_r_not_found;
static PyObject *__pyx_kp_s_chunktype_r_not_found;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_compress;
static PyObject *__pyx_n_s_compressed;
static PyObject *__pyx_n_s_copyright;
static PyObject *__pyx_kp_s_creating_new_data_transform;
static PyObject *__pyx_n_s_decompress;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_editor;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_generate;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getName;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_is_ascii;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_klass;
static PyObject *__pyx_n_s_loader;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makeValueChunk;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mmfparser_data;
static PyObject *__pyx_n_s_mmfparser_data_chunk;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders_onep;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newLoader;
static PyObject *__pyx_n_s_old;
static PyObject *__pyx_n_s_oldLoaders;
static PyObject *__pyx_n_s_onepointfive;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_returnNone;
static PyObject *__pyx_kp_s_s_has_not_been_implemented;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setData;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trans;
static PyObject *__pyx_n_s_unicode;
static PyObject *__pyx_kp_s_unknown_chunk_s;
static PyObject *__pyx_kp_s_unsupported_compression_flag_s;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeInt;
static PyObject *__pyx_n_s_writeReader;
static PyObject *__pyx_n_s_writeShort;
static PyObject *__pyx_n_s_writing;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zlibdata;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_281;
static PyObject *__pyx_int_285;
static PyObject *__pyx_int_4386;
static PyObject *__pyx_int_8738;
static PyObject *__pyx_int_8739;
static PyObject *__pyx_int_8740;
static PyObject *__pyx_int_8741;
static PyObject *__pyx_int_8742;
static PyObject *__pyx_int_8743;
static PyObject *__pyx_int_8744;
static PyObject *__pyx_int_8745;
static PyObject *__pyx_int_8746;
static PyObject *__pyx_int_8747;
static PyObject *__pyx_int_8748;
static PyObject *__pyx_int_8749;
static PyObject *__pyx_int_8750;
static PyObject *__pyx_int_8751;
static PyObject *__pyx_int_8752;
static PyObject *__pyx_int_8753;
static PyObject *__pyx_int_8754;
static PyObject *__pyx_int_8755;
static PyObject *__pyx_int_8756;
static PyObject *__pyx_int_8757;
static PyObject *__pyx_int_8758;
static PyObject *__pyx_int_8759;
static PyObject *__pyx_int_8760;
static PyObject *__pyx_int_8761;
static PyObject *__pyx_int_8762;
static PyObject *__pyx_int_8763;
static PyObject *__pyx_int_8764;
static PyObject *__pyx_int_8765;
static PyObject *__pyx_int_8766;
static PyObject *__pyx_int_8767;
static PyObject *__pyx_int_8768;
static PyObject *__pyx_int_8770;
static PyObject *__pyx_int_8771;
static PyObject *__pyx_int_8773;
static PyObject *__pyx_int_13107;
static PyObject *__pyx_int_13108;
static PyObject *__pyx_int_13109;
static PyObject *__pyx_int_13110;
static PyObject *__pyx_int_13111;
static PyObject *__pyx_int_13112;
static PyObject *__pyx_int_13113;
static PyObject *__pyx_int_13114;
static PyObject *__pyx_int_13115;
static PyObject *__pyx_int_13116;
static PyObject *__pyx_int_13117;
static PyObject *__pyx_int_13118;
static PyObject *__pyx_int_13119;
static PyObject *__pyx_int_13120;
static PyObject *__pyx_int_13121;
static PyObject *__pyx_int_13122;
static PyObject *__pyx_int_13123;
static PyObject *__pyx_int_13124;
static PyObject *__pyx_int_13125;
static PyObject *__pyx_int_13126;
static PyObject *__pyx_int_13127;
static PyObject *__pyx_int_13128;
static PyObject *__pyx_int_13129;
static PyObject *__pyx_int_13130;
static PyObject *__pyx_int_17476;
static PyObject *__pyx_int_17477;
static PyObject *__pyx_int_17478;
static PyObject *__pyx_int_17479;
static PyObject *__pyx_int_17480;
static PyObject *__pyx_int_21845;
static PyObject *__pyx_int_21846;
static PyObject *__pyx_int_21847;
static PyObject *__pyx_int_21848;
static PyObject *__pyx_int_26214;
static PyObject *__pyx_int_26215;
static PyObject *__pyx_int_26216;
static PyObject *__pyx_int_26217;
static PyObject *__pyx_int_32639;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;

/* "mmfparser\data\chunk.pyx":29
 *                             unsigned char * trans)
 * 
 * def makeValueChunk(klass, value):             # <<<<<<<<<<<<<<
 *     newLoader = klass()
 *     newLoader.value = value
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_1makeValueChunk(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_5chunk_1makeValueChunk = {"makeValueChunk", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_1makeValueChunk, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_1makeValueChunk(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_klass = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeValueChunk (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_klass,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_klass)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("makeValueChunk", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "makeValueChunk") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_klass = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeValueChunk", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.makeValueChunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_makeValueChunk(__pyx_self, __pyx_v_klass, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_makeValueChunk(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_klass, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_newLoader = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeValueChunk", 0);

  /* "mmfparser\data\chunk.pyx":30
 * 
 * def makeValueChunk(klass, value):
 *     newLoader = klass()             # <<<<<<<<<<<<<<
 *     newLoader.value = value
 *     return newLoader
 */
  __Pyx_INCREF(__pyx_v_klass);
  __pyx_t_2 = __pyx_v_klass; __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_newLoader = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":31
 * def makeValueChunk(klass, value):
 *     newLoader = klass()
 *     newLoader.value = value             # <<<<<<<<<<<<<<
 *     return newLoader
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newLoader, __pyx_n_s_value, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":32
 *     newLoader = klass()
 *     newLoader.value = value
 *     return newLoader             # <<<<<<<<<<<<<<
 * 
 * cdef class Chunk(DataLoader):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_newLoader);
  __pyx_r = __pyx_v_newLoader;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":29
 *                             unsigned char * trans)
 * 
 * def makeValueChunk(klass, value):             # <<<<<<<<<<<<<<
 *     newLoader = klass()
 *     newLoader.value = value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunk.makeValueChunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_newLoader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":41
 *         DataLoader loader
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         cdef bint old = self.settings.get('old', False)
 *         self.id = reader.readShort()
 */

static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_5Chunk_read(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  int __pyx_v_old;
  short __pyx_v_flags;
  int __pyx_v_size;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_data = 0;
  int __pyx_v_supported;
  PyObject *__pyx_v_loaderClass = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  unsigned char *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_5Chunk_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunk.pyx":42
 * 
 *     cpdef read(self, ByteReader reader):
 *         cdef bint old = self.settings.get('old', False)             # <<<<<<<<<<<<<<
 *         self.id = reader.readShort()
 *         cdef short flags = reader.readShort()
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_old, Py_False); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_old = __pyx_t_6;

  /* "mmfparser\data\chunk.pyx":43
 *     cpdef read(self, ByteReader reader):
 *         cdef bint old = self.settings.get('old', False)
 *         self.id = reader.readShort()             # <<<<<<<<<<<<<<
 *         cdef short flags = reader.readShort()
 *         self.flags = flags
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_7 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->id = __pyx_t_7;

  /* "mmfparser\data\chunk.pyx":44
 *         cdef bint old = self.settings.get('old', False)
 *         self.id = reader.readShort()
 *         cdef short flags = reader.readShort()             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         cdef int size = reader.readInt()
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_7 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_flags = __pyx_t_7;

  /* "mmfparser\data\chunk.pyx":45
 *         self.id = reader.readShort()
 *         cdef short flags = reader.readShort()
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         cdef int size = reader.readInt()
 *         cdef ByteReader data = reader.readReader(size)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "mmfparser\data\chunk.pyx":46
 *         cdef short flags = reader.readShort()
 *         self.flags = flags
 *         cdef int size = reader.readInt()             # <<<<<<<<<<<<<<
 *         cdef ByteReader data = reader.readReader(size)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_7;

  /* "mmfparser\data\chunk.pyx":47
 *         self.flags = flags
 *         cdef int size = reader.readInt()
 *         cdef ByteReader data = reader.readReader(size)             # <<<<<<<<<<<<<<
 * 
 *         cdef bint supported
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readReader(__pyx_v_reader, __pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":51
 *         cdef bint supported
 *         IF USE_TRANS:
 *             supported = (flags & (~3)) == 0             # <<<<<<<<<<<<<<
 *         ELSE:
 *             supported = (flags & (~1)) == 0
 */
  __pyx_v_supported = ((__pyx_v_flags & (~3)) == 0);

  /* "mmfparser\data\chunk.pyx":54
 *         ELSE:
 *             supported = (flags & (~1)) == 0
 *         if not supported:             # <<<<<<<<<<<<<<
 *             raise Exception('unsupported compression flag: %s' % flags)
 * 
 */
  __pyx_t_6 = ((!(__pyx_v_supported != 0)) != 0);
  if (__pyx_t_6) {

    /* "mmfparser\data\chunk.pyx":55
 *             supported = (flags & (~1)) == 0
 *         if not supported:
 *             raise Exception('unsupported compression flag: %s' % flags)             # <<<<<<<<<<<<<<
 * 
 *         if (flags & 1) != 0:
 */
    __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_unsupported_compression_flag_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "mmfparser\data\chunk.pyx":57
 *             raise Exception('unsupported compression flag: %s' % flags)
 * 
 *         if (flags & 1) != 0:             # <<<<<<<<<<<<<<
 *             IF USE_TRANS:
 *                 if (flags & 2) != 0:
 */
  __pyx_t_6 = (((__pyx_v_flags & 1) != 0) != 0);
  if (__pyx_t_6) {

    /* "mmfparser\data\chunk.pyx":59
 *         if (flags & 1) != 0:
 *             IF USE_TRANS:
 *                 if (flags & 2) != 0:             # <<<<<<<<<<<<<<
 * 
 *                     #print "transforming chunk 1"
 */
    __pyx_t_6 = (((__pyx_v_flags & 2) != 0) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\data\chunk.pyx":62
 * 
 *                     #print "transforming chunk 1"
 *                     if self.id & 1 == 1:             # <<<<<<<<<<<<<<
 *                        if self.settings['build'] > 285:
 *                           data.buffer[4]^=(self.id&0xFF)^(self.id>>0x8)
 */
      __pyx_t_6 = (((__pyx_v_self->id & 1) == 1) != 0);
      if (__pyx_t_6) {

        /* "mmfparser\data\chunk.pyx":63
 *                     #print "transforming chunk 1"
 *                     if self.id & 1 == 1:
 *                        if self.settings['build'] > 285:             # <<<<<<<<<<<<<<
 *                           data.buffer[4]^=(self.id&0xFF)^(self.id>>0x8)
 *                     transform(&data.buffer[data.pos]+4, data.size()-4,self.settings['trans'])
 */
        if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_build); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_285, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_6) {

          /* "mmfparser\data\chunk.pyx":64
 *                     if self.id & 1 == 1:
 *                        if self.settings['build'] > 285:
 *                           data.buffer[4]^=(self.id&0xFF)^(self.id>>0x8)             # <<<<<<<<<<<<<<
 *                     transform(&data.buffer[data.pos]+4, data.size()-4,self.settings['trans'])
 * 
 */
          __pyx_t_8 = 4;
          (__pyx_v_data->buffer[__pyx_t_8]) = ((__pyx_v_data->buffer[__pyx_t_8]) ^ ((__pyx_v_self->id & 0xFF) ^ (__pyx_v_self->id >> 0x8)));
          goto __pyx_L7;
        }
        __pyx_L7:;
        goto __pyx_L6;
      }
      __pyx_L6:;

      /* "mmfparser\data\chunk.pyx":65
 *                        if self.settings['build'] > 285:
 *                           data.buffer[4]^=(self.id&0xFF)^(self.id>>0x8)
 *                     transform(&data.buffer[data.pos]+4, data.size()-4,self.settings['trans'])             # <<<<<<<<<<<<<<
 * 
 *             if old:
 */
      if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_trans); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyObject_AsUString(__pyx_t_1); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      transform(((&(__pyx_v_data->buffer[__pyx_v_data->pos])) + 4), (((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_data->__pyx_vtab)->size(__pyx_v_data, 0) - 4), __pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "mmfparser\data\chunk.pyx":67
 *                     transform(&data.buffer[data.pos]+4, data.size()-4,self.settings['trans'])
 * 
 *             if old:             # <<<<<<<<<<<<<<
 *                 data = onepointfive.decompress(data)
 *             else:
 */
    __pyx_t_6 = (__pyx_v_old != 0);
    if (__pyx_t_6) {

      /* "mmfparser\data\chunk.pyx":68
 * 
 *             if old:
 *                 data = onepointfive.decompress(data)             # <<<<<<<<<<<<<<
 *             else:
 *                 data = zlibdata.decompress(data)
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_onepointfive); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decompress); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_data));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_data));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF_SET(__pyx_v_data, ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1));
      __pyx_t_1 = 0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "mmfparser\data\chunk.pyx":70
 *                 data = onepointfive.decompress(data)
 *             else:
 *                 data = zlibdata.decompress(data)             # <<<<<<<<<<<<<<
 *         elif (flags & 2) != 0:
 *             IF USE_TRANS:
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_zlibdata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decompress); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_data));
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)__pyx_v_data));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_10bytereader_ByteReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF_SET(__pyx_v_data, ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_1));
      __pyx_t_1 = 0;
    }
    __pyx_L8:;
    goto __pyx_L4;
  }

  /* "mmfparser\data\chunk.pyx":71
 *             else:
 *                 data = zlibdata.decompress(data)
 *         elif (flags & 2) != 0:             # <<<<<<<<<<<<<<
 *             IF USE_TRANS:
 * 
 */
  __pyx_t_6 = (((__pyx_v_flags & 2) != 0) != 0);
  if (__pyx_t_6) {

    /* "mmfparser\data\chunk.pyx":74
 *             IF USE_TRANS:
 * 
 *                 if self.id & 1 == 1:             # <<<<<<<<<<<<<<
 *                    if self.settings['build'] > 285:
 *                       data.buffer[0]^=(self.id&0xFF)^(self.id>>0x8)
 */
    __pyx_t_6 = (((__pyx_v_self->id & 1) == 1) != 0);
    if (__pyx_t_6) {

      /* "mmfparser\data\chunk.pyx":75
 * 
 *                 if self.id & 1 == 1:
 *                    if self.settings['build'] > 285:             # <<<<<<<<<<<<<<
 *                       data.buffer[0]^=(self.id&0xFF)^(self.id>>0x8)
 *                 transform(&data.buffer[data.pos], data.size(), self.settings['trans'])
 */
      if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_build); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_int_285, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "mmfparser\data\chunk.pyx":76
 *                 if self.id & 1 == 1:
 *                    if self.settings['build'] > 285:
 *                       data.buffer[0]^=(self.id&0xFF)^(self.id>>0x8)             # <<<<<<<<<<<<<<
 *                 transform(&data.buffer[data.pos], data.size(), self.settings['trans'])
 * 
 */
        __pyx_t_8 = 0;
        (__pyx_v_data->buffer[__pyx_t_8]) = ((__pyx_v_data->buffer[__pyx_t_8]) ^ ((__pyx_v_self->id & 0xFF) ^ (__pyx_v_self->id >> 0x8)));
        goto __pyx_L10;
      }
      __pyx_L10:;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "mmfparser\data\chunk.pyx":77
 *                    if self.settings['build'] > 285:
 *                       data.buffer[0]^=(self.id&0xFF)^(self.id>>0x8)
 *                 transform(&data.buffer[data.pos], data.size(), self.settings['trans'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_trans); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_AsUString(__pyx_t_5); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    transform((&(__pyx_v_data->buffer[__pyx_v_data->pos])), ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_data->__pyx_vtab)->size(__pyx_v_data, 0), __pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "mmfparser\data\chunk.pyx":81
 * 
 *         cdef type loaderClass
 *         try:             # <<<<<<<<<<<<<<
 *             if old:
 *                 loaderClass = oldLoaders[self.id]
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    /*try:*/ {

      /* "mmfparser\data\chunk.pyx":82
 *         cdef type loaderClass
 *         try:
 *             if old:             # <<<<<<<<<<<<<<
 *                 loaderClass = oldLoaders[self.id]
 *             else:
 */
      __pyx_t_6 = (__pyx_v_old != 0);
      if (__pyx_t_6) {

        /* "mmfparser\data\chunk.pyx":83
 *         try:
 *             if old:
 *                 loaderClass = oldLoaders[self.id]             # <<<<<<<<<<<<<<
 *             else:
 *                 loaderClass = chunkLoaders[self.id]
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_oldLoaders); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_self->id, short, 1, __Pyx_PyInt_From_short, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L11_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!(likely(PyType_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "type", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
        __pyx_v_loaderClass = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;
        goto __pyx_L19;
      }
      /*else*/ {

        /* "mmfparser\data\chunk.pyx":85
 *                 loaderClass = oldLoaders[self.id]
 *             else:
 *                 loaderClass = chunkLoaders[self.id]             # <<<<<<<<<<<<<<
 *             self.loader = self.parent.new(loaderClass, data,
 *                 chunk = self)
 */
        if (unlikely(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
        }
        __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders, __pyx_t_1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L11_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(PyType_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "type", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
        __pyx_v_loaderClass = ((PyObject*)__pyx_t_5);
        __pyx_t_5 = 0;
      }
      __pyx_L19:;

      /* "mmfparser\data\chunk.pyx":86
 *             else:
 *                 loaderClass = chunkLoaders[self.id]
 *             self.loader = self.parent.new(loaderClass, data,             # <<<<<<<<<<<<<<
 *                 chunk = self)
 *         except KeyError:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.parent), __pyx_n_s_new); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_loaderClass));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_loaderClass));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_loaderClass));
      __Pyx_INCREF(((PyObject *)__pyx_v_data));
      PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_data));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
      __Pyx_GOTREF(__pyx_t_2);

      /* "mmfparser\data\chunk.pyx":87
 *                 loaderClass = chunkLoaders[self.id]
 *             self.loader = self.parent.new(loaderClass, data,
 *                 chunk = self)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             print '(unknown chunk %s)' % self.id
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chunk, ((PyObject *)__pyx_v_self)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}

      /* "mmfparser\data\chunk.pyx":86
 *             else:
 *                 loaderClass = chunkLoaders[self.id]
 *             self.loader = self.parent.new(loaderClass, data,             # <<<<<<<<<<<<<<
 *                 chunk = self)
 *         except KeyError:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9mmfparser_6loader_DataLoader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L11_error;}
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->loader);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->loader));
      __pyx_v_self->loader = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_3);
      __pyx_t_3 = 0;
    }
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    goto __pyx_L18_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mmfparser\data\chunk.pyx":88
 *             self.loader = self.parent.new(loaderClass, data,
 *                 chunk = self)
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             print '(unknown chunk %s)' % self.id
 * 
 */
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L13_except_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);

      /* "mmfparser\data\chunk.pyx":89
 *                 chunk = self)
 *         except KeyError:
 *             print '(unknown chunk %s)' % self.id             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
      __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->id); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L13_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_unknown_chunk_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L13_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L13_except_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L12_exception_handled;
    }
    goto __pyx_L13_except_error;
    __pyx_L13_except_error:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    __pyx_L18_try_end:;
  }

  /* "mmfparser\data\chunk.pyx":41
 *         DataLoader loader
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         cdef bint old = self.settings.get('old', False)
 *         self.id = reader.readShort()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_loaderClass);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_read(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_read(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_5Chunk_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":91
 *             print '(unknown chunk %s)' % self.id
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         return chunkNames[self.id]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_3getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_3getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_2getName(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_2getName(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "mmfparser\data\chunk.pyx":92
 * 
 *     def getName(self):
 *         return chunkNames[self.id]             # <<<<<<<<<<<<<<
 * 
 *     def write(self, ByteReader reader):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkNames); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_self->id, short, 1, __Pyx_PyInt_From_short, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":91
 *             print '(unknown chunk %s)' % self.id
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         return chunkNames[self.id]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":94
 *         return chunkNames[self.id]
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         flags = self.flags
 *         reader.writeShort(self.id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_5write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_5write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4write(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_4write(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  short __pyx_v_flags;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunk.pyx":95
 * 
 *     def write(self, ByteReader reader):
 *         flags = self.flags             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.id)
 *         reader.writeShort(flags)
 */
  __pyx_t_1 = __pyx_v_self->flags;
  __pyx_v_flags = __pyx_t_1;

  /* "mmfparser\data\chunk.pyx":96
 *     def write(self, ByteReader reader):
 *         flags = self.flags
 *         reader.writeShort(self.id)             # <<<<<<<<<<<<<<
 *         reader.writeShort(flags)
 *         data = self.loader.generate()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_short(__pyx_v_self->id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":97
 *         flags = self.flags
 *         reader.writeShort(self.id)
 *         reader.writeShort(flags)             # <<<<<<<<<<<<<<
 *         data = self.loader.generate()
 *         if flags == 1:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeShort); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_short(__pyx_v_flags); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":98
 *         reader.writeShort(self.id)
 *         reader.writeShort(flags)
 *         data = self.loader.generate()             # <<<<<<<<<<<<<<
 *         if flags == 1:
 *             data = zlibdata.compress(data)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->loader), __pyx_n_s_generate); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_data = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":99
 *         reader.writeShort(flags)
 *         data = self.loader.generate()
 *         if flags == 1:             # <<<<<<<<<<<<<<
 *             data = zlibdata.compress(data)
 *         reader.writeInt(len(data))
 */
  __pyx_t_7 = ((__pyx_v_flags == 1) != 0);
  if (__pyx_t_7) {

    /* "mmfparser\data\chunk.pyx":100
 *         data = self.loader.generate()
 *         if flags == 1:
 *             data = zlibdata.compress(data)             # <<<<<<<<<<<<<<
 *         reader.writeInt(len(data))
 *         reader.writeReader(data)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_zlibdata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_compress); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_data);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_data);
      __Pyx_GIVEREF(__pyx_v_data);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "mmfparser\data\chunk.pyx":101
 *         if flags == 1:
 *             data = zlibdata.compress(data)
 *         reader.writeInt(len(data))             # <<<<<<<<<<<<<<
 *         reader.writeReader(data)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeInt); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":102
 *             data = zlibdata.compress(data)
 *         reader.writeInt(len(data))
 *         reader.writeReader(data)             # <<<<<<<<<<<<<<
 * 
 * IF USE_TRANS:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_writeReader); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":94
 *         return chunkNames[self.id]
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         flags = self.flags
 *         reader.writeShort(self.id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":36
 * cdef class Chunk(DataLoader):
 *     cdef public:
 *         str data             # <<<<<<<<<<<<<<
 *         short id
 *         short flags
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->data);
  __pyx_r = __pyx_v_self->data;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_4__del__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_4data_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(__pyx_v_self->data);
  __pyx_v_self->data = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":37
 *     cdef public:
 *         str data
 *         short id             # <<<<<<<<<<<<<<
 *         short flags
 *         DataLoader loader
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_2id_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":38
 *         str data
 *         short id
 *         short flags             # <<<<<<<<<<<<<<
 *         DataLoader loader
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_5flags_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->flags = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":39
 *         short id
 *         short flags
 *         DataLoader loader             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader___get__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->loader));
  __pyx_r = ((PyObject *)__pyx_v_self->loader);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9mmfparser_6loader_DataLoader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->loader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->loader));
  __pyx_v_self->loader = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.Chunk.loader.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_4__del__(((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_5Chunk_6loader_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->loader);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->loader));
  __pyx_v_self->loader = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":105
 * 
 * IF USE_TRANS:
 *     cdef bytes create_transform_part(bytes data):             # <<<<<<<<<<<<<<
 *         cdef unsigned char * c = data
 *         cdef unsigned short * v = <unsigned short*>c
 */

static PyObject *__pyx_f_9mmfparser_4data_5chunk_create_transform_part(PyObject *__pyx_v_data) {
  unsigned char *__pyx_v_c;
  unsigned short *__pyx_v_v;
  unsigned int __pyx_v_l;
  unsigned int __pyx_v_i;
  unsigned short __pyx_v_vv;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_transform_part", 0);

  /* "mmfparser\data\chunk.pyx":106
 * IF USE_TRANS:
 *     cdef bytes create_transform_part(bytes data):
 *         cdef unsigned char * c = data             # <<<<<<<<<<<<<<
 *         cdef unsigned short * v = <unsigned short*>c
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsUString(__pyx_v_data); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c = __pyx_t_1;

  /* "mmfparser\data\chunk.pyx":107
 *     cdef bytes create_transform_part(bytes data):
 *         cdef unsigned char * c = data
 *         cdef unsigned short * v = <unsigned short*>c             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int l = len(data) / 2
 */
  __pyx_v_v = ((unsigned short *)__pyx_v_c);

  /* "mmfparser\data\chunk.pyx":109
 *         cdef unsigned short * v = <unsigned short*>c
 * 
 *         cdef unsigned int l = len(data) / 2             # <<<<<<<<<<<<<<
 *         cdef unsigned int i
 *         cdef unsigned short vv
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_l = (__pyx_t_2 / 2);

  /* "mmfparser\data\chunk.pyx":113
 *         cdef unsigned short vv
 * 
 *         cdef bytes ret = b''             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(l):
 */
  __Pyx_INCREF(__pyx_kp_b_);
  __pyx_v_ret = __pyx_kp_b_;

  /* "mmfparser\data\chunk.pyx":115
 *         cdef bytes ret = b''
 * 
 *         for i in xrange(l):             # <<<<<<<<<<<<<<
 *             vv = v[i]
 *             if vv & 0xFF:
 */
  __pyx_t_3 = __pyx_v_l;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "mmfparser\data\chunk.pyx":116
 * 
 *         for i in xrange(l):
 *             vv = v[i]             # <<<<<<<<<<<<<<
 *             if vv & 0xFF:
 *                 ret += chr(vv & 0xFF)
 */
    __pyx_v_vv = (__pyx_v_v[__pyx_v_i]);

    /* "mmfparser\data\chunk.pyx":117
 *         for i in xrange(l):
 *             vv = v[i]
 *             if vv & 0xFF:             # <<<<<<<<<<<<<<
 *                 ret += chr(vv & 0xFF)
 *             vv = vv >> 8
 */
    __pyx_t_5 = ((__pyx_v_vv & 0xFF) != 0);
    if (__pyx_t_5) {

      /* "mmfparser\data\chunk.pyx":118
 *             vv = v[i]
 *             if vv & 0xFF:
 *                 ret += chr(vv & 0xFF)             # <<<<<<<<<<<<<<
 *             vv = vv >> 8
 *             if vv:
 */
      __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_v_vv & 0xFF)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "mmfparser\data\chunk.pyx":119
 *             if vv & 0xFF:
 *                 ret += chr(vv & 0xFF)
 *             vv = vv >> 8             # <<<<<<<<<<<<<<
 *             if vv:
 *                 ret += chr(vv)
 */
    __pyx_v_vv = (__pyx_v_vv >> 8);

    /* "mmfparser\data\chunk.pyx":120
 *                 ret += chr(vv & 0xFF)
 *             vv = vv >> 8
 *             if vv:             # <<<<<<<<<<<<<<
 *                 ret += chr(vv)
 * 
 */
    __pyx_t_5 = (__pyx_v_vv != 0);
    if (__pyx_t_5) {

      /* "mmfparser\data\chunk.pyx":121
 *             vv = vv >> 8
 *             if vv:
 *                 ret += chr(vv)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
      __pyx_t_7 = __Pyx_PyInt_From_unsigned_short(__pyx_v_vv); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;
  }

  /* "mmfparser\data\chunk.pyx":123
 *                 ret += chr(vv)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes create_transform(bytes editor, bytes name, bytes copyright, bint is_ascii, int build):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":105
 * 
 * IF USE_TRANS:
 *     cdef bytes create_transform_part(bytes data):             # <<<<<<<<<<<<<<
 *         cdef unsigned char * c = data
 *         cdef unsigned short * v = <unsigned short*>c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mmfparser.data.chunk.create_transform_part", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":125
 *         return ret
 * 
 *     cpdef bytes create_transform(bytes editor, bytes name, bytes copyright, bint is_ascii, int build):             # <<<<<<<<<<<<<<
 *         cdef bytes ret
 *         if is_ascii:
 */

static PyObject *__pyx_pw_9mmfparser_4data_5chunk_3create_transform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_create_transform(PyObject *__pyx_v_editor, PyObject *__pyx_v_name, PyObject *__pyx_v_copyright, int __pyx_v_is_ascii, int __pyx_v_build, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = 0;
  unsigned int __pyx_v_l;
  PyObject *__pyx_v_ret_arr = 0;
  CYTHON_UNUSED unsigned char *__pyx_v_ret_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  long __pyx_t_6;
  unsigned char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_transform", 0);
  __Pyx_INCREF(__pyx_v_editor);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_INCREF(__pyx_v_copyright);

  /* "mmfparser\data\chunk.pyx":127
 *     cpdef bytes create_transform(bytes editor, bytes name, bytes copyright, bint is_ascii, int build):
 *         cdef bytes ret
 *         if is_ascii:             # <<<<<<<<<<<<<<
 *             ret = (editor + name + copyright)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_is_ascii != 0);
  if (__pyx_t_1) {

    /* "mmfparser\data\chunk.pyx":128
 *         cdef bytes ret
 *         if is_ascii:
 *             ret = (editor + name + copyright)             # <<<<<<<<<<<<<<
 *         else:
 *             editor = editor.decode('utf-8').encode('utf-16-le')
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_editor, __pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_copyright); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_ret = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mmfparser\data\chunk.pyx":130
 *             ret = (editor + name + copyright)
 *         else:
 *             editor = editor.decode('utf-8').encode('utf-16-le')             # <<<<<<<<<<<<<<
 *             name = name.decode('utf-8').encode('utf-16-le')
 *             copyright = copyright.decode('utf-8').encode('utf-16-le')
 */
    if (unlikely(__pyx_v_editor == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_decode_bytes(__pyx_v_editor, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_3), __pyx_k_utf_16_le, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_editor, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "mmfparser\data\chunk.pyx":131
 *         else:
 *             editor = editor.decode('utf-8').encode('utf-16-le')
 *             name = name.decode('utf-8').encode('utf-16-le')             # <<<<<<<<<<<<<<
 *             copyright = copyright.decode('utf-8').encode('utf-16-le')
 *             ret = b''
 */
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __Pyx_decode_bytes(__pyx_v_name, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_2), __pyx_k_utf_16_le, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mmfparser\data\chunk.pyx":132
 *             editor = editor.decode('utf-8').encode('utf-16-le')
 *             name = name.decode('utf-8').encode('utf-16-le')
 *             copyright = copyright.decode('utf-8').encode('utf-16-le')             # <<<<<<<<<<<<<<
 *             ret = b''
 *             if build > 285:
 */
    if (unlikely(__pyx_v_copyright == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_decode_bytes(__pyx_v_copyright, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_3), __pyx_k_utf_16_le, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_copyright, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "mmfparser\data\chunk.pyx":133
 *             name = name.decode('utf-8').encode('utf-16-le')
 *             copyright = copyright.decode('utf-8').encode('utf-16-le')
 *             ret = b''             # <<<<<<<<<<<<<<
 *             if build > 285:
 *                print "creating new data transform"
 */
    __Pyx_INCREF(__pyx_kp_b_);
    __pyx_v_ret = __pyx_kp_b_;

    /* "mmfparser\data\chunk.pyx":134
 *             copyright = copyright.decode('utf-8').encode('utf-16-le')
 *             ret = b''
 *             if build > 285:             # <<<<<<<<<<<<<<
 *                print "creating new data transform"
 *                ret += create_transform_part(name)
 */
    __pyx_t_1 = ((__pyx_v_build > 285) != 0);
    if (__pyx_t_1) {

      /* "mmfparser\data\chunk.pyx":135
 *             ret = b''
 *             if build > 285:
 *                print "creating new data transform"             # <<<<<<<<<<<<<<
 *                ret += create_transform_part(name)
 *                ret += create_transform_part(copyright)
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_creating_new_data_transform) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "mmfparser\data\chunk.pyx":136
 *             if build > 285:
 *                print "creating new data transform"
 *                ret += create_transform_part(name)             # <<<<<<<<<<<<<<
 *                ret += create_transform_part(copyright)
 *                ret += create_transform_part(editor)
 */
      __pyx_t_2 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "mmfparser\data\chunk.pyx":137
 *                print "creating new data transform"
 *                ret += create_transform_part(name)
 *                ret += create_transform_part(copyright)             # <<<<<<<<<<<<<<
 *                ret += create_transform_part(editor)
 *             else:
 */
      __pyx_t_3 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_copyright); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "mmfparser\data\chunk.pyx":138
 *                ret += create_transform_part(name)
 *                ret += create_transform_part(copyright)
 *                ret += create_transform_part(editor)             # <<<<<<<<<<<<<<
 *             else:
 *                 ret += create_transform_part(editor)
 */
      __pyx_t_2 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_editor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "mmfparser\data\chunk.pyx":140
 *                ret += create_transform_part(editor)
 *             else:
 *                 ret += create_transform_part(editor)             # <<<<<<<<<<<<<<
 *                 ret += create_transform_part(name)
 *                 ret += create_transform_part(copyright)
 */
      __pyx_t_3 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_editor); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "mmfparser\data\chunk.pyx":141
 *             else:
 *                 ret += create_transform_part(editor)
 *                 ret += create_transform_part(name)             # <<<<<<<<<<<<<<
 *                 ret += create_transform_part(copyright)
 * 
 */
      __pyx_t_2 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "mmfparser\data\chunk.pyx":142
 *                 ret += create_transform_part(editor)
 *                 ret += create_transform_part(name)
 *                 ret += create_transform_part(copyright)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_f_9mmfparser_4data_5chunk_create_transform_part(__pyx_v_copyright); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "mmfparser\data\chunk.pyx":145
 * 
 * 
 *         ret = ret[:128]             # <<<<<<<<<<<<<<
 *         cdef unsigned int l = len(ret)
 *         ret += '\x00' * max(0, 256 - len(ret))
 */
  __pyx_t_2 = PySequence_GetSlice(__pyx_v_ret, 0, 128); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":146
 * 
 *         ret = ret[:128]
 *         cdef unsigned int l = len(ret)             # <<<<<<<<<<<<<<
 *         ret += '\x00' * max(0, 256 - len(ret))
 * 
 */
  __pyx_t_4 = PyBytes_GET_SIZE(__pyx_v_ret); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_l = __pyx_t_4;

  /* "mmfparser\data\chunk.pyx":147
 *         ret = ret[:128]
 *         cdef unsigned int l = len(ret)
 *         ret += '\x00' * max(0, 256 - len(ret))             # <<<<<<<<<<<<<<
 * 
 *         cdef bytearray ret_arr = bytearray(ret)
 */
  __pyx_t_4 = PyBytes_GET_SIZE(__pyx_v_ret); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = (256 - __pyx_t_4);
  __pyx_t_6 = 0;
  if (((__pyx_t_5 > __pyx_t_6) != 0)) {
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_6;
  }
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_kp_s__2, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF_SET(__pyx_v_ret, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":149
 *         ret += '\x00' * max(0, 256 - len(ret))
 * 
 *         cdef bytearray ret_arr = bytearray(ret)             # <<<<<<<<<<<<<<
 *         cdef unsigned char * ret_c = ret_arr
 *         prepare_transform(ret_arr, l)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ret);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ret);
  __Pyx_GIVEREF(__pyx_v_ret);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyByteArray_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ret_arr = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":150
 * 
 *         cdef bytearray ret_arr = bytearray(ret)
 *         cdef unsigned char * ret_c = ret_arr             # <<<<<<<<<<<<<<
 *         prepare_transform(ret_arr, l)
 *         return bytes(ret_arr)
 */
  __pyx_t_7 = __Pyx_PyObject_AsUString(__pyx_v_ret_arr); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret_c = __pyx_t_7;

  /* "mmfparser\data\chunk.pyx":151
 *         cdef bytearray ret_arr = bytearray(ret)
 *         cdef unsigned char * ret_c = ret_arr
 *         prepare_transform(ret_arr, l)             # <<<<<<<<<<<<<<
 *         return bytes(ret_arr)
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_AsUString(__pyx_v_ret_arr); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  prepare_transform(__pyx_t_7, __pyx_v_l);

  /* "mmfparser\data\chunk.pyx":152
 *         cdef unsigned char * ret_c = ret_arr
 *         prepare_transform(ret_arr, l)
 *         return bytes(ret_arr)             # <<<<<<<<<<<<<<
 * 
 * cdef class ChunkList(DataLoader):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_ret_arr);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ret_arr);
  __Pyx_GIVEREF(__pyx_v_ret_arr);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":125
 *         return ret
 * 
 *     cpdef bytes create_transform(bytes editor, bytes name, bytes copyright, bint is_ascii, int build):             # <<<<<<<<<<<<<<
 *         cdef bytes ret
 *         if is_ascii:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunk.create_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ret_arr);
  __Pyx_XDECREF(__pyx_v_editor);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_copyright);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_3create_transform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_3create_transform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_editor = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_copyright = 0;
  int __pyx_v_is_ascii;
  int __pyx_v_build;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_transform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_editor,&__pyx_n_s_name,&__pyx_n_s_copyright,&__pyx_n_s_is_ascii,&__pyx_n_s_build,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_editor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_transform", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_copyright)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_transform", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_ascii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_transform", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_build)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_transform", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_transform") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_editor = ((PyObject*)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
    __pyx_v_copyright = ((PyObject*)values[2]);
    __pyx_v_is_ascii = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_is_ascii == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_build = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_build == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_transform", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.create_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_editor), (&PyBytes_Type), 1, "editor", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_copyright), (&PyBytes_Type), 1, "copyright", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_2create_transform(__pyx_self, __pyx_v_editor, __pyx_v_name, __pyx_v_copyright, __pyx_v_is_ascii, __pyx_v_build);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_2create_transform(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_editor, PyObject *__pyx_v_name, PyObject *__pyx_v_copyright, int __pyx_v_is_ascii, int __pyx_v_build) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_transform", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_create_transform(__pyx_v_editor, __pyx_v_name, __pyx_v_copyright, __pyx_v_is_ascii, __pyx_v_build, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.create_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":158
 *         list items
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.items = []
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_initialize(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_1initialize)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunk.pyx":159
 * 
 *     cpdef initialize(self):
 *         self.items = []             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":158
 *         list items
 * 
 *     cpdef initialize(self):             # <<<<<<<<<<<<<<
 *         self.items = []
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_1initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_initialize(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_initialize(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_9ChunkList_initialize(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":161
 *         self.items = []
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         setup()
 *         cdef list items = self.items
 */

static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_read(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_items = 0;
  struct __pyx_obj_9mmfparser_6loader_DataLoader *__pyx_v_parent = NULL;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_newChunk = 0;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_copyright = 0;
  PyObject *__pyx_v_copyright_text = 0;
  PyObject *__pyx_v_editor = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_trans = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_3read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunk.pyx":162
 * 
 *     cpdef read(self, ByteReader reader):
 *         setup()             # <<<<<<<<<<<<<<
 *         cdef list items = self.items
 *         # cdef int checksumStart = -1
 */
  __pyx_f_9mmfparser_4data_5chunk_setup();

  /* "mmfparser\data\chunk.pyx":163
 *     cpdef read(self, ByteReader reader):
 *         setup()
 *         cdef list items = self.items             # <<<<<<<<<<<<<<
 *         # cdef int checksumStart = -1
 *         parent = self.parent
 */
  __pyx_t_1 = __pyx_v_self->items;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":165
 *         cdef list items = self.items
 *         # cdef int checksumStart = -1
 *         parent = self.parent             # <<<<<<<<<<<<<<
 *         cdef Chunk newChunk, copyright
 *         cdef bytes copyright_text
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.parent);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parent = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":170
 *         # cdef int chunkPosition
 * 
 *         while 1:             # <<<<<<<<<<<<<<
 *             # chunkPosition = reader.tell()
 *             newChunk = parent.new(Chunk, reader)
 */
  while (1) {

    /* "mmfparser\data\chunk.pyx":172
 *         while 1:
 *             # chunkPosition = reader.tell()
 *             newChunk = parent.new(Chunk, reader)             # <<<<<<<<<<<<<<
 *             if newChunk.id == LAST:
 *                 break
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    __Pyx_INCREF(((PyObject *)__pyx_v_reader));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, ((PyObject *)__pyx_v_reader));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9mmfparser_4data_5chunk_Chunk))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_newChunk, ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "mmfparser\data\chunk.pyx":173
 *             # chunkPosition = reader.tell()
 *             newChunk = parent.new(Chunk, reader)
 *             if newChunk.id == LAST:             # <<<<<<<<<<<<<<
 *                 break
 *             IF USE_TRANS:
 */
    __pyx_t_7 = ((__pyx_v_newChunk->id == __pyx_v_9mmfparser_4data_5chunk_LAST) != 0);
    if (__pyx_t_7) {

      /* "mmfparser\data\chunk.pyx":174
 *             newChunk = parent.new(Chunk, reader)
 *             if newChunk.id == LAST:
 *                 break             # <<<<<<<<<<<<<<
 *             IF USE_TRANS:
 *                 if newChunk.id == 8750 and self.settings['build'] >= 281:
 */
      goto __pyx_L4_break;
    }

    /* "mmfparser\data\chunk.pyx":176
 *                 break
 *             IF USE_TRANS:
 *                 if newChunk.id == 8750 and self.settings['build'] >= 281:             # <<<<<<<<<<<<<<
 *                     # EditorFilename
 *                     editor = newChunk.loader.value
 */
    __pyx_t_8 = ((__pyx_v_newChunk->id == 8750) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_build); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_281, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_7) {

      /* "mmfparser\data\chunk.pyx":178
 *                 if newChunk.id == 8750 and self.settings['build'] >= 281:
 *                     # EditorFilename
 *                     editor = newChunk.loader.value             # <<<<<<<<<<<<<<
 *                     name = self.getId(8740).loader.value
 *                     copyright = self.getId(8763)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newChunk->loader), __pyx_n_s_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_editor, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mmfparser\data\chunk.pyx":179
 *                     # EditorFilename
 *                     editor = newChunk.loader.value
 *                     name = self.getId(8740).loader.value             # <<<<<<<<<<<<<<
 *                     copyright = self.getId(8763)
 *                     if copyright is None:
 */
      __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self->__pyx_base.__pyx_vtab)->getId(__pyx_v_self, 8740)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_t_2)->loader), __pyx_n_s_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mmfparser\data\chunk.pyx":180
 *                     editor = newChunk.loader.value
 *                     name = self.getId(8740).loader.value
 *                     copyright = self.getId(8763)             # <<<<<<<<<<<<<<
 *                     if copyright is None:
 *                         copyright_text = b''
 */
      __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self->__pyx_base.__pyx_vtab)->getId(__pyx_v_self, 8763)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_copyright, ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "mmfparser\data\chunk.pyx":181
 *                     name = self.getId(8740).loader.value
 *                     copyright = self.getId(8763)
 *                     if copyright is None:             # <<<<<<<<<<<<<<
 *                         copyright_text = b''
 *                     else:
 */
      __pyx_t_7 = (((PyObject *)__pyx_v_copyright) == Py_None);
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "mmfparser\data\chunk.pyx":182
 *                     copyright = self.getId(8763)
 *                     if copyright is None:
 *                         copyright_text = b''             # <<<<<<<<<<<<<<
 *                     else:
 *                         copyright_text = copyright.loader.value
 */
        __Pyx_INCREF(__pyx_kp_b_);
        __Pyx_XDECREF_SET(__pyx_v_copyright_text, __pyx_kp_b_);
        goto __pyx_L9;
      }
      /*else*/ {

        /* "mmfparser\data\chunk.pyx":184
 *                         copyright_text = b''
 *                     else:
 *                         copyright_text = copyright.loader.value             # <<<<<<<<<<<<<<
 *                     trans = create_transform(editor, name, copyright_text, not self.settings.get('unicode',False),self.settings['build'])
 *                     parent.settings['trans'] = trans
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_copyright->loader), __pyx_n_s_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_copyright_text, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
      }
      __pyx_L9:;

      /* "mmfparser\data\chunk.pyx":185
 *                     else:
 *                         copyright_text = copyright.loader.value
 *                     trans = create_transform(editor, name, copyright_text, not self.settings.get('unicode',False),self.settings['build'])             # <<<<<<<<<<<<<<
 *                     parent.settings['trans'] = trans
 * 
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_editor))||((__pyx_v_editor) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_editor)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!(likely(PyBytes_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_name)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->__pyx_base.settings, __pyx_n_s_unicode, Py_False); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_build); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_create_transform(((PyObject*)__pyx_v_editor), ((PyObject*)__pyx_v_name), __pyx_v_copyright_text, (!__pyx_t_8), __pyx_t_9, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_trans, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "mmfparser\data\chunk.pyx":186
 *                         copyright_text = copyright.loader.value
 *                     trans = create_transform(editor, name, copyright_text, not self.settings.get('unicode',False),self.settings['build'])
 *                     parent.settings['trans'] = trans             # <<<<<<<<<<<<<<
 * 
 *             # elif newChunk.id == APPTARGETFILENAME:
 */
      if (unlikely(__pyx_v_parent->settings == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      if (unlikely(PyDict_SetItem(__pyx_v_parent->settings, __pyx_n_s_trans, __pyx_v_trans) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "mmfparser\data\chunk.pyx":198
 *                     # raise Exception('checksum does not match (%s %s)' %
 *                         # (checksumStart, currentPosition))
 *             items.append(newChunk)             # <<<<<<<<<<<<<<
 * 
 *     def append(self, loader, compressed = False):
 */
    if (unlikely(__pyx_v_items == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_items, ((PyObject *)__pyx_v_newChunk)); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L4_break:;

  /* "mmfparser\data\chunk.pyx":161
 *         self.items = []
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         setup()
 *         cdef list items = self.items
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XDECREF((PyObject *)__pyx_v_newChunk);
  __Pyx_XDECREF((PyObject *)__pyx_v_copyright);
  __Pyx_XDECREF(__pyx_v_copyright_text);
  __Pyx_XDECREF(__pyx_v_editor);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_trans);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_3read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_2read(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_2read(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_9ChunkList_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":200
 *             items.append(newChunk)
 * 
 *     def append(self, loader, compressed = False):             # <<<<<<<<<<<<<<
 *         newChunk = self.new(Chunk)
 *         newChunk.id = chunkLoaderIds[loader.__class__]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5append(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5append(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_loader = 0;
  PyObject *__pyx_v_compressed = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_loader,&__pyx_n_s_compressed,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_loader)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_compressed);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_loader = values[0];
    __pyx_v_compressed = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_4append(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), __pyx_v_loader, __pyx_v_compressed);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_4append(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_loader, PyObject *__pyx_v_compressed) {
  PyObject *__pyx_v_newChunk = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append", 0);

  /* "mmfparser\data\chunk.pyx":201
 * 
 *     def append(self, loader, compressed = False):
 *         newChunk = self.new(Chunk)             # <<<<<<<<<<<<<<
 *         newChunk.id = chunkLoaderIds[loader.__class__]
 *         if compressed:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_Chunk)));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_newChunk = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":202
 *     def append(self, loader, compressed = False):
 *         newChunk = self.new(Chunk)
 *         newChunk.id = chunkLoaderIds[loader.__class__]             # <<<<<<<<<<<<<<
 *         if compressed:
 *             newChunk.flags = 1
 */
  if (unlikely(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_loader, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds, __pyx_t_1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newChunk, __pyx_n_s_id, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":203
 *         newChunk = self.new(Chunk)
 *         newChunk.id = chunkLoaderIds[loader.__class__]
 *         if compressed:             # <<<<<<<<<<<<<<
 *             newChunk.flags = 1
 *         else:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_compressed); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "mmfparser\data\chunk.pyx":204
 *         newChunk.id = chunkLoaderIds[loader.__class__]
 *         if compressed:
 *             newChunk.flags = 1             # <<<<<<<<<<<<<<
 *         else:
 *             newChunk.flags = 0
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_newChunk, __pyx_n_s_flags, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mmfparser\data\chunk.pyx":206
 *             newChunk.flags = 1
 *         else:
 *             newChunk.flags = 0             # <<<<<<<<<<<<<<
 *         newChunk.loader = loader
 *         self.items.append(newChunk)
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_newChunk, __pyx_n_s_flags, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "mmfparser\data\chunk.pyx":207
 *         else:
 *             newChunk.flags = 0
 *         newChunk.loader = loader             # <<<<<<<<<<<<<<
 *         self.items.append(newChunk)
 *         return newChunk
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_newChunk, __pyx_n_s_loader, __pyx_v_loader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":208
 *             newChunk.flags = 0
 *         newChunk.loader = loader
 *         self.items.append(newChunk)             # <<<<<<<<<<<<<<
 *         return newChunk
 * 
 */
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_self->items, __pyx_v_newChunk); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":209
 *         newChunk.loader = loader
 *         self.items.append(newChunk)
 *         return newChunk             # <<<<<<<<<<<<<<
 * 
 *     cdef Chunk getId(self, unsigned int typ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_newChunk);
  __pyx_r = __pyx_v_newChunk;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":200
 *             items.append(newChunk)
 * 
 *     def append(self, loader, compressed = False):             # <<<<<<<<<<<<<<
 *         newChunk = self.new(Chunk)
 *         newChunk.id = chunkLoaderIds[loader.__class__]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_newChunk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":211
 *         return newChunk
 * 
 *     cdef Chunk getId(self, unsigned int typ):             # <<<<<<<<<<<<<<
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 */

static struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_f_9mmfparser_4data_5chunk_9ChunkList_getId(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, unsigned int __pyx_v_typ) {
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_chunk = 0;
  CYTHON_UNUSED struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_foundChunk = 0;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "mmfparser\data\chunk.pyx":213
 *     cdef Chunk getId(self, unsigned int typ):
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None             # <<<<<<<<<<<<<<
 *         for chunk in self.items:
 *             if chunk.id == typ:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_foundChunk = ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)Py_None);

  /* "mmfparser\data\chunk.pyx":214
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if chunk.id == typ:
 *                 return chunk
 */
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9mmfparser_4data_5chunk_Chunk))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_chunk, ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mmfparser\data\chunk.pyx":215
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:
 *             if chunk.id == typ:             # <<<<<<<<<<<<<<
 *                 return chunk
 *         return None
 */
    __pyx_t_4 = ((__pyx_v_chunk->id == __pyx_v_typ) != 0);
    if (__pyx_t_4) {

      /* "mmfparser\data\chunk.pyx":216
 *         for chunk in self.items:
 *             if chunk.id == typ:
 *                 return chunk             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(((PyObject *)__pyx_v_chunk));
      __pyx_r = __pyx_v_chunk;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "mmfparser\data\chunk.pyx":214
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if chunk.id == typ:
 *                 return chunk
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":217
 *             if chunk.id == typ:
 *                 return chunk
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def popChunk(self, chunkType, bint returnNone = False):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(Py_None);
  __pyx_r = ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)Py_None);
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":211
 *         return newChunk
 * 
 *     cdef Chunk getId(self, unsigned int typ):             # <<<<<<<<<<<<<<
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF((PyObject *)__pyx_v_foundChunk);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":219
 *         return None
 * 
 *     def popChunk(self, chunkType, bint returnNone = False):             # <<<<<<<<<<<<<<
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_7popChunk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_7popChunk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_chunkType = 0;
  int __pyx_v_returnNone;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("popChunk (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_chunkType,&__pyx_n_s_returnNone,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chunkType)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_returnNone);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "popChunk") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_chunkType = values[0];
    if (values[1]) {
      __pyx_v_returnNone = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_returnNone == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_returnNone = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("popChunk", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.popChunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_6popChunk(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), __pyx_v_chunkType, __pyx_v_returnNone);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_6popChunk(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkType, int __pyx_v_returnNone) {
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_chunk = 0;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *__pyx_v_foundChunk = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("popChunk", 0);

  /* "mmfparser\data\chunk.pyx":221
 *     def popChunk(self, chunkType, bint returnNone = False):
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None             # <<<<<<<<<<<<<<
 *         for chunk in self.items:
 *             if type(chunk.loader) is chunkType:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_foundChunk = ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)Py_None);

  /* "mmfparser\data\chunk.pyx":222
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if type(chunk.loader) is chunkType:
 *                 foundChunk = chunk
 */
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9mmfparser_4data_5chunk_Chunk))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_chunk, ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mmfparser\data\chunk.pyx":223
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:
 *             if type(chunk.loader) is chunkType:             # <<<<<<<<<<<<<<
 *                 foundChunk = chunk
 *                 break
 */
    __pyx_t_4 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_chunk->loader))) == __pyx_v_chunkType);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "mmfparser\data\chunk.pyx":224
 *         for chunk in self.items:
 *             if type(chunk.loader) is chunkType:
 *                 foundChunk = chunk             # <<<<<<<<<<<<<<
 *                 break
 *         if foundChunk is not None:
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_chunk));
      __Pyx_DECREF_SET(__pyx_v_foundChunk, __pyx_v_chunk);

      /* "mmfparser\data\chunk.pyx":225
 *             if type(chunk.loader) is chunkType:
 *                 foundChunk = chunk
 *                 break             # <<<<<<<<<<<<<<
 *         if foundChunk is not None:
 *             self.items.remove(foundChunk)
 */
      goto __pyx_L4_break;
    }

    /* "mmfparser\data\chunk.pyx":222
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if type(chunk.loader) is chunkType:
 *                 foundChunk = chunk
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":226
 *                 foundChunk = chunk
 *                 break
 *         if foundChunk is not None:             # <<<<<<<<<<<<<<
 *             self.items.remove(foundChunk)
 *             return foundChunk.loader
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_foundChunk) != Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "mmfparser\data\chunk.pyx":227
 *                 break
 *         if foundChunk is not None:
 *             self.items.remove(foundChunk)             # <<<<<<<<<<<<<<
 *             return foundChunk.loader
 *         if returnNone:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->items, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_foundChunk)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_foundChunk));
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_foundChunk));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_foundChunk));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser\data\chunk.pyx":228
 *         if foundChunk is not None:
 *             self.items.remove(foundChunk)
 *             return foundChunk.loader             # <<<<<<<<<<<<<<
 *         if returnNone:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_foundChunk->loader));
    __pyx_r = ((PyObject *)__pyx_v_foundChunk->loader);
    goto __pyx_L0;
  }

  /* "mmfparser\data\chunk.pyx":229
 *             self.items.remove(foundChunk)
 *             return foundChunk.loader
 *         if returnNone:             # <<<<<<<<<<<<<<
 *             return None
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 */
  __pyx_t_4 = (__pyx_v_returnNone != 0);
  if (__pyx_t_4) {

    /* "mmfparser\data\chunk.pyx":230
 *             return foundChunk.loader
 *         if returnNone:
 *             return None             # <<<<<<<<<<<<<<
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "mmfparser\data\chunk.pyx":231
 *         if returnNone:
 *             return None
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def indexChunk(self, chunkType):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunkType, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_chunktype_r_not_found, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":219
 *         return None
 * 
 *     def popChunk(self, chunkType, bint returnNone = False):             # <<<<<<<<<<<<<<
 *         cdef Chunk chunk
 *         cdef Chunk foundChunk = None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.popChunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF((PyObject *)__pyx_v_foundChunk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":233
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 *     def indexChunk(self, chunkType):             # <<<<<<<<<<<<<<
 *         for index, chunk in enumerate(self.items):
 *             if isinstance(chunk.loader, chunkType):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_9indexChunk(PyObject *__pyx_v_self, PyObject *__pyx_v_chunkType); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_9indexChunk(PyObject *__pyx_v_self, PyObject *__pyx_v_chunkType) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indexChunk (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_8indexChunk(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), ((PyObject *)__pyx_v_chunkType));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_8indexChunk(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkType) {
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_chunk = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indexChunk", 0);

  /* "mmfparser\data\chunk.pyx":234
 * 
 *     def indexChunk(self, chunkType):
 *         for index, chunk in enumerate(self.items):             # <<<<<<<<<<<<<<
 *             if isinstance(chunk.loader, chunkType):
 *                 return index
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_1);
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mmfparser\data\chunk.pyx":235
 *     def indexChunk(self, chunkType):
 *         for index, chunk in enumerate(self.items):
 *             if isinstance(chunk.loader, chunkType):             # <<<<<<<<<<<<<<
 *                 return index
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_loader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_IsInstance(__pyx_t_4, __pyx_v_chunkType); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "mmfparser\data\chunk.pyx":236
 *         for index, chunk in enumerate(self.items):
 *             if isinstance(chunk.loader, chunkType):
 *                 return index             # <<<<<<<<<<<<<<
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_index);
      __pyx_r = __pyx_v_index;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }

    /* "mmfparser\data\chunk.pyx":234
 * 
 *     def indexChunk(self, chunkType):
 *         for index, chunk in enumerate(self.items):             # <<<<<<<<<<<<<<
 *             if isinstance(chunk.loader, chunkType):
 *                 return index
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":237
 *             if isinstance(chunk.loader, chunkType):
 *                 return index
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def popName(self, chunkName):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunkType, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_chunktype_r_not_found, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":233
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 *     def indexChunk(self, chunkType):             # <<<<<<<<<<<<<<
 *         for index, chunk in enumerate(self.items):
 *             if isinstance(chunk.loader, chunkType):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.indexChunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":239
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 *     def popName(self, chunkName):             # <<<<<<<<<<<<<<
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:
 *             self.items.remove(chunk)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_11popName(PyObject *__pyx_v_self, PyObject *__pyx_v_chunkName); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_11popName(PyObject *__pyx_v_self, PyObject *__pyx_v_chunkName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("popName (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_10popName(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), ((PyObject *)__pyx_v_chunkName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_10popName(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_chunkName) {
  PyObject *__pyx_v_chunk = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("popName", 0);

  /* "mmfparser\data\chunk.pyx":240
 * 
 *     def popName(self, chunkName):
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:             # <<<<<<<<<<<<<<
 *             self.items.remove(chunk)
 *             return chunk.loader
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_chunkName, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_chunk))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mmfparser\data\chunk.pyx":241
 *     def popName(self, chunkName):
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:
 *             self.items.remove(chunk)             # <<<<<<<<<<<<<<
 *             return chunk.loader
 *         raise IndexError('chunkname %r not found' % chunkName)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->items, __pyx_n_s_remove); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_chunk); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_chunk);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_chunk);
      __Pyx_GIVEREF(__pyx_v_chunk);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mmfparser\data\chunk.pyx":242
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:
 *             self.items.remove(chunk)
 *             return chunk.loader             # <<<<<<<<<<<<<<
 *         raise IndexError('chunkname %r not found' % chunkName)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_loader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "mmfparser\data\chunk.pyx":240
 * 
 *     def popName(self, chunkName):
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:             # <<<<<<<<<<<<<<
 *             self.items.remove(chunk)
 *             return chunk.loader
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":243
 *             self.items.remove(chunk)
 *             return chunk.loader
 *         raise IndexError('chunkname %r not found' % chunkName)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, ByteReader reader):
 */
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_chunkname_r_not_found, __pyx_v_chunkName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":239
 *         raise IndexError('chunktype %r not found' % chunkType.__name__)
 * 
 *     def popName(self, chunkName):             # <<<<<<<<<<<<<<
 *         for chunk in [chunk for chunk in self.items if chunk.getName() == chunkName]:
 *             self.items.remove(chunk)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.popName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":245
 *         raise IndexError('chunkname %r not found' % chunkName)
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         if 'LAST' not in [chunk.getName() for chunk in self.items]:
 *             raise Exception('Last chunk not found in ChunkList')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_13write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_13write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_12write(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_12write(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_v_checksumStart = NULL;
  PyObject *__pyx_v_chunk = NULL;
  int __pyx_v_currentPosition;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunk.pyx":246
 * 
 *     def write(self, ByteReader reader):
 *         if 'LAST' not in [chunk.getName() for chunk in self.items]:             # <<<<<<<<<<<<<<
 *             raise Exception('Last chunk not found in ChunkList')
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_n_s_LAST, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "mmfparser\data\chunk.pyx":247
 *     def write(self, ByteReader reader):
 *         if 'LAST' not in [chunk.getName() for chunk in self.items]:
 *             raise Exception('Last chunk not found in ChunkList')             # <<<<<<<<<<<<<<
 * 
 *         checksumStart = None
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "mmfparser\data\chunk.pyx":249
 *             raise Exception('Last chunk not found in ChunkList')
 * 
 *         checksumStart = None             # <<<<<<<<<<<<<<
 *         for chunk in self.items:
 *             if chunk.id == chunkIds['PROTECTION']:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_checksumStart = Py_None;

  /* "mmfparser\data\chunk.pyx":250
 * 
 *         checksumStart = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if chunk.id == chunkIds['PROTECTION']:
 *                 if checksumStart is None:
 */
  if (unlikely(__pyx_v_self->items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mmfparser\data\chunk.pyx":251
 *         checksumStart = None
 *         for chunk in self.items:
 *             if chunk.id == chunkIds['PROTECTION']:             # <<<<<<<<<<<<<<
 *                 if checksumStart is None:
 *                     continue
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_n_s_PROTECTION); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_8) {

      /* "mmfparser\data\chunk.pyx":252
 *         for chunk in self.items:
 *             if chunk.id == chunkIds['PROTECTION']:
 *                 if checksumStart is None:             # <<<<<<<<<<<<<<
 *                     continue
 *                 currentPosition = reader.tell()
 */
      __pyx_t_8 = (__pyx_v_checksumStart == Py_None);
      __pyx_t_7 = (__pyx_t_8 != 0);
      if (__pyx_t_7) {

        /* "mmfparser\data\chunk.pyx":253
 *             if chunk.id == chunkIds['PROTECTION']:
 *                 if checksumStart is None:
 *                     continue             # <<<<<<<<<<<<<<
 *                 currentPosition = reader.tell()
 *                 reader.seek(checksumStart)
 */
        goto __pyx_L6_continue;
      }

      /* "mmfparser\data\chunk.pyx":254
 *                 if checksumStart is None:
 *                     continue
 *                 currentPosition = reader.tell()             # <<<<<<<<<<<<<<
 *                 reader.seek(checksumStart)
 *                 data = reader.read(currentPosition - checksumStart)
 */
      __pyx_v_currentPosition = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->tell(__pyx_v_reader, 0);

      /* "mmfparser\data\chunk.pyx":255
 *                     continue
 *                 currentPosition = reader.tell()
 *                 reader.seek(checksumStart)             # <<<<<<<<<<<<<<
 *                 data = reader.read(currentPosition - checksumStart)
 *                 chunk.loader.setData(data)
 */
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_checksumStart); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->seek(__pyx_v_reader, __pyx_t_9, 0, NULL);

      /* "mmfparser\data\chunk.pyx":256
 *                 currentPosition = reader.tell()
 *                 reader.seek(checksumStart)
 *                 data = reader.read(currentPosition - checksumStart)             # <<<<<<<<<<<<<<
 *                 chunk.loader.setData(data)
 *             elif chunk.id == chunkIds['APPTARGETFILENAME']:
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_currentPosition); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_v_checksumStart); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10.__pyx_n = 1;
      __pyx_t_10.size = __pyx_t_9;
      __pyx_t_5 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->read(__pyx_v_reader, 0, &__pyx_t_10); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_data, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "mmfparser\data\chunk.pyx":257
 *                 reader.seek(checksumStart)
 *                 data = reader.read(currentPosition - checksumStart)
 *                 chunk.loader.setData(data)             # <<<<<<<<<<<<<<
 *             elif chunk.id == chunkIds['APPTARGETFILENAME']:
 *                 checksumStart = reader.tell()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_loader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_setData); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_data); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_data);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_data);
        __Pyx_GIVEREF(__pyx_v_data);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L8;
    }

    /* "mmfparser\data\chunk.pyx":258
 *                 data = reader.read(currentPosition - checksumStart)
 *                 chunk.loader.setData(data)
 *             elif chunk.id == chunkIds['APPTARGETFILENAME']:             # <<<<<<<<<<<<<<
 *                 checksumStart = reader.tell()
 *             print 'writing', chunk.getName(), 'at', reader.tell()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_id); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_APPTARGETFILENAME); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "mmfparser\data\chunk.pyx":259
 *                 chunk.loader.setData(data)
 *             elif chunk.id == chunkIds['APPTARGETFILENAME']:
 *                 checksumStart = reader.tell()             # <<<<<<<<<<<<<<
 *             print 'writing', chunk.getName(), 'at', reader.tell()
 *             chunk.write(reader)
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->tell(__pyx_v_reader, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_checksumStart, __pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "mmfparser\data\chunk.pyx":260
 *             elif chunk.id == chunkIds['APPTARGETFILENAME']:
 *                 checksumStart = reader.tell()
 *             print 'writing', chunk.getName(), 'at', reader.tell()             # <<<<<<<<<<<<<<
 *             chunk.write(reader)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_getName); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->tell(__pyx_v_reader, 0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_writing);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_writing);
    __Pyx_GIVEREF(__pyx_n_s_writing);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_at);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_n_s_at);
    __Pyx_GIVEREF(__pyx_n_s_at);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    if (__Pyx_Print(0, __pyx_t_5, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mmfparser\data\chunk.pyx":261
 *                 checksumStart = reader.tell()
 *             print 'writing', chunk.getName(), 'at', reader.tell()
 *             chunk.write(reader)             # <<<<<<<<<<<<<<
 * 
 * cdef class PreservingLoader(DataLoader):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_reader));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_reader));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mmfparser\data\chunk.pyx":250
 * 
 *         checksumStart = None
 *         for chunk in self.items:             # <<<<<<<<<<<<<<
 *             if chunk.id == chunkIds['PROTECTION']:
 *                 if checksumStart is None:
 */
    __pyx_L6_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":245
 *         raise IndexError('chunkname %r not found' % chunkName)
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         if 'LAST' not in [chunk.getName() for chunk in self.items]:
 *             raise Exception('Last chunk not found in ChunkList')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_checksumStart);
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":156
 * cdef class ChunkList(DataLoader):
 *     cdef public:
 *         list items             # <<<<<<<<<<<<<<
 * 
 *     cpdef initialize(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items___get__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->items);
  __pyx_r = __pyx_v_self->items;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.ChunkList.items.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_4__del__(((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_9ChunkList_5items_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":266
 *     cdef public:
 *         bytes realData
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         print '%s has not been implemented' % self.settings['chunk'].getName()
 *         # reader.openEditor()
 */

static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_5chunk_16PreservingLoader_read(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunk.pyx":267
 *         bytes realData
 *     cpdef read(self, ByteReader reader):
 *         print '%s has not been implemented' % self.settings['chunk'].getName()             # <<<<<<<<<<<<<<
 *         # reader.openEditor()
 *         # import code
 */
  if (unlikely(__pyx_v_self->__pyx_base.settings == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.settings, __pyx_n_s_chunk); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_has_not_been_implemented, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":272
 *         # code.interact(local = locals())
 *         # raise NotImplementedError('%s has not been implemented' % self.parent.getName())
 *         self.realData = reader.read()             # <<<<<<<<<<<<<<
 * 
 *     def write(self, ByteReader reader):
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->read(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->realData);
  __Pyx_DECREF(__pyx_v_self->realData);
  __pyx_v_self->realData = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":266
 *     cdef public:
 *         bytes realData
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         print '%s has not been implemented' % self.settings['chunk'].getName()
 *         # reader.openEditor()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunk.PreservingLoader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_read(((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_read(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_5chunk_16PreservingLoader_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.PreservingLoader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":274
 *         self.realData = reader.read()
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         return reader.write(self.realData)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_2write(((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_2write(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunk.pyx":275
 * 
 *     def write(self, ByteReader reader):
 *         return reader.write(self.realData)             # <<<<<<<<<<<<<<
 * 
 * cdef inline createPreservingLoader():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->realData;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->write(__pyx_v_reader, ((PyObject*)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":274
 *         self.realData = reader.read()
 * 
 *     def write(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         return reader.write(self.realData)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.data.chunk.PreservingLoader.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":265
 * cdef class PreservingLoader(DataLoader):
 *     cdef public:
 *         bytes realData             # <<<<<<<<<<<<<<
 *     cpdef read(self, ByteReader reader):
 *         print '%s has not been implemented' % self.settings['chunk'].getName()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData___get__(((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData___get__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->realData);
  __pyx_r = __pyx_v_self->realData;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_2__set__(((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_2__set__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->realData);
  __Pyx_DECREF(__pyx_v_self->realData);
  __pyx_v_self->realData = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunk.PreservingLoader.realData.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_4__del__(((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_5chunk_16PreservingLoader_8realData_4__del__(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->realData);
  __Pyx_DECREF(__pyx_v_self->realData);
  __pyx_v_self->realData = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":277
 *         return reader.write(self.realData)
 * 
 * cdef inline createPreservingLoader():             # <<<<<<<<<<<<<<
 *     return PreservingLoader
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createPreservingLoader", 0);

  /* "mmfparser\data\chunk.pyx":278
 * 
 * cdef inline createPreservingLoader():
 *     return PreservingLoader             # <<<<<<<<<<<<<<
 * 
 * cdef bint initialized = False
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_PreservingLoader)));
  __pyx_r = ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_5chunk_PreservingLoader));
  goto __pyx_L0;

  /* "mmfparser\data\chunk.pyx":277
 *         return reader.write(self.realData)
 * 
 * cdef inline createPreservingLoader():             # <<<<<<<<<<<<<<
 *     return PreservingLoader
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunk.pyx":286
 * cdef dict oldLoadersReal
 * 
 * cdef inline void setup():             # <<<<<<<<<<<<<<
 *     if chunkLoaders is not None:
 *         return
 */

static CYTHON_INLINE void __pyx_f_9mmfparser_4data_5chunk_setup(void) {
  PyObject *__pyx_v_all = NULL;
  PyObject *__pyx_v_oldchunks = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_klass = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup", 0);

  /* "mmfparser\data\chunk.pyx":287
 * 
 * cdef inline void setup():
 *     if chunkLoaders is not None:             # <<<<<<<<<<<<<<
 *         return
 *     from mmfparser.data.chunkloaders import all
 */
  __pyx_t_1 = (__pyx_v_9mmfparser_4data_5chunk_chunkLoaders != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmfparser\data\chunk.pyx":288
 * cdef inline void setup():
 *     if chunkLoaders is not None:
 *         return             # <<<<<<<<<<<<<<
 *     from mmfparser.data.chunkloaders import all
 *     from mmfparser.data.chunkloaders.onepointfive import all as oldchunks
 */
    goto __pyx_L0;
  }

  /* "mmfparser\data\chunk.pyx":289
 *     if chunkLoaders is not None:
 *         return
 *     from mmfparser.data.chunkloaders import all             # <<<<<<<<<<<<<<
 *     from mmfparser.data.chunkloaders.onepointfive import all as oldchunks
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_all);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_all);
  __Pyx_GIVEREF(__pyx_n_s_all);
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_mmfparser_data_chunkloaders, __pyx_t_3, -1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_all = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":290
 *         return
 *     from mmfparser.data.chunkloaders import all
 *     from mmfparser.data.chunkloaders.onepointfive import all as oldchunks             # <<<<<<<<<<<<<<
 * 
 *     global chunkLoaders
 */
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_all);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_all);
  __Pyx_GIVEREF(__pyx_n_s_all);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_mmfparser_data_chunkloaders_onep, __pyx_t_4, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_all); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_oldchunks = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":293
 * 
 *     global chunkLoaders
 *     chunkLoaders = {             # <<<<<<<<<<<<<<
 *         # Vitalize chunks (0x11)
 *         4386 : all.VitalizePreview, # Preview
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "mmfparser\data\chunk.pyx":295
 *     chunkLoaders = {
 *         # Vitalize chunks (0x11)
 *         4386 : all.VitalizePreview, # Preview             # <<<<<<<<<<<<<<
 *         # Application chunks (0x22)
 *         # not-in-use 8738 : createPreservingLoader(), # AppMiniHeader
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_VitalizePreview); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_4386, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":298
 *         # Application chunks (0x22)
 *         # not-in-use 8738 : createPreservingLoader(), # AppMiniHeader
 *         8739 : all.AppHeader,             # <<<<<<<<<<<<<<
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppHeader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8739, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":299
 *         # not-in-use 8738 : createPreservingLoader(), # AppMiniHeader
 *         8739 : all.AppHeader,
 *         8740 : all.AppName,             # <<<<<<<<<<<<<<
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppName); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8740, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":300
 *         8739 : all.AppHeader,
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,             # <<<<<<<<<<<<<<
 *         8742 : all.AppMenu,
 *         8743 : all.ExtPath,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppAuthor); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8741, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":301
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,             # <<<<<<<<<<<<<<
 *         8743 : all.ExtPath,
 *         # deprecated 8744 : createPreservingLoader(), # Extensions
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppMenu); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8742, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":302
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,
 *         8743 : all.ExtPath,             # <<<<<<<<<<<<<<
 *         # deprecated 8744 : createPreservingLoader(), # Extensions
 *         8745 : all.FrameItems, # FrameItems
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtPath); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8743, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":304
 *         8743 : all.ExtPath,
 *         # deprecated 8744 : createPreservingLoader(), # Extensions
 *         8745 : all.FrameItems, # FrameItems             # <<<<<<<<<<<<<<
 *         # deprecated 8746 : createPreservingLoader(), # GlobalEvents
 *         8747 : all.FrameHandles, # FrameHandles
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameItems); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8745, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":306
 *         8745 : all.FrameItems, # FrameItems
 *         # deprecated 8746 : createPreservingLoader(), # GlobalEvents
 *         8747 : all.FrameHandles, # FrameHandles             # <<<<<<<<<<<<<<
 *         8748 : all.ExtData, # ExtData
 *         # deprecated 8749 : createPreservingLoader(), # Additional_Extension
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameHandles); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8747, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":307
 *         # deprecated 8746 : createPreservingLoader(), # GlobalEvents
 *         8747 : all.FrameHandles, # FrameHandles
 *         8748 : all.ExtData, # ExtData             # <<<<<<<<<<<<<<
 *         # deprecated 8749 : createPreservingLoader(), # Additional_Extension
 *         8750 : all.EditorFilename, # AppEditorFilename
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtData); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8748, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":309
 *         8748 : all.ExtData, # ExtData
 *         # deprecated 8749 : createPreservingLoader(), # Additional_Extension
 *         8750 : all.EditorFilename, # AppEditorFilename             # <<<<<<<<<<<<<<
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8752 : all.AppDoc, # AppDoc
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_EditorFilename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8750, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":310
 *         # deprecated 8749 : createPreservingLoader(), # Additional_Extension
 *         8750 : all.EditorFilename, # AppEditorFilename
 *         8751 : all.TargetFilename, # AppTargetFilename             # <<<<<<<<<<<<<<
 *         8752 : all.AppDoc, # AppDoc
 *         8753 : all.OtherExtensions, # OtherExts
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_TargetFilename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8751, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":311
 *         8750 : all.EditorFilename, # AppEditorFilename
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8752 : all.AppDoc, # AppDoc             # <<<<<<<<<<<<<<
 *         8753 : all.OtherExtensions, # OtherExts
 *         8754 : all.GlobalValues,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppDoc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8752, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":312
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8752 : all.AppDoc, # AppDoc
 *         8753 : all.OtherExtensions, # OtherExts             # <<<<<<<<<<<<<<
 *         8754 : all.GlobalValues,
 *         8755 : all.GlobalStrings, # GlobalStrings
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_OtherExtensions); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8753, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":313
 *         8752 : all.AppDoc, # AppDoc
 *         8753 : all.OtherExtensions, # OtherExts
 *         8754 : all.GlobalValues,             # <<<<<<<<<<<<<<
 *         8755 : all.GlobalStrings, # GlobalStrings
 *         8756 : all.ExtensionList, # Extensions2
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_GlobalValues); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8754, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":314
 *         8753 : all.OtherExtensions, # OtherExts
 *         8754 : all.GlobalValues,
 *         8755 : all.GlobalStrings, # GlobalStrings             # <<<<<<<<<<<<<<
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_GlobalStrings); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8755, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":315
 *         8754 : all.GlobalValues,
 *         8755 : all.GlobalStrings, # GlobalStrings
 *         8756 : all.ExtensionList, # Extensions2             # <<<<<<<<<<<<<<
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         8758 : createPreservingLoader(), # DemoVersion
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtensionList); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8756, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":316
 *         8755 : all.GlobalStrings, # GlobalStrings
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8             # <<<<<<<<<<<<<<
 *         8758 : createPreservingLoader(), # DemoVersion
 *         8759 : all.SecNum, # serial number
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppIcon); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8757, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":317
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         8758 : createPreservingLoader(), # DemoVersion             # <<<<<<<<<<<<<<
 *         8759 : all.SecNum, # serial number
 *         8760 : all.BinaryFiles, # BinaryFiles
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8758, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":318
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         8758 : createPreservingLoader(), # DemoVersion
 *         8759 : all.SecNum, # serial number             # <<<<<<<<<<<<<<
 *         8760 : all.BinaryFiles, # BinaryFiles
 *         8761 : createPreservingLoader(), # AppMenuImages
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_SecNum); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8759, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":319
 *         8758 : createPreservingLoader(), # DemoVersion
 *         8759 : all.SecNum, # serial number
 *         8760 : all.BinaryFiles, # BinaryFiles             # <<<<<<<<<<<<<<
 *         8761 : createPreservingLoader(), # AppMenuImages
 *         8762 : all.AboutText, # AboutText
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_BinaryFiles); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8760, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":320
 *         8759 : all.SecNum, # serial number
 *         8760 : all.BinaryFiles, # BinaryFiles
 *         8761 : createPreservingLoader(), # AppMenuImages             # <<<<<<<<<<<<<<
 *         8762 : all.AboutText, # AboutText
 *         8763 : all.Copyright, # Copyright
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8761, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":321
 *         8760 : all.BinaryFiles, # BinaryFiles
 *         8761 : createPreservingLoader(), # AppMenuImages
 *         8762 : all.AboutText, # AboutText             # <<<<<<<<<<<<<<
 *         8763 : all.Copyright, # Copyright
 *         8764 : createPreservingLoader(), # GlobalValueNames
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AboutText); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8762, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":322
 *         8761 : createPreservingLoader(), # AppMenuImages
 *         8762 : all.AboutText, # AboutText
 *         8763 : all.Copyright, # Copyright             # <<<<<<<<<<<<<<
 *         8764 : createPreservingLoader(), # GlobalValueNames
 *         8765 : createPreservingLoader(), # GlobalStringNames
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Copyright); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8763, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":323
 *         8762 : all.AboutText, # AboutText
 *         8763 : all.Copyright, # Copyright
 *         8764 : createPreservingLoader(), # GlobalValueNames             # <<<<<<<<<<<<<<
 *         8765 : createPreservingLoader(), # GlobalStringNames
 *         8766 : all.MovementExtensions, # MvtExts
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8764, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":324
 *         8763 : all.Copyright, # Copyright
 *         8764 : createPreservingLoader(), # GlobalValueNames
 *         8765 : createPreservingLoader(), # GlobalStringNames             # <<<<<<<<<<<<<<
 *         8766 : all.MovementExtensions, # MvtExts
 *         8767 : all.FrameItems, # FrameItems_2
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8765, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":325
 *         8764 : createPreservingLoader(), # GlobalValueNames
 *         8765 : createPreservingLoader(), # GlobalStringNames
 *         8766 : all.MovementExtensions, # MvtExts             # <<<<<<<<<<<<<<
 *         8767 : all.FrameItems, # FrameItems_2
 *         8768 : all.ExeOnly, # EXEOnly
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_MovementExtensions); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8766, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":326
 *         8765 : createPreservingLoader(), # GlobalStringNames
 *         8766 : all.MovementExtensions, # MvtExts
 *         8767 : all.FrameItems, # FrameItems_2             # <<<<<<<<<<<<<<
 *         8768 : all.ExeOnly, # EXEOnly
 *         8770 : all.Protection,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameItems); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8767, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":327
 *         8766 : all.MovementExtensions, # MvtExts
 *         8767 : all.FrameItems, # FrameItems_2
 *         8768 : all.ExeOnly, # EXEOnly             # <<<<<<<<<<<<<<
 *         8770 : all.Protection,
 *         8771 : all.Shaders, # Shaders
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExeOnly); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8768, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":328
 *         8767 : all.FrameItems, # FrameItems_2
 *         8768 : all.ExeOnly, # EXEOnly
 *         8770 : all.Protection,             # <<<<<<<<<<<<<<
 *         8771 : all.Shaders, # Shaders
 *         8773 : all.ExtendedHeader, # ExtendedHeader aka APPHEADER2
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Protection); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8770, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":329
 *         8768 : all.ExeOnly, # EXEOnly
 *         8770 : all.Protection,
 *         8771 : all.Shaders, # Shaders             # <<<<<<<<<<<<<<
 *         8773 : all.ExtendedHeader, # ExtendedHeader aka APPHEADER2
 *         # Frame chunks (0x33)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Shaders); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8771, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":330
 *         8770 : all.Protection,
 *         8771 : all.Shaders, # Shaders
 *         8773 : all.ExtendedHeader, # ExtendedHeader aka APPHEADER2             # <<<<<<<<<<<<<<
 *         # Frame chunks (0x33)
 *         13107 : all.Frame, # Frame
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtendedHeader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8773, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":332
 *         8773 : all.ExtendedHeader, # ExtendedHeader aka APPHEADER2
 *         # Frame chunks (0x33)
 *         13107 : all.Frame, # Frame             # <<<<<<<<<<<<<<
 *         13108 : all.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Frame); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13107, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":333
 *         # Frame chunks (0x33)
 *         13107 : all.Frame, # Frame
 *         13108 : all.FrameHeader, # FrameHeader             # <<<<<<<<<<<<<<
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameHeader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13108, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":334
 *         13107 : all.Frame, # Frame
 *         13108 : all.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName             # <<<<<<<<<<<<<<
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameName); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13109, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":335
 *         13108 : all.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword             # <<<<<<<<<<<<<<
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : all.ObjectInstances, # FrameItemInstances
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FramePassword); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13110, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":336
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette             # <<<<<<<<<<<<<<
 *         13112 : all.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FramePalette); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13111, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":337
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : all.ObjectInstances, # FrameItemInstances             # <<<<<<<<<<<<<<
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectInstances); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13112, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":338
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : all.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame             # <<<<<<<<<<<<<<
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13113, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":339
 *         13112 : all.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame             # <<<<<<<<<<<<<<
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13114, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":340
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn             # <<<<<<<<<<<<<<
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : all.Events, # FrameEvents
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FadeIn); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13115, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":341
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut             # <<<<<<<<<<<<<<
 *         13117 : all.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FadeOut); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13116, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":342
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : all.Events, # FrameEvents             # <<<<<<<<<<<<<<
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Events); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13117, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":343
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : all.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader             # <<<<<<<<<<<<<<
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13118, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":344
 *         13117 : all.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem             # <<<<<<<<<<<<<<
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 *         13121 : all.Layers, # FrameLayers
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13119, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":345
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance             # <<<<<<<<<<<<<<
 *         13121 : all.Layers, # FrameLayers
 *         13122 : all.VirtualSize, # FrameVirtualRect
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13120, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":346
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 *         13121 : all.Layers, # FrameLayers             # <<<<<<<<<<<<<<
 *         13122 : all.VirtualSize, # FrameVirtualRect
 *         13123 : all.DemoFilePath, # DemoFilePath
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Layers); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13121, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":347
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 *         13121 : all.Layers, # FrameLayers
 *         13122 : all.VirtualSize, # FrameVirtualRect             # <<<<<<<<<<<<<<
 *         13123 : all.DemoFilePath, # DemoFilePath
 *         13124 : createPreservingLoader(), # RandomSeed
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_VirtualSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13122, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":348
 *         13121 : all.Layers, # FrameLayers
 *         13122 : all.VirtualSize, # FrameVirtualRect
 *         13123 : all.DemoFilePath, # DemoFilePath             # <<<<<<<<<<<<<<
 *         13124 : createPreservingLoader(), # RandomSeed
 *         13125 : all.LayerEffects, # FrameLayerEffects
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_DemoFilePath); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13123, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":349
 *         13122 : all.VirtualSize, # FrameVirtualRect
 *         13123 : all.DemoFilePath, # DemoFilePath
 *         13124 : createPreservingLoader(), # RandomSeed             # <<<<<<<<<<<<<<
 *         13125 : all.LayerEffects, # FrameLayerEffects
 *         13126 : createPreservingLoader(), # BluRayFrameOptions
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13124, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":350
 *         13123 : all.DemoFilePath, # DemoFilePath
 *         13124 : createPreservingLoader(), # RandomSeed
 *         13125 : all.LayerEffects, # FrameLayerEffects             # <<<<<<<<<<<<<<
 *         13126 : createPreservingLoader(), # BluRayFrameOptions
 *         13127 : all.MovementTimerBase, # MvtTimerBase
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_LayerEffects); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13125, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":351
 *         13124 : createPreservingLoader(), # RandomSeed
 *         13125 : all.LayerEffects, # FrameLayerEffects
 *         13126 : createPreservingLoader(), # BluRayFrameOptions             # <<<<<<<<<<<<<<
 *         13127 : all.MovementTimerBase, # MvtTimerBase
 *         13128 : createPreservingLoader(), # MosaicImageTable
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13126, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":352
 *         13125 : all.LayerEffects, # FrameLayerEffects
 *         13126 : createPreservingLoader(), # BluRayFrameOptions
 *         13127 : all.MovementTimerBase, # MvtTimerBase             # <<<<<<<<<<<<<<
 *         13128 : createPreservingLoader(), # MosaicImageTable
 *         13129 : all.FrameEffects, # FrameEffects
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_MovementTimerBase); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13127, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":353
 *         13126 : createPreservingLoader(), # BluRayFrameOptions
 *         13127 : all.MovementTimerBase, # MvtTimerBase
 *         13128 : createPreservingLoader(), # MosaicImageTable             # <<<<<<<<<<<<<<
 *         13129 : all.FrameEffects, # FrameEffects
 *         13130 : createPreservingLoader(), # FrameIphoneOptions
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13128, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":354
 *         13127 : all.MovementTimerBase, # MvtTimerBase
 *         13128 : createPreservingLoader(), # MosaicImageTable
 *         13129 : all.FrameEffects, # FrameEffects             # <<<<<<<<<<<<<<
 *         13130 : createPreservingLoader(), # FrameIphoneOptions
 *         # Object chunks (0x44)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameEffects); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13129, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":355
 *         13128 : createPreservingLoader(), # MosaicImageTable
 *         13129 : all.FrameEffects, # FrameEffects
 *         13130 : createPreservingLoader(), # FrameIphoneOptions             # <<<<<<<<<<<<<<
 *         # Object chunks (0x44)
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13130, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":357
 *         13130 : createPreservingLoader(), # FrameIphoneOptions
 *         # Object chunks (0x44)
 *         17476 : all.ObjectHeader, # ObjInfoHeader             # <<<<<<<<<<<<<<
 *         17477 : all.ObjectName,
 *         17478 : all.ObjectProperties, # ObjectsCommon
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectHeader); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17476, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":358
 *         # Object chunks (0x44)
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 *         17477 : all.ObjectName,             # <<<<<<<<<<<<<<
 *         17478 : all.ObjectProperties, # ObjectsCommon
 *         17479 : createPreservingLoader(), # ObjectUnknown
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectName); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17477, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":359
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 *         17477 : all.ObjectName,
 *         17478 : all.ObjectProperties, # ObjectsCommon             # <<<<<<<<<<<<<<
 *         17479 : createPreservingLoader(), # ObjectUnknown
 *         17480 : all.ObjectEffects, # ObjectUnknown2
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectProperties); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17478, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":360
 *         17477 : all.ObjectName,
 *         17478 : all.ObjectProperties, # ObjectsCommon
 *         17479 : createPreservingLoader(), # ObjectUnknown             # <<<<<<<<<<<<<<
 *         17480 : all.ObjectEffects, # ObjectUnknown2
 *         # Offset chunks (0x55)
 */
  __pyx_t_4 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17479, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":361
 *         17478 : all.ObjectProperties, # ObjectsCommon
 *         17479 : createPreservingLoader(), # ObjectUnknown
 *         17480 : all.ObjectEffects, # ObjectUnknown2             # <<<<<<<<<<<<<<
 *         # Offset chunks (0x55)
 *         21845 : all.ImageOffsets, # ImagesOffsets
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectEffects); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17480, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":363
 *         17480 : all.ObjectEffects, # ObjectUnknown2
 *         # Offset chunks (0x55)
 *         21845 : all.ImageOffsets, # ImagesOffsets             # <<<<<<<<<<<<<<
 *         21846 : all.FontOffsets, # FontsOffsets
 *         21847 : all.SoundOffsets, # SoundsOffsets
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ImageOffsets); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_21845, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":364
 *         # Offset chunks (0x55)
 *         21845 : all.ImageOffsets, # ImagesOffsets
 *         21846 : all.FontOffsets, # FontsOffsets             # <<<<<<<<<<<<<<
 *         21847 : all.SoundOffsets, # SoundsOffsets
 *         21848 : all.MusicOffsets, # MusicsOffsets
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FontOffsets); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_21846, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":365
 *         21845 : all.ImageOffsets, # ImagesOffsets
 *         21846 : all.FontOffsets, # FontsOffsets
 *         21847 : all.SoundOffsets, # SoundsOffsets             # <<<<<<<<<<<<<<
 *         21848 : all.MusicOffsets, # MusicsOffsets
 *         # Bank chunks (0x66)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_SoundOffsets); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_21847, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":366
 *         21846 : all.FontOffsets, # FontsOffsets
 *         21847 : all.SoundOffsets, # SoundsOffsets
 *         21848 : all.MusicOffsets, # MusicsOffsets             # <<<<<<<<<<<<<<
 *         # Bank chunks (0x66)
 *         26214 : all.ImageBank, # Images
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_MusicOffsets); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_21848, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":368
 *         21848 : all.MusicOffsets, # MusicsOffsets
 *         # Bank chunks (0x66)
 *         26214 : all.ImageBank, # Images             # <<<<<<<<<<<<<<
 *         26215 : all.FontBank,
 *         26216 : all.SoundBank,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ImageBank); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26214, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":369
 *         # Bank chunks (0x66)
 *         26214 : all.ImageBank, # Images
 *         26215 : all.FontBank,             # <<<<<<<<<<<<<<
 *         26216 : all.SoundBank,
 *         26217 : all.MusicBank, # Musics
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FontBank); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26215, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":370
 *         26214 : all.ImageBank, # Images
 *         26215 : all.FontBank,
 *         26216 : all.SoundBank,             # <<<<<<<<<<<<<<
 *         26217 : all.MusicBank, # Musics
 *         # Last chunk (0x7f7f)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_SoundBank); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26216, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":371
 *         26215 : all.FontBank,
 *         26216 : all.SoundBank,
 *         26217 : all.MusicBank, # Musics             # <<<<<<<<<<<<<<
 *         # Last chunk (0x7f7f)
 *         32639 : all.Last, # Last
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_MusicBank); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26217, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\data\chunk.pyx":373
 *         26217 : all.MusicBank, # Musics
 *         # Last chunk (0x7f7f)
 *         32639 : all.Last, # Last             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Last); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_32639, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_XGOTREF(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders);
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders, ((PyObject*)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":377
 * 
 *     global chunkLoaderIds
 *     chunkLoaderIds = {}             # <<<<<<<<<<<<<<
 *     for id, klass in chunkLoaders.iteritems():
 *         chunkLoaderIds[klass] = id
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds);
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds, ((PyObject*)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":378
 *     global chunkLoaderIds
 *     chunkLoaderIds = {}
 *     for id, klass in chunkLoaders.iteritems():             # <<<<<<<<<<<<<<
 *         chunkLoaderIds[klass] = id
 * 
 */
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_9mmfparser_4data_5chunk_chunkLoaders, 1, __pyx_n_s_iteritems, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_4, &__pyx_t_8, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_id, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_klass, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "mmfparser\data\chunk.pyx":379
 *     chunkLoaderIds = {}
 *     for id, klass in chunkLoaders.iteritems():
 *         chunkLoaderIds[klass] = id             # <<<<<<<<<<<<<<
 * 
 *     global oldLoadersReal
 */
    if (unlikely(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(PyDict_SetItem(__pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds, __pyx_v_klass, __pyx_v_id) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":382
 * 
 *     global oldLoadersReal
 *     oldLoadersReal = {             # <<<<<<<<<<<<<<
 *         8739 : oldchunks.AppHeader,
 *         8740 : all.AppName,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "mmfparser\data\chunk.pyx":383
 *     global oldLoadersReal
 *     oldLoadersReal = {
 *         8739 : oldchunks.AppHeader,             # <<<<<<<<<<<<<<
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_AppHeader); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8739, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":384
 *     oldLoadersReal = {
 *         8739 : oldchunks.AppHeader,
 *         8740 : all.AppName,             # <<<<<<<<<<<<<<
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppName); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8740, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":385
 *         8739 : oldchunks.AppHeader,
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,             # <<<<<<<<<<<<<<
 *         8742 : all.AppMenu,
 *         8743 : all.ExtPath,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppAuthor); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8741, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":386
 *         8740 : all.AppName,
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,             # <<<<<<<<<<<<<<
 *         8743 : all.ExtPath,
 *         8745 : oldchunks.FrameItems, # FrameItems
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppMenu); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8742, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":387
 *         8741 : all.AppAuthor,
 *         8742 : all.AppMenu,
 *         8743 : all.ExtPath,             # <<<<<<<<<<<<<<
 *         8745 : oldchunks.FrameItems, # FrameItems
 *         8767 : oldchunks.FrameItems, # FrameItems_2
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtPath); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8743, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":388
 *         8742 : all.AppMenu,
 *         8743 : all.ExtPath,
 *         8745 : oldchunks.FrameItems, # FrameItems             # <<<<<<<<<<<<<<
 *         8767 : oldchunks.FrameItems, # FrameItems_2
 *         8747 : all.FrameHandles, # FrameHandles
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_FrameItems); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8745, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":389
 *         8743 : all.ExtPath,
 *         8745 : oldchunks.FrameItems, # FrameItems
 *         8767 : oldchunks.FrameItems, # FrameItems_2             # <<<<<<<<<<<<<<
 *         8747 : all.FrameHandles, # FrameHandles
 *         8748 : all.ExtData, # ExtData
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_FrameItems); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8767, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":390
 *         8745 : oldchunks.FrameItems, # FrameItems
 *         8767 : oldchunks.FrameItems, # FrameItems_2
 *         8747 : all.FrameHandles, # FrameHandles             # <<<<<<<<<<<<<<
 *         8748 : all.ExtData, # ExtData
 *         8750 : all.EditorFilename, # AppEditorFilename
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameHandles); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8747, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":391
 *         8767 : oldchunks.FrameItems, # FrameItems_2
 *         8747 : all.FrameHandles, # FrameHandles
 *         8748 : all.ExtData, # ExtData             # <<<<<<<<<<<<<<
 *         8750 : all.EditorFilename, # AppEditorFilename
 *         8751 : all.TargetFilename, # AppTargetFilename
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtData); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8748, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":392
 *         8747 : all.FrameHandles, # FrameHandles
 *         8748 : all.ExtData, # ExtData
 *         8750 : all.EditorFilename, # AppEditorFilename             # <<<<<<<<<<<<<<
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8753 : all.OtherExtensions, # OtherExts
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_EditorFilename); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8750, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":393
 *         8748 : all.ExtData, # ExtData
 *         8750 : all.EditorFilename, # AppEditorFilename
 *         8751 : all.TargetFilename, # AppTargetFilename             # <<<<<<<<<<<<<<
 *         8753 : all.OtherExtensions, # OtherExts
 *         8756 : all.ExtensionList, # Extensions2
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_TargetFilename); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8751, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":394
 *         8750 : all.EditorFilename, # AppEditorFilename
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8753 : all.OtherExtensions, # OtherExts             # <<<<<<<<<<<<<<
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_OtherExtensions); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8753, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":395
 *         8751 : all.TargetFilename, # AppTargetFilename
 *         8753 : all.OtherExtensions, # OtherExts
 *         8756 : all.ExtensionList, # Extensions2             # <<<<<<<<<<<<<<
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ExtensionList); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8756, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":396
 *         8753 : all.OtherExtensions, # OtherExts
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8             # <<<<<<<<<<<<<<
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 *         17477 : all.ObjectName,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_AppIcon); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_8757, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":397
 *         8756 : all.ExtensionList, # Extensions2
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         17476 : all.ObjectHeader, # ObjInfoHeader             # <<<<<<<<<<<<<<
 *         17477 : all.ObjectName,
 *         17478 : oldchunks.ObjectProperties,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectHeader); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17476, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":398
 *         8757 : all.AppIcon, # AppIcon_16x16x8
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 *         17477 : all.ObjectName,             # <<<<<<<<<<<<<<
 *         17478 : oldchunks.ObjectProperties,
 *         #
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ObjectName); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17477, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":399
 *         17476 : all.ObjectHeader, # ObjInfoHeader
 *         17477 : all.ObjectName,
 *         17478 : oldchunks.ObjectProperties,             # <<<<<<<<<<<<<<
 *         #
 *         13107 : oldchunks.Frame,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_ObjectProperties); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_17478, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":401
 *         17478 : oldchunks.ObjectProperties,
 *         #
 *         13107 : oldchunks.Frame,             # <<<<<<<<<<<<<<
 *         13108 : oldchunks.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_Frame); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13107, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":402
 *         #
 *         13107 : oldchunks.Frame,
 *         13108 : oldchunks.FrameHeader, # FrameHeader             # <<<<<<<<<<<<<<
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_FrameHeader); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13108, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":403
 *         13107 : oldchunks.Frame,
 *         13108 : oldchunks.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName             # <<<<<<<<<<<<<<
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FrameName); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13109, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":404
 *         13108 : oldchunks.FrameHeader, # FrameHeader
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword             # <<<<<<<<<<<<<<
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : oldchunks.ObjectInstances, # FrameItemInstances
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FramePassword); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13110, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":405
 *         13109 : all.FrameName, # FrameName
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette             # <<<<<<<<<<<<<<
 *         13112 : oldchunks.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FramePalette); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13111, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":406
 *         13110 : all.FramePassword, # FramePassword
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : oldchunks.ObjectInstances, # FrameItemInstances             # <<<<<<<<<<<<<<
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_ObjectInstances); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13112, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":407
 *         13111 : all.FramePalette, # FramePalette
 *         13112 : oldchunks.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame             # <<<<<<<<<<<<<<
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn
 */
  __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13113, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":408
 *         13112 : oldchunks.ObjectInstances, # FrameItemInstances
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame             # <<<<<<<<<<<<<<
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut
 */
  __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13114, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":409
 *         13113 : createPreservingLoader(), # FrameFadeInFrame
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn             # <<<<<<<<<<<<<<
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : oldchunks.Events, # FrameEvents
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FadeIn); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13115, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":410
 *         13114 : createPreservingLoader(), # FrameFadeOutFrame
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut             # <<<<<<<<<<<<<<
 *         13117 : oldchunks.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FadeOut); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13116, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":411
 *         13115 : all.FadeIn, # FrameFadeIn
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : oldchunks.Events, # FrameEvents             # <<<<<<<<<<<<<<
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldchunks, __pyx_n_s_Events); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13117, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":412
 *         13116 : all.FadeOut, # FrameFadeOut
 *         13117 : oldchunks.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader             # <<<<<<<<<<<<<<
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 */
  __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13118, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":413
 *         13117 : oldchunks.Events, # FrameEvents
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem             # <<<<<<<<<<<<<<
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 *         #
 */
  __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13119, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":414
 *         13118 : createPreservingLoader(), # FramePlayHeader
 *         13119 : createPreservingLoader(), # Additional_FrameItem
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance             # <<<<<<<<<<<<<<
 *         #
 *         26214 : all.ImageBank, # Images
 */
  __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_13120, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":416
 *         13120 : createPreservingLoader(), # Additional_FrameItemInstance
 *         #
 *         26214 : all.ImageBank, # Images             # <<<<<<<<<<<<<<
 *         26215 : all.FontBank,
 *         26216 : all.SoundBank,
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_ImageBank); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26214, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":417
 *         #
 *         26214 : all.ImageBank, # Images
 *         26215 : all.FontBank,             # <<<<<<<<<<<<<<
 *         26216 : all.SoundBank,
 *         # 26217 : all.MusicBank, # Musics
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_FontBank); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26215, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":418
 *         26214 : all.ImageBank, # Images
 *         26215 : all.FontBank,
 *         26216 : all.SoundBank,             # <<<<<<<<<<<<<<
 *         # 26217 : all.MusicBank, # Musics
 *         32639 : all.Last, # Last
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_SoundBank); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_26216, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\data\chunk.pyx":420
 *         26216 : all.SoundBank,
 *         # 26217 : all.MusicBank, # Musics
 *         32639 : all.Last, # Last             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_all, __pyx_n_s_Last); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_3, __pyx_int_32639, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_XGOTREF(__pyx_v_9mmfparser_4data_5chunk_oldLoadersReal);
  __Pyx_DECREF_SET(__pyx_v_9mmfparser_4data_5chunk_oldLoadersReal, ((PyObject*)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\data\chunk.pyx":286
 * cdef dict oldLoadersReal
 * 
 * cdef inline void setup():             # <<<<<<<<<<<<<<
 *     if chunkLoaders is not None:
 *         return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("mmfparser.data.chunk.setup", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_all);
  __Pyx_XDECREF(__pyx_v_oldchunks);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_klass);
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\data\chunk.pyx":424
 * 
 * class OldLoaders:
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         try:
 *             return oldLoadersReal[key]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_10OldLoaders_1__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_4data_5chunk_10OldLoaders_1__getitem__ = {"__getitem__", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_10OldLoaders_1__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_4data_5chunk_10OldLoaders_1__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.data.chunk.OldLoaders.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_4data_5chunk_10OldLoaders___getitem__(__pyx_self, __pyx_v_self, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_5chunk_10OldLoaders___getitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmfparser\data\chunk.pyx":425
 * class OldLoaders:
 *     def __getitem__(self, key):
 *         try:             # <<<<<<<<<<<<<<
 *             return oldLoadersReal[key]
 *         except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "mmfparser\data\chunk.pyx":426
 *     def __getitem__(self, key):
 *         try:
 *             return oldLoadersReal[key]             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             return createPreservingLoader()
 */
      __Pyx_XDECREF(__pyx_r);
      if (unlikely(__pyx_v_9mmfparser_4data_5chunk_oldLoadersReal == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_9mmfparser_4data_5chunk_oldLoadersReal, __pyx_v_key); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser\data\chunk.pyx":427
 *         try:
 *             return oldLoadersReal[key]
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             return createPreservingLoader()
 * 
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("mmfparser.data.chunk.OldLoaders.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "mmfparser\data\chunk.pyx":428
 *             return oldLoadersReal[key]
 *         except KeyError:
 *             return createPreservingLoader()             # <<<<<<<<<<<<<<
 * 
 * oldLoaders = OldLoaders()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __pyx_f_9mmfparser_4data_5chunk_createPreservingLoader(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "mmfparser\data\chunk.pyx":424
 * 
 * class OldLoaders:
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         try:
 *             return oldLoadersReal[key]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.data.chunk.OldLoaders.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_Chunk __pyx_vtable_9mmfparser_4data_5chunk_Chunk;

static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_Chunk(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_5chunk_Chunk;
  p->data = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->loader = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_5chunk_Chunk(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *p = (struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->data);
  Py_CLEAR(p->loader);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_5chunk_Chunk);
}

static int __pyx_tp_traverse_9mmfparser_4data_5chunk_Chunk(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *p = (struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)o;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_5chunk_Chunk)); if (e) return e;
  if (p->loader) {
    e = (*v)(((PyObject*)p->loader), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_5chunk_Chunk(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *p = (struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *)o;
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_5chunk_Chunk);
  tmp = ((PyObject*)p->loader);
  p->loader = ((struct __pyx_obj_9mmfparser_6loader_DataLoader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_5Chunk_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_4data_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_5Chunk_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_2id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_5Chunk_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_5flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_5Chunk_loader(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_loader(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_5chunk_5Chunk_6loader_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_5chunk_Chunk[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_5Chunk_1read, METH_O, 0},
  {"getName", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_5Chunk_3getName, METH_NOARGS, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_5Chunk_5write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_5chunk_Chunk[] = {
  {(char *)"data", __pyx_getprop_9mmfparser_4data_5chunk_5Chunk_data, __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_data, 0, 0},
  {(char *)"id", __pyx_getprop_9mmfparser_4data_5chunk_5Chunk_id, __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_id, 0, 0},
  {(char *)"flags", __pyx_getprop_9mmfparser_4data_5chunk_5Chunk_flags, __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_flags, 0, 0},
  {(char *)"loader", __pyx_getprop_9mmfparser_4data_5chunk_5Chunk_loader, __pyx_setprop_9mmfparser_4data_5chunk_5Chunk_loader, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_5chunk_Chunk = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunk.Chunk", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_5chunk_Chunk), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_5chunk_Chunk, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_5chunk_Chunk, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_5chunk_Chunk, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_5chunk_Chunk, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_5chunk_Chunk, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_5chunk_Chunk, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_ChunkList __pyx_vtable_9mmfparser_4data_5chunk_ChunkList;

static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_ChunkList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_5chunk_ChunkList;
  p->items = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_5chunk_ChunkList(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *p = (struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->items);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_5chunk_ChunkList);
}

static int __pyx_tp_traverse_9mmfparser_4data_5chunk_ChunkList(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *p = (struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)o;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_5chunk_ChunkList)); if (e) return e;
  if (p->items) {
    e = (*v)(p->items, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_5chunk_ChunkList(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *p = (struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *)o;
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_5chunk_ChunkList);
  tmp = ((PyObject*)p->items);
  p->items = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_9ChunkList_items(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_9ChunkList_items(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5items_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_5chunk_ChunkList[] = {
  {"initialize", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_1initialize, METH_NOARGS, 0},
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_3read, METH_O, 0},
  {"append", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_5append, METH_VARARGS|METH_KEYWORDS, 0},
  {"popChunk", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_7popChunk, METH_VARARGS|METH_KEYWORDS, 0},
  {"indexChunk", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_9indexChunk, METH_O, 0},
  {"popName", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_11popName, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_9ChunkList_13write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_5chunk_ChunkList[] = {
  {(char *)"items", __pyx_getprop_9mmfparser_4data_5chunk_9ChunkList_items, __pyx_setprop_9mmfparser_4data_5chunk_9ChunkList_items, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_5chunk_ChunkList = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunk.ChunkList", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_5chunk_ChunkList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_5chunk_ChunkList, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_5chunk_ChunkList, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_5chunk_ChunkList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_5chunk_ChunkList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_5chunk_ChunkList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_5chunk_PreservingLoader __pyx_vtable_9mmfparser_4data_5chunk_PreservingLoader;

static PyObject *__pyx_tp_new_9mmfparser_4data_5chunk_PreservingLoader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_5chunk_PreservingLoader;
  p->realData = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_5chunk_PreservingLoader(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *p = (struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->realData);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_5chunk_PreservingLoader);
}

static int __pyx_tp_traverse_9mmfparser_4data_5chunk_PreservingLoader(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_5chunk_PreservingLoader)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_5chunk_PreservingLoader(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_5chunk_PreservingLoader);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_5chunk_16PreservingLoader_realData(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_5chunk_16PreservingLoader_realData(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_8realData_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_5chunk_PreservingLoader[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_16PreservingLoader_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_5chunk_PreservingLoader[] = {
  {(char *)"realData", __pyx_getprop_9mmfparser_4data_5chunk_16PreservingLoader_realData, __pyx_setprop_9mmfparser_4data_5chunk_16PreservingLoader_realData, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_5chunk_PreservingLoader = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunk.PreservingLoader", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_5chunk_PreservingLoader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_5chunk_PreservingLoader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_5chunk_PreservingLoader, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_5chunk_PreservingLoader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_5chunk_PreservingLoader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_5chunk_PreservingLoader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_5chunk_PreservingLoader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"create_transform", (PyCFunction)__pyx_pw_9mmfparser_4data_5chunk_3create_transform, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "chunk",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {&__pyx_n_s_ABOUTTEXT, __pyx_k_ABOUTTEXT, sizeof(__pyx_k_ABOUTTEXT), 0, 0, 1, 1},
  {&__pyx_n_s_ADDITIONAL_EXTENSION, __pyx_k_ADDITIONAL_EXTENSION, sizeof(__pyx_k_ADDITIONAL_EXTENSION), 0, 0, 1, 1},
  {&__pyx_n_s_ADDITIONAL_FRAMEITEM, __pyx_k_ADDITIONAL_FRAMEITEM, sizeof(__pyx_k_ADDITIONAL_FRAMEITEM), 0, 0, 1, 1},
  {&__pyx_n_s_ADDITIONAL_FRAMEITEMINSTANCE, __pyx_k_ADDITIONAL_FRAMEITEMINSTANCE, sizeof(__pyx_k_ADDITIONAL_FRAMEITEMINSTANCE), 0, 0, 1, 1},
  {&__pyx_n_s_APPAUTHOR, __pyx_k_APPAUTHOR, sizeof(__pyx_k_APPAUTHOR), 0, 0, 1, 1},
  {&__pyx_n_s_APPDOC, __pyx_k_APPDOC, sizeof(__pyx_k_APPDOC), 0, 0, 1, 1},
  {&__pyx_n_s_APPEDITORFILENAME, __pyx_k_APPEDITORFILENAME, sizeof(__pyx_k_APPEDITORFILENAME), 0, 0, 1, 1},
  {&__pyx_n_s_APPHEADER, __pyx_k_APPHEADER, sizeof(__pyx_k_APPHEADER), 0, 0, 1, 1},
  {&__pyx_n_s_APPHEADER2, __pyx_k_APPHEADER2, sizeof(__pyx_k_APPHEADER2), 0, 0, 1, 1},
  {&__pyx_n_s_APPICON_16x16x8, __pyx_k_APPICON_16x16x8, sizeof(__pyx_k_APPICON_16x16x8), 0, 0, 1, 1},
  {&__pyx_n_s_APPMENU, __pyx_k_APPMENU, sizeof(__pyx_k_APPMENU), 0, 0, 1, 1},
  {&__pyx_n_s_APPMENUIMAGES, __pyx_k_APPMENUIMAGES, sizeof(__pyx_k_APPMENUIMAGES), 0, 0, 1, 1},
  {&__pyx_n_s_APPMINIHEADER, __pyx_k_APPMINIHEADER, sizeof(__pyx_k_APPMINIHEADER), 0, 0, 1, 1},
  {&__pyx_n_s_APPNAME, __pyx_k_APPNAME, sizeof(__pyx_k_APPNAME), 0, 0, 1, 1},
  {&__pyx_n_s_APPTARGETFILENAME, __pyx_k_APPTARGETFILENAME, sizeof(__pyx_k_APPTARGETFILENAME), 0, 0, 1, 1},
  {&__pyx_n_s_AboutText, __pyx_k_AboutText, sizeof(__pyx_k_AboutText), 0, 0, 1, 1},
  {&__pyx_n_s_AppAuthor, __pyx_k_AppAuthor, sizeof(__pyx_k_AppAuthor), 0, 0, 1, 1},
  {&__pyx_n_s_AppDoc, __pyx_k_AppDoc, sizeof(__pyx_k_AppDoc), 0, 0, 1, 1},
  {&__pyx_n_s_AppHeader, __pyx_k_AppHeader, sizeof(__pyx_k_AppHeader), 0, 0, 1, 1},
  {&__pyx_n_s_AppIcon, __pyx_k_AppIcon, sizeof(__pyx_k_AppIcon), 0, 0, 1, 1},
  {&__pyx_n_s_AppMenu, __pyx_k_AppMenu, sizeof(__pyx_k_AppMenu), 0, 0, 1, 1},
  {&__pyx_n_s_AppName, __pyx_k_AppName, sizeof(__pyx_k_AppName), 0, 0, 1, 1},
  {&__pyx_n_s_BINARYFILES, __pyx_k_BINARYFILES, sizeof(__pyx_k_BINARYFILES), 0, 0, 1, 1},
  {&__pyx_n_s_BLURAYFRAMEOPTIONS, __pyx_k_BLURAYFRAMEOPTIONS, sizeof(__pyx_k_BLURAYFRAMEOPTIONS), 0, 0, 1, 1},
  {&__pyx_n_s_BinaryFiles, __pyx_k_BinaryFiles, sizeof(__pyx_k_BinaryFiles), 0, 0, 1, 1},
  {&__pyx_n_s_COPYRIGHT, __pyx_k_COPYRIGHT, sizeof(__pyx_k_COPYRIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_Chunk, __pyx_k_Chunk, sizeof(__pyx_k_Chunk), 0, 0, 1, 1},
  {&__pyx_n_s_ChunkList, __pyx_k_ChunkList, sizeof(__pyx_k_ChunkList), 0, 0, 1, 1},
  {&__pyx_n_s_Copyright, __pyx_k_Copyright, sizeof(__pyx_k_Copyright), 0, 0, 1, 1},
  {&__pyx_n_s_DEMOFILEPATH, __pyx_k_DEMOFILEPATH, sizeof(__pyx_k_DEMOFILEPATH), 0, 0, 1, 1},
  {&__pyx_n_s_DEMOVERSION, __pyx_k_DEMOVERSION, sizeof(__pyx_k_DEMOVERSION), 0, 0, 1, 1},
  {&__pyx_n_s_DemoFilePath, __pyx_k_DemoFilePath, sizeof(__pyx_k_DemoFilePath), 0, 0, 1, 1},
  {&__pyx_n_s_EXEONLY, __pyx_k_EXEONLY, sizeof(__pyx_k_EXEONLY), 0, 0, 1, 1},
  {&__pyx_n_s_EXTDATA, __pyx_k_EXTDATA, sizeof(__pyx_k_EXTDATA), 0, 0, 1, 1},
  {&__pyx_n_s_EXTENSIONS, __pyx_k_EXTENSIONS, sizeof(__pyx_k_EXTENSIONS), 0, 0, 1, 1},
  {&__pyx_n_s_EXTENSIONS2, __pyx_k_EXTENSIONS2, sizeof(__pyx_k_EXTENSIONS2), 0, 0, 1, 1},
  {&__pyx_n_s_EXTPATH, __pyx_k_EXTPATH, sizeof(__pyx_k_EXTPATH), 0, 0, 1, 1},
  {&__pyx_kp_s_E_LAPTOP_Downloads_AnalCondom_Pl, __pyx_k_E_LAPTOP_Downloads_AnalCondom_Pl, sizeof(__pyx_k_E_LAPTOP_Downloads_AnalCondom_Pl), 0, 0, 1, 0},
  {&__pyx_n_s_EditorFilename, __pyx_k_EditorFilename, sizeof(__pyx_k_EditorFilename), 0, 0, 1, 1},
  {&__pyx_n_s_Events, __pyx_k_Events, sizeof(__pyx_k_Events), 0, 0, 1, 1},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_ExeOnly, __pyx_k_ExeOnly, sizeof(__pyx_k_ExeOnly), 0, 0, 1, 1},
  {&__pyx_n_s_ExtData, __pyx_k_ExtData, sizeof(__pyx_k_ExtData), 0, 0, 1, 1},
  {&__pyx_n_s_ExtPath, __pyx_k_ExtPath, sizeof(__pyx_k_ExtPath), 0, 0, 1, 1},
  {&__pyx_n_s_ExtendedHeader, __pyx_k_ExtendedHeader, sizeof(__pyx_k_ExtendedHeader), 0, 0, 1, 1},
  {&__pyx_n_s_ExtensionList, __pyx_k_ExtensionList, sizeof(__pyx_k_ExtensionList), 0, 0, 1, 1},
  {&__pyx_n_s_FONTS, __pyx_k_FONTS, sizeof(__pyx_k_FONTS), 0, 0, 1, 1},
  {&__pyx_n_s_FONTSOFFSETS, __pyx_k_FONTSOFFSETS, sizeof(__pyx_k_FONTSOFFSETS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAME, __pyx_k_FRAME, sizeof(__pyx_k_FRAME), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEEFFECTS, __pyx_k_FRAMEEFFECTS, sizeof(__pyx_k_FRAMEEFFECTS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEEVENTS, __pyx_k_FRAMEEVENTS, sizeof(__pyx_k_FRAMEEVENTS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEFADEIN, __pyx_k_FRAMEFADEIN, sizeof(__pyx_k_FRAMEFADEIN), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEFADEINFRAME, __pyx_k_FRAMEFADEINFRAME, sizeof(__pyx_k_FRAMEFADEINFRAME), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEFADEOUT, __pyx_k_FRAMEFADEOUT, sizeof(__pyx_k_FRAMEFADEOUT), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEFADEOUTFRAME, __pyx_k_FRAMEFADEOUTFRAME, sizeof(__pyx_k_FRAMEFADEOUTFRAME), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEHANDLES, __pyx_k_FRAMEHANDLES, sizeof(__pyx_k_FRAMEHANDLES), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEHEADER, __pyx_k_FRAMEHEADER, sizeof(__pyx_k_FRAMEHEADER), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEITEMINSTANCES, __pyx_k_FRAMEITEMINSTANCES, sizeof(__pyx_k_FRAMEITEMINSTANCES), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEITEMS, __pyx_k_FRAMEITEMS, sizeof(__pyx_k_FRAMEITEMS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEITEMS_2, __pyx_k_FRAMEITEMS_2, sizeof(__pyx_k_FRAMEITEMS_2), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMELAYEREFFECTS, __pyx_k_FRAMELAYEREFFECTS, sizeof(__pyx_k_FRAMELAYEREFFECTS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMELAYERS, __pyx_k_FRAMELAYERS, sizeof(__pyx_k_FRAMELAYERS), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMENAME, __pyx_k_FRAMENAME, sizeof(__pyx_k_FRAMENAME), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEPALETTE, __pyx_k_FRAMEPALETTE, sizeof(__pyx_k_FRAMEPALETTE), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEPASSWORD, __pyx_k_FRAMEPASSWORD, sizeof(__pyx_k_FRAMEPASSWORD), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEPLAYHEADER, __pyx_k_FRAMEPLAYHEADER, sizeof(__pyx_k_FRAMEPLAYHEADER), 0, 0, 1, 1},
  {&__pyx_n_s_FRAMEVIRTUALRECT, __pyx_k_FRAMEVIRTUALRECT, sizeof(__pyx_k_FRAMEVIRTUALRECT), 0, 0, 1, 1},
  {&__pyx_n_s_FRAME_IPHONE_OPTIONS, __pyx_k_FRAME_IPHONE_OPTIONS, sizeof(__pyx_k_FRAME_IPHONE_OPTIONS), 0, 0, 1, 1},
  {&__pyx_n_s_FadeIn, __pyx_k_FadeIn, sizeof(__pyx_k_FadeIn), 0, 0, 1, 1},
  {&__pyx_n_s_FadeOut, __pyx_k_FadeOut, sizeof(__pyx_k_FadeOut), 0, 0, 1, 1},
  {&__pyx_n_s_FontBank, __pyx_k_FontBank, sizeof(__pyx_k_FontBank), 0, 0, 1, 1},
  {&__pyx_n_s_FontOffsets, __pyx_k_FontOffsets, sizeof(__pyx_k_FontOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_Frame, __pyx_k_Frame, sizeof(__pyx_k_Frame), 0, 0, 1, 1},
  {&__pyx_n_s_FrameEffects, __pyx_k_FrameEffects, sizeof(__pyx_k_FrameEffects), 0, 0, 1, 1},
  {&__pyx_n_s_FrameHandles, __pyx_k_FrameHandles, sizeof(__pyx_k_FrameHandles), 0, 0, 1, 1},
  {&__pyx_n_s_FrameHeader, __pyx_k_FrameHeader, sizeof(__pyx_k_FrameHeader), 0, 0, 1, 1},
  {&__pyx_n_s_FrameItems, __pyx_k_FrameItems, sizeof(__pyx_k_FrameItems), 0, 0, 1, 1},
  {&__pyx_n_s_FrameName, __pyx_k_FrameName, sizeof(__pyx_k_FrameName), 0, 0, 1, 1},
  {&__pyx_n_s_FramePalette, __pyx_k_FramePalette, sizeof(__pyx_k_FramePalette), 0, 0, 1, 1},
  {&__pyx_n_s_FramePassword, __pyx_k_FramePassword, sizeof(__pyx_k_FramePassword), 0, 0, 1, 1},
  {&__pyx_n_s_GLOBALEVENTS, __pyx_k_GLOBALEVENTS, sizeof(__pyx_k_GLOBALEVENTS), 0, 0, 1, 1},
  {&__pyx_n_s_GLOBALSTRINGNAMES, __pyx_k_GLOBALSTRINGNAMES, sizeof(__pyx_k_GLOBALSTRINGNAMES), 0, 0, 1, 1},
  {&__pyx_n_s_GLOBALSTRINGS, __pyx_k_GLOBALSTRINGS, sizeof(__pyx_k_GLOBALSTRINGS), 0, 0, 1, 1},
  {&__pyx_n_s_GLOBALVALUENAMES, __pyx_k_GLOBALVALUENAMES, sizeof(__pyx_k_GLOBALVALUENAMES), 0, 0, 1, 1},
  {&__pyx_n_s_GLOBALVALUES, __pyx_k_GLOBALVALUES, sizeof(__pyx_k_GLOBALVALUES), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalStrings, __pyx_k_GlobalStrings, sizeof(__pyx_k_GlobalStrings), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalValues, __pyx_k_GlobalValues, sizeof(__pyx_k_GlobalValues), 0, 0, 1, 1},
  {&__pyx_n_s_IMAGES, __pyx_k_IMAGES, sizeof(__pyx_k_IMAGES), 0, 0, 1, 1},
  {&__pyx_n_s_IMAGESOFFSETS, __pyx_k_IMAGESOFFSETS, sizeof(__pyx_k_IMAGESOFFSETS), 0, 0, 1, 1},
  {&__pyx_n_s_ImageBank, __pyx_k_ImageBank, sizeof(__pyx_k_ImageBank), 0, 0, 1, 1},
  {&__pyx_n_s_ImageOffsets, __pyx_k_ImageOffsets, sizeof(__pyx_k_ImageOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_LAST, __pyx_k_LAST, sizeof(__pyx_k_LAST), 0, 0, 1, 1},
  {&__pyx_n_s_Last, __pyx_k_Last, sizeof(__pyx_k_Last), 0, 0, 1, 1},
  {&__pyx_kp_s_Last_chunk_not_found_in_ChunkLis, __pyx_k_Last_chunk_not_found_in_ChunkLis, sizeof(__pyx_k_Last_chunk_not_found_in_ChunkLis), 0, 0, 1, 0},
  {&__pyx_n_s_LayerEffects, __pyx_k_LayerEffects, sizeof(__pyx_k_LayerEffects), 0, 0, 1, 1},
  {&__pyx_n_s_Layers, __pyx_k_Layers, sizeof(__pyx_k_Layers), 0, 0, 1, 1},
  {&__pyx_n_s_MOSAICIMAGETABLE, __pyx_k_MOSAICIMAGETABLE, sizeof(__pyx_k_MOSAICIMAGETABLE), 0, 0, 1, 1},
  {&__pyx_n_s_MUSICS, __pyx_k_MUSICS, sizeof(__pyx_k_MUSICS), 0, 0, 1, 1},
  {&__pyx_n_s_MUSICSOFFSETS, __pyx_k_MUSICSOFFSETS, sizeof(__pyx_k_MUSICSOFFSETS), 0, 0, 1, 1},
  {&__pyx_n_s_MVTEXTS, __pyx_k_MVTEXTS, sizeof(__pyx_k_MVTEXTS), 0, 0, 1, 1},
  {&__pyx_n_s_MVTTIMERBASE, __pyx_k_MVTTIMERBASE, sizeof(__pyx_k_MVTTIMERBASE), 0, 0, 1, 1},
  {&__pyx_n_s_MovementExtensions, __pyx_k_MovementExtensions, sizeof(__pyx_k_MovementExtensions), 0, 0, 1, 1},
  {&__pyx_n_s_MovementTimerBase, __pyx_k_MovementTimerBase, sizeof(__pyx_k_MovementTimerBase), 0, 0, 1, 1},
  {&__pyx_n_s_MusicBank, __pyx_k_MusicBank, sizeof(__pyx_k_MusicBank), 0, 0, 1, 1},
  {&__pyx_n_s_MusicOffsets, __pyx_k_MusicOffsets, sizeof(__pyx_k_MusicOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_OBJECTEFFECTS, __pyx_k_OBJECTEFFECTS, sizeof(__pyx_k_OBJECTEFFECTS), 0, 0, 1, 1},
  {&__pyx_n_s_OBJECTSCOMMON, __pyx_k_OBJECTSCOMMON, sizeof(__pyx_k_OBJECTSCOMMON), 0, 0, 1, 1},
  {&__pyx_n_s_OBJECTUNKNOWN, __pyx_k_OBJECTUNKNOWN, sizeof(__pyx_k_OBJECTUNKNOWN), 0, 0, 1, 1},
  {&__pyx_n_s_OBJINFOHEADER, __pyx_k_OBJINFOHEADER, sizeof(__pyx_k_OBJINFOHEADER), 0, 0, 1, 1},
  {&__pyx_n_s_OBJINFONAME, __pyx_k_OBJINFONAME, sizeof(__pyx_k_OBJINFONAME), 0, 0, 1, 1},
  {&__pyx_n_s_OTHEREXTS, __pyx_k_OTHEREXTS, sizeof(__pyx_k_OTHEREXTS), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectEffects, __pyx_k_ObjectEffects, sizeof(__pyx_k_ObjectEffects), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectHeader, __pyx_k_ObjectHeader, sizeof(__pyx_k_ObjectHeader), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectInstances, __pyx_k_ObjectInstances, sizeof(__pyx_k_ObjectInstances), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectName, __pyx_k_ObjectName, sizeof(__pyx_k_ObjectName), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectProperties, __pyx_k_ObjectProperties, sizeof(__pyx_k_ObjectProperties), 0, 0, 1, 1},
  {&__pyx_n_s_OldLoaders, __pyx_k_OldLoaders, sizeof(__pyx_k_OldLoaders), 0, 0, 1, 1},
  {&__pyx_n_s_OldLoaders___getitem, __pyx_k_OldLoaders___getitem, sizeof(__pyx_k_OldLoaders___getitem), 0, 0, 1, 1},
  {&__pyx_n_s_OtherExtensions, __pyx_k_OtherExtensions, sizeof(__pyx_k_OtherExtensions), 0, 0, 1, 1},
  {&__pyx_n_s_PREVIEW, __pyx_k_PREVIEW, sizeof(__pyx_k_PREVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_PROTECTION, __pyx_k_PROTECTION, sizeof(__pyx_k_PROTECTION), 0, 0, 1, 1},
  {&__pyx_n_s_Protection, __pyx_k_Protection, sizeof(__pyx_k_Protection), 0, 0, 1, 1},
  {&__pyx_n_s_RANDOMSEED, __pyx_k_RANDOMSEED, sizeof(__pyx_k_RANDOMSEED), 0, 0, 1, 1},
  {&__pyx_n_s_SECNUM, __pyx_k_SECNUM, sizeof(__pyx_k_SECNUM), 0, 0, 1, 1},
  {&__pyx_n_s_SHADERS, __pyx_k_SHADERS, sizeof(__pyx_k_SHADERS), 0, 0, 1, 1},
  {&__pyx_n_s_SOUNDS, __pyx_k_SOUNDS, sizeof(__pyx_k_SOUNDS), 0, 0, 1, 1},
  {&__pyx_n_s_SOUNDSOFFSETS, __pyx_k_SOUNDSOFFSETS, sizeof(__pyx_k_SOUNDSOFFSETS), 0, 0, 1, 1},
  {&__pyx_n_s_SecNum, __pyx_k_SecNum, sizeof(__pyx_k_SecNum), 0, 0, 1, 1},
  {&__pyx_n_s_Shaders, __pyx_k_Shaders, sizeof(__pyx_k_Shaders), 0, 0, 1, 1},
  {&__pyx_n_s_SoundBank, __pyx_k_SoundBank, sizeof(__pyx_k_SoundBank), 0, 0, 1, 1},
  {&__pyx_n_s_SoundOffsets, __pyx_k_SoundOffsets, sizeof(__pyx_k_SoundOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_TargetFilename, __pyx_k_TargetFilename, sizeof(__pyx_k_TargetFilename), 0, 0, 1, 1},
  {&__pyx_n_s_VirtualSize, __pyx_k_VirtualSize, sizeof(__pyx_k_VirtualSize), 0, 0, 1, 1},
  {&__pyx_n_s_VitalizePreview, __pyx_k_VitalizePreview, sizeof(__pyx_k_VitalizePreview), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_2, __pyx_k_all_2, sizeof(__pyx_k_all_2), 0, 0, 1, 1},
  {&__pyx_n_s_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 0, 1, 1},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 0, 0, 1, 1},
  {&__pyx_n_s_chunkIds, __pyx_k_chunkIds, sizeof(__pyx_k_chunkIds), 0, 0, 1, 1},
  {&__pyx_n_s_chunkNames, __pyx_k_chunkNames, sizeof(__pyx_k_chunkNames), 0, 0, 1, 1},
  {&__pyx_n_s_chunkType, __pyx_k_chunkType, sizeof(__pyx_k_chunkType), 0, 0, 1, 1},
  {&__pyx_kp_s_chunkname_r_not_found, __pyx_k_chunkname_r_not_found, sizeof(__pyx_k_chunkname_r_not_found), 0, 0, 1, 0},
  {&__pyx_kp_s_chunktype_r_not_found, __pyx_k_chunktype_r_not_found, sizeof(__pyx_k_chunktype_r_not_found), 0, 0, 1, 0},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_compress, __pyx_k_compress, sizeof(__pyx_k_compress), 0, 0, 1, 1},
  {&__pyx_n_s_compressed, __pyx_k_compressed, sizeof(__pyx_k_compressed), 0, 0, 1, 1},
  {&__pyx_n_s_copyright, __pyx_k_copyright, sizeof(__pyx_k_copyright), 0, 0, 1, 1},
  {&__pyx_kp_s_creating_new_data_transform, __pyx_k_creating_new_data_transform, sizeof(__pyx_k_creating_new_data_transform), 0, 0, 1, 0},
  {&__pyx_n_s_decompress, __pyx_k_decompress, sizeof(__pyx_k_decompress), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_editor, __pyx_k_editor, sizeof(__pyx_k_editor), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_generate, __pyx_k_generate, sizeof(__pyx_k_generate), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getName, __pyx_k_getName, sizeof(__pyx_k_getName), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_is_ascii, __pyx_k_is_ascii, sizeof(__pyx_k_is_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_klass, __pyx_k_klass, sizeof(__pyx_k_klass), 0, 0, 1, 1},
  {&__pyx_n_s_loader, __pyx_k_loader, sizeof(__pyx_k_loader), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makeValueChunk, __pyx_k_makeValueChunk, sizeof(__pyx_k_makeValueChunk), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data, __pyx_k_mmfparser_data, sizeof(__pyx_k_mmfparser_data), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunk, __pyx_k_mmfparser_data_chunk, sizeof(__pyx_k_mmfparser_data_chunk), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders, __pyx_k_mmfparser_data_chunkloaders, sizeof(__pyx_k_mmfparser_data_chunkloaders), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders_onep, __pyx_k_mmfparser_data_chunkloaders_onep, sizeof(__pyx_k_mmfparser_data_chunkloaders_onep), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newLoader, __pyx_k_newLoader, sizeof(__pyx_k_newLoader), 0, 0, 1, 1},
  {&__pyx_n_s_old, __pyx_k_old, sizeof(__pyx_k_old), 0, 0, 1, 1},
  {&__pyx_n_s_oldLoaders, __pyx_k_oldLoaders, sizeof(__pyx_k_oldLoaders), 0, 0, 1, 1},
  {&__pyx_n_s_onepointfive, __pyx_k_onepointfive, sizeof(__pyx_k_onepointfive), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_returnNone, __pyx_k_returnNone, sizeof(__pyx_k_returnNone), 0, 0, 1, 1},
  {&__pyx_kp_s_s_has_not_been_implemented, __pyx_k_s_has_not_been_implemented, sizeof(__pyx_k_s_has_not_been_implemented), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setData, __pyx_k_setData, sizeof(__pyx_k_setData), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trans, __pyx_k_trans, sizeof(__pyx_k_trans), 0, 0, 1, 1},
  {&__pyx_n_s_unicode, __pyx_k_unicode, sizeof(__pyx_k_unicode), 0, 0, 1, 1},
  {&__pyx_kp_s_unknown_chunk_s, __pyx_k_unknown_chunk_s, sizeof(__pyx_k_unknown_chunk_s), 0, 0, 1, 0},
  {&__pyx_kp_s_unsupported_compression_flag_s, __pyx_k_unsupported_compression_flag_s, sizeof(__pyx_k_unsupported_compression_flag_s), 0, 0, 1, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeInt, __pyx_k_writeInt, sizeof(__pyx_k_writeInt), 0, 0, 1, 1},
  {&__pyx_n_s_writeReader, __pyx_k_writeReader, sizeof(__pyx_k_writeReader), 0, 0, 1, 1},
  {&__pyx_n_s_writeShort, __pyx_k_writeShort, sizeof(__pyx_k_writeShort), 0, 0, 1, 1},
  {&__pyx_n_s_writing, __pyx_k_writing, sizeof(__pyx_k_writing), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zlibdata, __pyx_k_zlibdata, sizeof(__pyx_k_zlibdata), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mmfparser\data\chunk.pyx":247
 *     def write(self, ByteReader reader):
 *         if 'LAST' not in [chunk.getName() for chunk in self.items]:
 *             raise Exception('Last chunk not found in ChunkList')             # <<<<<<<<<<<<<<
 * 
 *         checksumStart = None
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Last_chunk_not_found_in_ChunkLis); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "mmfparser\data\chunk.pyx":29
 *                             unsigned char * trans)
 * 
 * def makeValueChunk(klass, value):             # <<<<<<<<<<<<<<
 *     newLoader = klass()
 *     newLoader.value = value
 */
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_n_s_klass, __pyx_n_s_value, __pyx_n_s_newLoader); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_LAPTOP_Downloads_AnalCondom_Pl, __pyx_n_s_makeValueChunk, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\data\chunk.pyx":424
 * 
 * class OldLoaders:
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         try:
 *             return oldLoadersReal[key]
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_key); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_LAPTOP_Downloads_AnalCondom_Pl, __pyx_n_s_getitem, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_281 = PyInt_FromLong(281); if (unlikely(!__pyx_int_281)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_285 = PyInt_FromLong(285); if (unlikely(!__pyx_int_285)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4386 = PyInt_FromLong(4386); if (unlikely(!__pyx_int_4386)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8738 = PyInt_FromLong(8738); if (unlikely(!__pyx_int_8738)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8739 = PyInt_FromLong(8739); if (unlikely(!__pyx_int_8739)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8740 = PyInt_FromLong(8740); if (unlikely(!__pyx_int_8740)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8741 = PyInt_FromLong(8741); if (unlikely(!__pyx_int_8741)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8742 = PyInt_FromLong(8742); if (unlikely(!__pyx_int_8742)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8743 = PyInt_FromLong(8743); if (unlikely(!__pyx_int_8743)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8744 = PyInt_FromLong(8744); if (unlikely(!__pyx_int_8744)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8745 = PyInt_FromLong(8745); if (unlikely(!__pyx_int_8745)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8746 = PyInt_FromLong(8746); if (unlikely(!__pyx_int_8746)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8747 = PyInt_FromLong(8747); if (unlikely(!__pyx_int_8747)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8748 = PyInt_FromLong(8748); if (unlikely(!__pyx_int_8748)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8749 = PyInt_FromLong(8749); if (unlikely(!__pyx_int_8749)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8750 = PyInt_FromLong(8750); if (unlikely(!__pyx_int_8750)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8751 = PyInt_FromLong(8751); if (unlikely(!__pyx_int_8751)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8752 = PyInt_FromLong(8752); if (unlikely(!__pyx_int_8752)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8753 = PyInt_FromLong(8753); if (unlikely(!__pyx_int_8753)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8754 = PyInt_FromLong(8754); if (unlikely(!__pyx_int_8754)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8755 = PyInt_FromLong(8755); if (unlikely(!__pyx_int_8755)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8756 = PyInt_FromLong(8756); if (unlikely(!__pyx_int_8756)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8757 = PyInt_FromLong(8757); if (unlikely(!__pyx_int_8757)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8758 = PyInt_FromLong(8758); if (unlikely(!__pyx_int_8758)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8759 = PyInt_FromLong(8759); if (unlikely(!__pyx_int_8759)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8760 = PyInt_FromLong(8760); if (unlikely(!__pyx_int_8760)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8761 = PyInt_FromLong(8761); if (unlikely(!__pyx_int_8761)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8762 = PyInt_FromLong(8762); if (unlikely(!__pyx_int_8762)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8763 = PyInt_FromLong(8763); if (unlikely(!__pyx_int_8763)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8764 = PyInt_FromLong(8764); if (unlikely(!__pyx_int_8764)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8765 = PyInt_FromLong(8765); if (unlikely(!__pyx_int_8765)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8766 = PyInt_FromLong(8766); if (unlikely(!__pyx_int_8766)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8767 = PyInt_FromLong(8767); if (unlikely(!__pyx_int_8767)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8768 = PyInt_FromLong(8768); if (unlikely(!__pyx_int_8768)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8770 = PyInt_FromLong(8770); if (unlikely(!__pyx_int_8770)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8771 = PyInt_FromLong(8771); if (unlikely(!__pyx_int_8771)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8773 = PyInt_FromLong(8773); if (unlikely(!__pyx_int_8773)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13107 = PyInt_FromLong(13107L); if (unlikely(!__pyx_int_13107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13108 = PyInt_FromLong(13108L); if (unlikely(!__pyx_int_13108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13109 = PyInt_FromLong(13109L); if (unlikely(!__pyx_int_13109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13110 = PyInt_FromLong(13110L); if (unlikely(!__pyx_int_13110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13111 = PyInt_FromLong(13111L); if (unlikely(!__pyx_int_13111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13112 = PyInt_FromLong(13112L); if (unlikely(!__pyx_int_13112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13113 = PyInt_FromLong(13113L); if (unlikely(!__pyx_int_13113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13114 = PyInt_FromLong(13114L); if (unlikely(!__pyx_int_13114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13115 = PyInt_FromLong(13115L); if (unlikely(!__pyx_int_13115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13116 = PyInt_FromLong(13116L); if (unlikely(!__pyx_int_13116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13117 = PyInt_FromLong(13117L); if (unlikely(!__pyx_int_13117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13118 = PyInt_FromLong(13118L); if (unlikely(!__pyx_int_13118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13119 = PyInt_FromLong(13119L); if (unlikely(!__pyx_int_13119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13120 = PyInt_FromLong(13120L); if (unlikely(!__pyx_int_13120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13121 = PyInt_FromLong(13121L); if (unlikely(!__pyx_int_13121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13122 = PyInt_FromLong(13122L); if (unlikely(!__pyx_int_13122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13123 = PyInt_FromLong(13123L); if (unlikely(!__pyx_int_13123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13124 = PyInt_FromLong(13124L); if (unlikely(!__pyx_int_13124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13125 = PyInt_FromLong(13125L); if (unlikely(!__pyx_int_13125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13126 = PyInt_FromLong(13126L); if (unlikely(!__pyx_int_13126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13127 = PyInt_FromLong(13127L); if (unlikely(!__pyx_int_13127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13128 = PyInt_FromLong(13128L); if (unlikely(!__pyx_int_13128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13129 = PyInt_FromLong(13129L); if (unlikely(!__pyx_int_13129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13130 = PyInt_FromLong(13130L); if (unlikely(!__pyx_int_13130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17476 = PyInt_FromLong(17476L); if (unlikely(!__pyx_int_17476)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17477 = PyInt_FromLong(17477L); if (unlikely(!__pyx_int_17477)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17478 = PyInt_FromLong(17478L); if (unlikely(!__pyx_int_17478)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17479 = PyInt_FromLong(17479L); if (unlikely(!__pyx_int_17479)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_17480 = PyInt_FromLong(17480L); if (unlikely(!__pyx_int_17480)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_21845 = PyInt_FromLong(21845L); if (unlikely(!__pyx_int_21845)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_21846 = PyInt_FromLong(21846L); if (unlikely(!__pyx_int_21846)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_21847 = PyInt_FromLong(21847L); if (unlikely(!__pyx_int_21847)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_21848 = PyInt_FromLong(21848L); if (unlikely(!__pyx_int_21848)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_26214 = PyInt_FromLong(26214L); if (unlikely(!__pyx_int_26214)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_26215 = PyInt_FromLong(26215L); if (unlikely(!__pyx_int_26215)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_26216 = PyInt_FromLong(26216L); if (unlikely(!__pyx_int_26216)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_26217 = PyInt_FromLong(26217L); if (unlikely(!__pyx_int_26217)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_32639 = PyInt_FromLong(32639L); if (unlikely(!__pyx_int_32639)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initchunk(void); /*proto*/
PyMODINIT_FUNC initchunk(void)
#else
PyMODINIT_FUNC PyInit_chunk(void); /*proto*/
PyMODINIT_FUNC PyInit_chunk(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_chunk(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("chunk", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_mmfparser__data__chunk) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "mmfparser.data.chunk")) {
      if (unlikely(PyDict_SetItemString(modules, "mmfparser.data.chunk", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_9mmfparser_4data_5chunk_chunkLoaders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_9mmfparser_4data_5chunk_chunkLoaderIds = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_9mmfparser_4data_5chunk_oldLoadersReal = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_9mmfparser_6loader_DataLoader = __Pyx_ImportType("mmfparser.loader", "DataLoader", sizeof(struct __pyx_obj_9mmfparser_6loader_DataLoader), 1); if (unlikely(!__pyx_ptype_9mmfparser_6loader_DataLoader)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_6loader_DataLoader = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_6loader_DataLoader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_6loader_DataLoader)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_4data_5chunk_Chunk = &__pyx_vtable_9mmfparser_4data_5chunk_Chunk;
  __pyx_vtable_9mmfparser_4data_5chunk_Chunk.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_5chunk_Chunk.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_5chunk_5Chunk_read;
  __pyx_type_9mmfparser_4data_5chunk_Chunk.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_5chunk_Chunk) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_5chunk_Chunk.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_5chunk_Chunk.tp_dict, __pyx_vtabptr_9mmfparser_4data_5chunk_Chunk) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Chunk", (PyObject *)&__pyx_type_9mmfparser_4data_5chunk_Chunk) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_5chunk_Chunk = &__pyx_type_9mmfparser_4data_5chunk_Chunk;
  __pyx_vtabptr_9mmfparser_4data_5chunk_ChunkList = &__pyx_vtable_9mmfparser_4data_5chunk_ChunkList;
  __pyx_vtable_9mmfparser_4data_5chunk_ChunkList.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_5chunk_ChunkList.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_5chunk_9ChunkList_read;
  __pyx_vtable_9mmfparser_4data_5chunk_ChunkList.__pyx_base.initialize = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_5chunk_9ChunkList_initialize;
  __pyx_vtable_9mmfparser_4data_5chunk_ChunkList.getId = (struct __pyx_obj_9mmfparser_4data_5chunk_Chunk *(*)(struct __pyx_obj_9mmfparser_4data_5chunk_ChunkList *, unsigned int))__pyx_f_9mmfparser_4data_5chunk_9ChunkList_getId;
  __pyx_type_9mmfparser_4data_5chunk_ChunkList.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_5chunk_ChunkList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_5chunk_ChunkList.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_5chunk_ChunkList.tp_dict, __pyx_vtabptr_9mmfparser_4data_5chunk_ChunkList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ChunkList", (PyObject *)&__pyx_type_9mmfparser_4data_5chunk_ChunkList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_5chunk_ChunkList = &__pyx_type_9mmfparser_4data_5chunk_ChunkList;
  __pyx_vtabptr_9mmfparser_4data_5chunk_PreservingLoader = &__pyx_vtable_9mmfparser_4data_5chunk_PreservingLoader;
  __pyx_vtable_9mmfparser_4data_5chunk_PreservingLoader.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_5chunk_PreservingLoader.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_5chunk_16PreservingLoader_read;
  __pyx_type_9mmfparser_4data_5chunk_PreservingLoader.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_5chunk_PreservingLoader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_5chunk_PreservingLoader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_5chunk_PreservingLoader.tp_dict, __pyx_vtabptr_9mmfparser_4data_5chunk_PreservingLoader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PreservingLoader", (PyObject *)&__pyx_type_9mmfparser_4data_5chunk_PreservingLoader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_5chunk_PreservingLoader = &__pyx_type_9mmfparser_4data_5chunk_PreservingLoader;
  /*--- Type import code ---*/
  __pyx_ptype_9mmfparser_10bytereader_ByteReader = __Pyx_ImportType("mmfparser.bytereader", "ByteReader", sizeof(struct __pyx_obj_9mmfparser_10bytereader_ByteReader), 1); if (unlikely(!__pyx_ptype_9mmfparser_10bytereader_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_10bytereader_ByteReader = (struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_10bytereader_ByteReader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_10bytereader_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "mmfparser\data\chunk.pyx":19
 * 
 * from mmfparser.bytereader cimport ByteReader
 * from mmfparser.data import zlibdata             # <<<<<<<<<<<<<<
 * from mmfparser.data import onepointfive
 * from mmfparser.loader cimport DataLoader
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_zlibdata);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_zlibdata);
  __Pyx_GIVEREF(__pyx_n_s_zlibdata);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_data, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_zlibdata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zlibdata, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":20
 * from mmfparser.bytereader cimport ByteReader
 * from mmfparser.data import zlibdata
 * from mmfparser.data import onepointfive             # <<<<<<<<<<<<<<
 * from mmfparser.loader cimport DataLoader
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_onepointfive);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_onepointfive);
  __Pyx_GIVEREF(__pyx_n_s_onepointfive);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_mmfparser_data, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_onepointfive); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_onepointfive, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":29
 *                             unsigned char * trans)
 * 
 * def makeValueChunk(klass, value):             # <<<<<<<<<<<<<<
 *     newLoader = klass()
 *     newLoader.value = value
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_4data_5chunk_1makeValueChunk, NULL, __pyx_n_s_mmfparser_data_chunk); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makeValueChunk, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":280
 *     return PreservingLoader
 * 
 * cdef bint initialized = False             # <<<<<<<<<<<<<<
 * 
 * cdef dict chunkLoaders
 */
  __pyx_v_9mmfparser_4data_5chunk_initialized = 0;

  /* "mmfparser\data\chunk.pyx":423
 *     }
 * 
 * class OldLoaders:             # <<<<<<<<<<<<<<
 *     def __getitem__(self, key):
 *         try:
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_OldLoaders, __pyx_n_s_OldLoaders, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunk, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "mmfparser\data\chunk.pyx":424
 * 
 * class OldLoaders:
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         try:
 *             return oldLoadersReal[key]
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_9mmfparser_4data_5chunk_10OldLoaders_1__getitem__, 0, __pyx_n_s_OldLoaders___getitem, NULL, __pyx_n_s_mmfparser_data_chunk, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_getitem, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":423
 *     }
 * 
 * class OldLoaders:             # <<<<<<<<<<<<<<
 *     def __getitem__(self, key):
 *         try:
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_OldLoaders, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OldLoaders, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":430
 *             return createPreservingLoader()
 * 
 * oldLoaders = OldLoaders()             # <<<<<<<<<<<<<<
 * 
 * chunkNames = {
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_OldLoaders); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oldLoaders, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":432
 * oldLoaders = OldLoaders()
 * 
 * chunkNames = {             # <<<<<<<<<<<<<<
 *     4386 : 'PREVIEW',
 *     8738 : 'APPMINIHEADER',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_4386, __pyx_n_s_PREVIEW) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8738, __pyx_n_s_APPMINIHEADER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8739, __pyx_n_s_APPHEADER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8740, __pyx_n_s_APPNAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8741, __pyx_n_s_APPAUTHOR) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8742, __pyx_n_s_APPMENU) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8743, __pyx_n_s_EXTPATH) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8744, __pyx_n_s_EXTENSIONS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8745, __pyx_n_s_FRAMEITEMS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8746, __pyx_n_s_GLOBALEVENTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8747, __pyx_n_s_FRAMEHANDLES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8748, __pyx_n_s_EXTDATA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8749, __pyx_n_s_ADDITIONAL_EXTENSION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8750, __pyx_n_s_APPEDITORFILENAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8751, __pyx_n_s_APPTARGETFILENAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8752, __pyx_n_s_APPDOC) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8753, __pyx_n_s_OTHEREXTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8754, __pyx_n_s_GLOBALVALUES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8755, __pyx_n_s_GLOBALSTRINGS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8756, __pyx_n_s_EXTENSIONS2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8757, __pyx_n_s_APPICON_16x16x8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8758, __pyx_n_s_DEMOVERSION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8759, __pyx_n_s_SECNUM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8760, __pyx_n_s_BINARYFILES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8761, __pyx_n_s_APPMENUIMAGES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8762, __pyx_n_s_ABOUTTEXT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8763, __pyx_n_s_COPYRIGHT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8764, __pyx_n_s_GLOBALVALUENAMES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8765, __pyx_n_s_GLOBALSTRINGNAMES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8766, __pyx_n_s_MVTEXTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8767, __pyx_n_s_FRAMEITEMS_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8768, __pyx_n_s_EXEONLY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8770, __pyx_n_s_PROTECTION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8771, __pyx_n_s_SHADERS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8773, __pyx_n_s_APPHEADER2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13107, __pyx_n_s_FRAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13108, __pyx_n_s_FRAMEHEADER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13109, __pyx_n_s_FRAMENAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13110, __pyx_n_s_FRAMEPASSWORD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13111, __pyx_n_s_FRAMEPALETTE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13112, __pyx_n_s_FRAMEITEMINSTANCES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13113, __pyx_n_s_FRAMEFADEINFRAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13114, __pyx_n_s_FRAMEFADEOUTFRAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13115, __pyx_n_s_FRAMEFADEIN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13116, __pyx_n_s_FRAMEFADEOUT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13117, __pyx_n_s_FRAMEEVENTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13118, __pyx_n_s_FRAMEPLAYHEADER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13119, __pyx_n_s_ADDITIONAL_FRAMEITEM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13120, __pyx_n_s_ADDITIONAL_FRAMEITEMINSTANCE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13121, __pyx_n_s_FRAMELAYERS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13122, __pyx_n_s_FRAMEVIRTUALRECT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13123, __pyx_n_s_DEMOFILEPATH) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13124, __pyx_n_s_RANDOMSEED) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13125, __pyx_n_s_FRAMELAYEREFFECTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13126, __pyx_n_s_BLURAYFRAMEOPTIONS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13127, __pyx_n_s_MVTTIMERBASE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13128, __pyx_n_s_MOSAICIMAGETABLE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13129, __pyx_n_s_FRAMEEFFECTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13130, __pyx_n_s_FRAME_IPHONE_OPTIONS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_17476, __pyx_n_s_OBJINFOHEADER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_17477, __pyx_n_s_OBJINFONAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_17478, __pyx_n_s_OBJECTSCOMMON) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_17479, __pyx_n_s_OBJECTUNKNOWN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_17480, __pyx_n_s_OBJECTEFFECTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_21845, __pyx_n_s_IMAGESOFFSETS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_21846, __pyx_n_s_FONTSOFFSETS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_21847, __pyx_n_s_SOUNDSOFFSETS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_21848, __pyx_n_s_MUSICSOFFSETS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_26214, __pyx_n_s_IMAGES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_26215, __pyx_n_s_FONTS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_26216, __pyx_n_s_SOUNDS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_26217, __pyx_n_s_MUSICS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32639, __pyx_n_s_LAST) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chunkNames, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":508
 * }
 * 
 * chunkIds = {}             # <<<<<<<<<<<<<<
 * for id, name in chunkNames.iteritems():
 *     chunkIds[name] = id
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chunkIds, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":509
 * 
 * chunkIds = {}
 * for id, name in chunkNames.iteritems():             # <<<<<<<<<<<<<<
 *     chunkIds[name] = id
 * 
 */
  __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkNames); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_dict_iterator(__pyx_t_2, 0, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_3, &__pyx_t_2, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_id, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_name, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser\data\chunk.pyx":510
 * chunkIds = {}
 * for id, name in chunkNames.iteritems():
 *     chunkIds[name] = id             # <<<<<<<<<<<<<<
 * 
 * cdef int LAST = chunkIds['LAST']
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_t_8, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunk.pyx":512
 *     chunkIds[name] = id
 * 
 * cdef int LAST = chunkIds['LAST']             # <<<<<<<<<<<<<<
 * cdef int APPTARGETFILENAME = chunkIds['APPTARGETFILENAME']
 * cdef int PROTECTION = chunkIds['PROTECTION']
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_LAST); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_9mmfparser_4data_5chunk_LAST = __pyx_t_6;

  /* "mmfparser\data\chunk.pyx":513
 * 
 * cdef int LAST = chunkIds['LAST']
 * cdef int APPTARGETFILENAME = chunkIds['APPTARGETFILENAME']             # <<<<<<<<<<<<<<
 * cdef int PROTECTION = chunkIds['PROTECTION']
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_APPTARGETFILENAME); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_9mmfparser_4data_5chunk_APPTARGETFILENAME = __pyx_t_6;

  /* "mmfparser\data\chunk.pyx":514
 * cdef int LAST = chunkIds['LAST']
 * cdef int APPTARGETFILENAME = chunkIds['APPTARGETFILENAME']
 * cdef int PROTECTION = chunkIds['PROTECTION']             # <<<<<<<<<<<<<<
 * 
 * __all__ = ['Chunk', 'ChunkList', 'makeValueChunk']
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_chunkIds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_PROTECTION); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_9mmfparser_4data_5chunk_PROTECTION = __pyx_t_6;

  /* "mmfparser\data\chunk.pyx":516
 * cdef int PROTECTION = chunkIds['PROTECTION']
 * 
 * __all__ = ['Chunk', 'ChunkList', 'makeValueChunk']             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Chunk);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Chunk);
  __Pyx_GIVEREF(__pyx_n_s_Chunk);
  __Pyx_INCREF(__pyx_n_s_ChunkList);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_ChunkList);
  __Pyx_GIVEREF(__pyx_n_s_ChunkList);
  __Pyx_INCREF(__pyx_n_s_makeValueChunk);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_makeValueChunk);
  __Pyx_GIVEREF(__pyx_n_s_makeValueChunk);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all_2, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunk.pyx":1
 * # Copyright (c) Mathias Kaerlev 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of Anaconda.
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmfparser.data.chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmfparser.data.chunk");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(short) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(short, long, PyLong_AsLong(x))
            } else if (sizeof(short) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(short, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
    const unsigned short neg_one = (unsigned short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
