/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__mmfparser__data__chunkloaders__expressions__loaders
#define __PYX_HAVE_API__mmfparser__data__chunkloaders__expressions__loaders
#include "string.h"
#include "stdio.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmfparser\\data\\chunkloaders\\expressions\\loaders.pyx",
  "mmfparser\\bytereader.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9mmfparser_10bytereader_ByteReader;
struct __pyx_obj_9mmfparser_6loader_DataLoader;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString;

/* "mmfparser\bytereader.pxd":33
 *     cpdef int tell(self)
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)             # <<<<<<<<<<<<<<
 *     cpdef read(self, int size = ?)
 *     cpdef adjust(self, int to)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek {
  int __pyx_n;
  int mode;
};

/* "mmfparser\bytereader.pxd":34
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)
 *     cpdef read(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read {
  int __pyx_n;
  int size;
};

/* "mmfparser\bytereader.pxd":37
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10
 *     cpdef float readFloat(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":38
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":41
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":42
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef unicode readUnicodeString(self, size=?)
 *     cpdef tuple readColor(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":43
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef tuple readColor(self)
 *     cpdef ByteReader readReader(self, size_t size)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString;

/* "mmfparser\loader.pxd":31
 *     cdef bint init(self, ByteReader reader, DataLoader parent,
 *                    dict settings) except False
 *     cpdef readString(self, ByteReader reader, size=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */
struct __pyx_obj_9mmfparser_10bytereader_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtab;
  unsigned char *buffer;
  unsigned int start;
  unsigned int pos;
  unsigned int data_size;
  unsigned int lastPosition;
  PyObject *original;
  int shared;
  PyObject *python_fp;
};

struct __pyx_obj_9mmfparser_6loader_DataLoader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtab;
  PyObject *settings;
  struct __pyx_obj_9mmfparser_6loader_DataLoader *parent;
};


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":25
 *     pass
 * 
 * cdef class String(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         bytes value
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  PyObject *value;
};


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":35
 *         reader.writeString(self.value)
 * 
 * cdef class Long(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int value
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  int value;
};


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":45
 *         reader.writeInt(self.value)
 * 
 * cdef class Double(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         double value
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  double value;
  float floatValue;
};


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":58
 *         reader.writeFloat(self.floatValue)
 * 
 * cdef class GlobalCommon(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         short value
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  short value;
};


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":78
 *     pass
 * 
 * cdef class ExtensionCommon(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         short value
 */
struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon {
  struct __pyx_obj_9mmfparser_6loader_DataLoader __pyx_base;
  short value;
};



/* "mmfparser\bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */

struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader {
  int (*tell)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*data)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  int (*seek)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args);
  PyObject *(*read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args);
  PyObject *(*adjust)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch);
  size_t (*size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  short (*readByte)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  double (*readDouble)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*readInt)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args);
  PyObject *(*readUnicodeString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args);
  PyObject *(*readColor)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *(*readReader)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*write)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch);
  int (*write_size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch);
  int (*skipBytes)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*rewind)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*_read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int);
};
static struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtabptr_9mmfparser_10bytereader_ByteReader;


struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader {
  PyObject *(*read)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*initialize)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, int __pyx_skip_dispatch);
  int (*init)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, struct __pyx_obj_9mmfparser_6loader_DataLoader *, PyObject *);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_6loader_10DataLoader_readString *__pyx_optional_args);
};
static struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader *__pyx_vtabptr_9mmfparser_6loader_DataLoader;


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":25
 *     pass
 * 
 * cdef class String(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         bytes value
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":35
 *         reader.writeString(self.value)
 * 
 * cdef class Long(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         int value
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":45
 *         reader.writeInt(self.value)
 * 
 * cdef class Double(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         double value
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":58
 *         reader.writeFloat(self.floatValue)
 * 
 * cdef class GlobalCommon(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         short value
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;


/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":78
 *     pass
 * 
 * cdef class ExtensionCommon(DataLoader):             # <<<<<<<<<<<<<<
 *     cdef public:
 *         short value
 */

struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon {
  struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader __pyx_base;
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'mmfparser.bytereader' */
static PyTypeObject *__pyx_ptype_9mmfparser_10bytereader_ByteReader = 0;

/* Module declarations from 'mmfparser.loader' */
static PyTypeObject *__pyx_ptype_9mmfparser_6loader_DataLoader = 0;

/* Module declarations from 'mmfparser.data.chunkloaders.expressions.loaders' */
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon = 0;
static PyTypeObject *__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon = 0;
#define __Pyx_MODULE_NAME "mmfparser.data.chunkloaders.expressions.loaders"
int __pyx_module_is_main_mmfparser__data__chunkloaders__expressions__loaders = 0;

/* Implementation of 'mmfparser.data.chunkloaders.expressions.loaders' */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self); /* proto */
static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "\000";
static char __pyx_k_End[] = "End";
static char __pyx_k_all[] = "__all__";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_Long[] = "Long";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_read[] = "read";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Empty[] = "Empty";
static char __pyx_k_write[] = "write";
static char __pyx_k_Double[] = "Double";
static char __pyx_k_String[] = "String";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_writeInt[] = "writeInt";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_writeFloat[] = "writeFloat";
static char __pyx_k_writeShort[] = "writeShort";
static char __pyx_k_GlobalValue[] = "GlobalValue";
static char __pyx_k_writeDouble[] = "writeDouble";
static char __pyx_k_writeString[] = "writeString";
static char __pyx_k_GlobalString[] = "GlobalString";
static char __pyx_k_ExtensionValue[] = "ExtensionValue";
static char __pyx_k_ExtensionString[] = "ExtensionString";
static char __pyx_k_mmfparser_data_chunkloaders_comm[] = "mmfparser.data.chunkloaders.common";
static char __pyx_k_mmfparser_data_chunkloaders_expr[] = "mmfparser.data.chunkloaders.expressions.loaders";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_Double;
static PyObject *__pyx_n_s_Empty;
static PyObject *__pyx_n_s_End;
static PyObject *__pyx_n_s_ExtensionString;
static PyObject *__pyx_n_s_ExtensionValue;
static PyObject *__pyx_n_s_GlobalString;
static PyObject *__pyx_n_s_GlobalValue;
static PyObject *__pyx_n_s_Long;
static PyObject *__pyx_n_s_String;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders_comm;
static PyObject *__pyx_n_s_mmfparser_data_chunkloaders_expr;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeDouble;
static PyObject *__pyx_n_s_writeFloat;
static PyObject *__pyx_n_s_writeInt;
static PyObject *__pyx_n_s_writeShort;
static PyObject *__pyx_n_s_writeString;
static PyObject *__pyx_int_4;

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":29
 *         bytes value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = self.readString(reader)
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":30
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.value = self.readString(reader)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.readString(((struct __pyx_obj_9mmfparser_6loader_DataLoader *)__pyx_v_self), __pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":29
 *         bytes value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = self.readString(reader)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.String.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.String.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":32
 *         self.value = self.readString(reader)
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeString(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":33
 * 
 *     def write(self, reader):
 *         reader.writeString(self.value)             # <<<<<<<<<<<<<<
 * 
 * cdef class Long(DataLoader):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeString); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_self->value);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_self->value);
    __Pyx_GIVEREF(__pyx_v_self->value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":32
 *         self.value = self.readString(reader)
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeString(self.value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.String.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":27
 * cdef class String(DataLoader):
 *     cdef public:
 *         bytes value             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.String.value.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_4__del__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_4__del__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":39
 *         int value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readInt()
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":40
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.value = reader.readInt()             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readInt(__pyx_v_reader, 0, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->value = __pyx_t_6;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":39
 *         int value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readInt()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Long.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Long.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":42
 *         self.value = reader.readInt()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeInt(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":43
 * 
 *     def write(self, reader):
 *         reader.writeInt(self.value)             # <<<<<<<<<<<<<<
 * 
 * cdef class Double(DataLoader):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeInt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":42
 *         self.value = reader.readInt()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeInt(self.value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Long.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":37
 * cdef class Long(DataLoader):
 *     cdef public:
 *         int value             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Long.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Long.value.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":50
 *         float floatValue
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readDouble()
 *         self.floatValue = reader.readFloat()
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  float __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":51
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.value = reader.readDouble()             # <<<<<<<<<<<<<<
 *         self.floatValue = reader.readFloat()
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readDouble(__pyx_v_reader, 0); if (unlikely(__pyx_t_6 == -10.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_6;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":52
 *     cpdef read(self, ByteReader reader):
 *         self.value = reader.readDouble()
 *         self.floatValue = reader.readFloat()             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readFloat(__pyx_v_reader, 0); if (unlikely(__pyx_t_7 == -10.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->floatValue = __pyx_t_7;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":50
 *         float floatValue
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readDouble()
 *         self.floatValue = reader.readFloat()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":54
 *         self.floatValue = reader.readFloat()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeDouble(self.value)
 *         reader.writeFloat(self.floatValue)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":55
 * 
 *     def write(self, reader):
 *         reader.writeDouble(self.value)             # <<<<<<<<<<<<<<
 *         reader.writeFloat(self.floatValue)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeDouble); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":56
 *     def write(self, reader):
 *         reader.writeDouble(self.value)
 *         reader.writeFloat(self.floatValue)             # <<<<<<<<<<<<<<
 * 
 * cdef class GlobalCommon(DataLoader):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeFloat); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->floatValue); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":54
 *         self.floatValue = reader.readFloat()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeDouble(self.value)
 *         reader.writeFloat(self.floatValue)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":47
 * cdef class Double(DataLoader):
 *     cdef public:
 *         double value             # <<<<<<<<<<<<<<
 *         float floatValue
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.value.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":48
 *     cdef public:
 *         double value
 *         float floatValue             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->floatValue); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.floatValue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->floatValue = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.Double.floatValue.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":62
 *         short value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         # Oi et OIlist qui servent a rien
 *         # I does not translate. Sorry. Failure. :(
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":65
 *         # Oi et OIlist qui servent a rien
 *         # I does not translate. Sorry. Failure. :(
 *         reader.skipBytes(4)             # <<<<<<<<<<<<<<
 *         self.value = reader.readShort()
 * 
 */
  ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->skipBytes(__pyx_v_reader, 4, 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":66
 *         # I does not translate. Sorry. Failure. :(
 *         reader.skipBytes(4)
 *         self.value = reader.readShort()             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_6 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_6;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":62
 *         short value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         # Oi et OIlist qui servent a rien
 *         # I does not translate. Sorry. Failure. :(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":68
 *         self.value = reader.readShort()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.write('\x00' * 4)
 *         reader.writeShort(self.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":69
 * 
 *     def write(self, reader):
 *         reader.write('\x00' * 4)             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_kp_s_, __pyx_int_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":70
 *     def write(self, reader):
 *         reader.write('\x00' * 4)
 *         reader.writeShort(self.value)             # <<<<<<<<<<<<<<
 * 
 * class GlobalString(GlobalCommon):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_self->value); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":68
 *         self.value = reader.readShort()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.write('\x00' * 4)
 *         reader.writeShort(self.value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":60
 * cdef class GlobalCommon(DataLoader):
 *     cdef public:
 *         short value             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon.value.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":82
 *         short value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readShort()
 * 
 */

static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_reader));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_reader));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":83
 * 
 *     cpdef read(self, ByteReader reader):
 *         self.value = reader.readShort()             # <<<<<<<<<<<<<<
 * 
 *     def write(self, reader):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader->__pyx_vtab)->readShort(__pyx_v_reader, 0, NULL); if (unlikely(__pyx_t_6 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_6;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":82
 *         short value
 * 
 *     cpdef read(self, ByteReader reader):             # <<<<<<<<<<<<<<
 *         self.value = reader.readShort()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_1read(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *)__pyx_v_self), ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_reader));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read(__pyx_v_self, __pyx_v_reader, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":85
 *         self.value = reader.readShort()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_3write(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_2write(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_2write(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":86
 * 
 *     def write(self, reader):
 *         reader.writeShort(self.value)             # <<<<<<<<<<<<<<
 * 
 * class ExtensionString(ExtensionCommon):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_writeShort); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_self->value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":85
 *         self.value = reader.readShort()
 * 
 *     def write(self, reader):             # <<<<<<<<<<<<<<
 *         reader.writeShort(self.value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\data\chunkloaders\expressions\loaders.pyx":80
 * cdef class ExtensionCommon(DataLoader):
 *     cdef public:
 *         short value             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, ByteReader reader):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value___get__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value___get__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_2__set__(((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_2__set__(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->value = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon.value.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;
  p->value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String(PyObject *o) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *p = (struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->value);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_3__set__(o, v);
  }
  else {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_5value_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String[] = {
  {(char *)"value", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_value, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_value, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.expressions.loaders.String", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_5value_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long[] = {
  {(char *)"value", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_value, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_value, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.expressions.loaders.Long", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_5value_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_floatValue(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_floatValue(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_10floatValue_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double[] = {
  {(char *)"value", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_value, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_value, 0, 0},
  {(char *)"floatValue", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_floatValue, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_floatValue, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.expressions.loaders.Double", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_5value_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon[] = {
  {(char *)"value", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_value, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_value, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.expressions.loaders.GlobalCommon", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;

static PyObject *__pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *p;
  PyObject *o = __pyx_ptype_9mmfparser_6loader_DataLoader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon);
}

static int __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) ? ((__pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse) ? __pyx_ptype_9mmfparser_6loader_DataLoader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon(PyObject *o) {
  if (likely(__pyx_ptype_9mmfparser_6loader_DataLoader)) { if (__pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear) __pyx_ptype_9mmfparser_6loader_DataLoader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon);
  return 0;
}

static PyObject *__pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_1__get__(o);
}

static int __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_5value_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon[] = {
  {"read", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_1read, METH_O, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_3write, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon[] = {
  {(char *)"value", __pyx_getprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_value, __pyx_setprop_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_value, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.data.chunkloaders.expressions.loaders.ExtensionCommon", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "loaders",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_Double, __pyx_k_Double, sizeof(__pyx_k_Double), 0, 0, 1, 1},
  {&__pyx_n_s_Empty, __pyx_k_Empty, sizeof(__pyx_k_Empty), 0, 0, 1, 1},
  {&__pyx_n_s_End, __pyx_k_End, sizeof(__pyx_k_End), 0, 0, 1, 1},
  {&__pyx_n_s_ExtensionString, __pyx_k_ExtensionString, sizeof(__pyx_k_ExtensionString), 0, 0, 1, 1},
  {&__pyx_n_s_ExtensionValue, __pyx_k_ExtensionValue, sizeof(__pyx_k_ExtensionValue), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalString, __pyx_k_GlobalString, sizeof(__pyx_k_GlobalString), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalValue, __pyx_k_GlobalValue, sizeof(__pyx_k_GlobalValue), 0, 0, 1, 1},
  {&__pyx_n_s_Long, __pyx_k_Long, sizeof(__pyx_k_Long), 0, 0, 1, 1},
  {&__pyx_n_s_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders_comm, __pyx_k_mmfparser_data_chunkloaders_comm, sizeof(__pyx_k_mmfparser_data_chunkloaders_comm), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_data_chunkloaders_expr, __pyx_k_mmfparser_data_chunkloaders_expr, sizeof(__pyx_k_mmfparser_data_chunkloaders_expr), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeDouble, __pyx_k_writeDouble, sizeof(__pyx_k_writeDouble), 0, 0, 1, 1},
  {&__pyx_n_s_writeFloat, __pyx_k_writeFloat, sizeof(__pyx_k_writeFloat), 0, 0, 1, 1},
  {&__pyx_n_s_writeInt, __pyx_k_writeInt, sizeof(__pyx_k_writeInt), 0, 0, 1, 1},
  {&__pyx_n_s_writeShort, __pyx_k_writeShort, sizeof(__pyx_k_writeShort), 0, 0, 1, 1},
  {&__pyx_n_s_writeString, __pyx_k_writeString, sizeof(__pyx_k_writeString), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initloaders(void); /*proto*/
PyMODINIT_FUNC initloaders(void)
#else
PyMODINIT_FUNC PyInit_loaders(void); /*proto*/
PyMODINIT_FUNC PyInit_loaders(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_loaders(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("loaders", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_mmfparser__data__chunkloaders__expressions__loaders) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "mmfparser.data.chunkloaders.expressions.loaders")) {
      if (unlikely(PyDict_SetItemString(modules, "mmfparser.data.chunkloaders.expressions.loaders", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_9mmfparser_6loader_DataLoader = __Pyx_ImportType("mmfparser.loader", "DataLoader", sizeof(struct __pyx_obj_9mmfparser_6loader_DataLoader), 1); if (unlikely(!__pyx_ptype_9mmfparser_6loader_DataLoader)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_6loader_DataLoader = (struct __pyx_vtabstruct_9mmfparser_6loader_DataLoader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_6loader_DataLoader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_6loader_DataLoader)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String = &__pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6String_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "String", (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String = &__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_String;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long = &__pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_4Long_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Long", (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long = &__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Long;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double = &__pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_6Double_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Double", (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double = &__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_Double;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon = &__pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_12GlobalCommon_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "GlobalCommon", (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon = &__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon;
  __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon = &__pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon.__pyx_base = *__pyx_vtabptr_9mmfparser_6loader_DataLoader;
  __pyx_vtable_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon.__pyx_base.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_6loader_DataLoader *, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_4data_12chunkloaders_11expressions_7loaders_15ExtensionCommon_read;
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon.tp_base = __pyx_ptype_9mmfparser_6loader_DataLoader;
  if (PyType_Ready(&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon.tp_dict, __pyx_vtabptr_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ExtensionCommon", (PyObject *)&__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon = &__pyx_type_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon;
  /*--- Type import code ---*/
  __pyx_ptype_9mmfparser_10bytereader_ByteReader = __Pyx_ImportType("mmfparser.bytereader", "ByteReader", sizeof(struct __pyx_obj_9mmfparser_10bytereader_ByteReader), 1); if (unlikely(!__pyx_ptype_9mmfparser_10bytereader_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9mmfparser_10bytereader_ByteReader = (struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader*)__Pyx_GetVtable(__pyx_ptype_9mmfparser_10bytereader_ByteReader->tp_dict); if (unlikely(!__pyx_vtabptr_9mmfparser_10bytereader_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":18
 * # along with Anaconda.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * from mmfparser.data.chunkloaders.common import Empty             # <<<<<<<<<<<<<<
 * from mmfparser.loader cimport DataLoader
 * from mmfparser.bytereader cimport ByteReader
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Empty);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Empty);
  __Pyx_GIVEREF(__pyx_n_s_Empty);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mmfparser_data_chunkloaders_comm, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Empty, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":22
 * from mmfparser.bytereader cimport ByteReader
 * 
 * class End(Empty):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_End, __pyx_n_s_End, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunkloaders_expr, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_End, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_End, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":72
 *         reader.writeShort(self.value)
 * 
 * class GlobalString(GlobalCommon):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_GlobalString, __pyx_n_s_GlobalString, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunkloaders_expr, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_GlobalString, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GlobalString, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":75
 *     pass
 * 
 * class GlobalValue(GlobalCommon):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_GlobalCommon)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_GlobalValue, __pyx_n_s_GlobalValue, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunkloaders_expr, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_GlobalValue, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GlobalValue, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":88
 *         reader.writeShort(self.value)
 * 
 * class ExtensionString(ExtensionCommon):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ExtensionString, __pyx_n_s_ExtensionString, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunkloaders_expr, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ExtensionString, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ExtensionString, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":91
 *     pass
 * 
 * class ExtensionValue(ExtensionCommon):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_4data_12chunkloaders_11expressions_7loaders_ExtensionCommon)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ExtensionValue, __pyx_n_s_ExtensionValue, (PyObject *) NULL, __pyx_n_s_mmfparser_data_chunkloaders_expr, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ExtensionValue, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ExtensionValue, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":94
 *     pass
 * 
 * __all__ = ['String', 'Long', 'Double', 'GlobalValue', 'GlobalString',             # <<<<<<<<<<<<<<
 *     'ExtensionString', 'ExtensionValue', 'End']
 */
  __pyx_t_1 = PyList_New(8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_String);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_String);
  __Pyx_GIVEREF(__pyx_n_s_String);
  __Pyx_INCREF(__pyx_n_s_Long);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Long);
  __Pyx_GIVEREF(__pyx_n_s_Long);
  __Pyx_INCREF(__pyx_n_s_Double);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Double);
  __Pyx_GIVEREF(__pyx_n_s_Double);
  __Pyx_INCREF(__pyx_n_s_GlobalValue);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_GlobalValue);
  __Pyx_GIVEREF(__pyx_n_s_GlobalValue);
  __Pyx_INCREF(__pyx_n_s_GlobalString);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_GlobalString);
  __Pyx_GIVEREF(__pyx_n_s_GlobalString);
  __Pyx_INCREF(__pyx_n_s_ExtensionString);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_ExtensionString);
  __Pyx_GIVEREF(__pyx_n_s_ExtensionString);
  __Pyx_INCREF(__pyx_n_s_ExtensionValue);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_ExtensionValue);
  __Pyx_GIVEREF(__pyx_n_s_ExtensionValue);
  __Pyx_INCREF(__pyx_n_s_End);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_End);
  __Pyx_GIVEREF(__pyx_n_s_End);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\data\chunkloaders\expressions\loaders.pyx":1
 * # Copyright (c) Mathias Kaerlev 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of Anaconda.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmfparser.data.chunkloaders.expressions.loaders", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmfparser.data.chunkloaders.expressions.loaders");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(short) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(short, long, PyLong_AsLong(x))
            } else if (sizeof(short) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(short, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
