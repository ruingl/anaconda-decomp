/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__mmfparser__bytereader
#define __PYX_HAVE_API__mmfparser__bytereader
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmfparser\\bytereader.pyx",
  "mmfparser\\common.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9mmfparser_10bytereader_ByteReader;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString;
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString;

/* "mmfparser\bytereader.pxd":33
 *     cpdef int tell(self)
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)             # <<<<<<<<<<<<<<
 *     cpdef read(self, int size = ?)
 *     cpdef adjust(self, int to)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek {
  int __pyx_n;
  int mode;
};

/* "mmfparser\bytereader.pxd":34
 *     cpdef data(self)
 *     cpdef bint seek(self, int pos, int mode = ?)
 *     cpdef read(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read {
  int __pyx_n;
  int size;
};

/* "mmfparser\bytereader.pxd":37
 *     cpdef adjust(self, int to)
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10
 *     cpdef float readFloat(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":38
 *     cpdef size_t size(self)
 *     cpdef short readByte(self, bint asUnsigned = ?) except? -10
 *     cpdef int readShort(self, bint asUnsigned = ?) except? -10             # <<<<<<<<<<<<<<
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":41
 *     cpdef float readFloat(self) except? -10
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt {
  int __pyx_n;
  int asUnsigned;
};

/* "mmfparser\bytereader.pxd":42
 *     cpdef double readDouble(self) except? -10
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef unicode readUnicodeString(self, size=?)
 *     cpdef tuple readColor(self)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":43
 *     cpdef readInt(self, bint asUnsigned = ?)
 *     cpdef bytes readString(self, size=?)
 *     cpdef unicode readUnicodeString(self, size=?)             # <<<<<<<<<<<<<<
 *     cpdef tuple readColor(self)
 *     cpdef ByteReader readReader(self, size_t size)
 */
struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString {
  int __pyx_n;
  PyObject *size;
};

/* "mmfparser\bytereader.pxd":20
 * from libc.stdio cimport FILE
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer
 *     cdef unsigned int start, pos, data_size, lastPosition
 */
struct __pyx_obj_9mmfparser_10bytereader_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtab;
  unsigned char *buffer;
  unsigned int start;
  unsigned int pos;
  unsigned int data_size;
  unsigned int lastPosition;
  PyObject *original;
  int shared;
  PyObject *python_fp;
};



/* "mmfparser\bytereader.pyx":75
 * 
 * @cython.final
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     def __cinit__(self, input = None, start = None, size = None):
 *         self.pos = 0
 */

struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader {
  int (*tell)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*data)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  int (*seek)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args);
  PyObject *(*read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args);
  PyObject *(*adjust)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch);
  size_t (*size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  short (*readByte)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  double (*readDouble)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*readInt)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args);
  PyObject *(*readUnicodeString)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args);
  PyObject *(*readColor)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *(*readReader)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*write)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch);
  int (*write_size)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch);
  int (*skipBytes)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*rewind)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
  int (*_read)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int);
};
static struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader *__pyx_vtabptr_9mmfparser_10bytereader_ByteReader;
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_data(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_adjust(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch);
static size_t __pyx_f_9mmfparser_10bytereader_10ByteReader_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static short __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_readShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args);
static float __pyx_f_9mmfparser_10bytereader_10ByteReader_readFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static double __pyx_f_9mmfparser_10bytereader_10ByteReader_readDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args);
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch);
static struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_rewind(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch);
static int __pyx_f_9mmfparser_10bytereader_10ByteReader__read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int);
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_data(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_pos, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_adjust(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_to, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader__read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, void *__pyx_v_value, int __pyx_v_size); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args); /* proto*/
static size_t __pyx_f_9mmfparser_10bytereader_10ByteReader_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static short __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_readShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args); /* proto*/
static float __pyx_f_9mmfparser_10bytereader_10ByteReader_readFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_9mmfparser_10bytereader_10ByteReader_readDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_data, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_rewind(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'mmfparser.common' */
static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int, char **); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'mmfparser.bytereader' */
static PyTypeObject *__pyx_ptype_9mmfparser_10bytereader_ByteReader = 0;
static CYTHON_INLINE int __pyx_f_9mmfparser_10bytereader_check_available(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t); /*proto*/
static CYTHON_INLINE void __pyx_f_9mmfparser_10bytereader_ensure_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t); /*proto*/
static CYTHON_INLINE void __pyx_f_9mmfparser_10bytereader_ensure_write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t); /*proto*/
#define __Pyx_MODULE_NAME "mmfparser.bytereader"
int __pyx_module_is_main_mmfparser__bytereader = 0;

/* Implementation of 'mmfparser.bytereader' */
static PyObject *__pyx_builtin_file;
static PyObject *__pyx_builtin_buffer;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_raw_input;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_SystemExit;
static int __pyx_pf_9mmfparser_10bytereader_10ByteReader___cinit__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_input, PyObject *__pyx_v_start, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_2tell(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_4data(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_6seek(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_pos, int __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_8adjust(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_to); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_10read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_12size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_9mmfparser_10bytereader_10ByteReader_14__len__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_16__str__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_18__repr__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_20readByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_22readShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_24readFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_26readDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_28readInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_30readString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_32readUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_34readColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_36readReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_38readIntString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_40write(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_42write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_44writeByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_46writeShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_48writeFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_50writeDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_52writeInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_54writeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_56writeUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_58writeColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_colorTuple); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_60writeFormat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_62writeStruct(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_structType, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_64writeReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_66writeIntString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_68skipBytes(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_70rewind(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_72truncate(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_74checkDefault(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_76openEditor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_openEditor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_9mmfparser_10bytereader_2checkDefault(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, PyObject *__pyx_v_value, PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_tp_new_9mmfparser_10bytereader_ByteReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "";
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k__2[] = "\000";
static char __pyx_k__3[] = "\000\000";
static char __pyx_k_os[] = "os";
static char __pyx_k_wb[] = "wb";
static char __pyx_k_INT[] = "INT";
static char __pyx_k_pos[] = "pos";
static char __pyx_k_s_s[] = "%s@%s";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_BYTE[] = "BYTE";
static char __pyx_k_UINT[] = "UINT";
static char __pyx_k_data[] = "data";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_name[] = "name";
static char __pyx_k_pack[] = "pack";
static char __pyx_k_read[] = "read";
static char __pyx_k_seek[] = "seek";
static char __pyx_k_size[] = "size";
static char __pyx_k_tell[] = "tell";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_FLOAT[] = "FLOAT";
static char __pyx_k_Popen[] = "Popen";
static char __pyx_k_SHORT[] = "SHORT";
static char __pyx_k_UBYTE[] = "UBYTE";
static char __pyx_k_close[] = "close";
static char __pyx_k_enter[] = "(enter)";
static char __pyx_k_error[] = "error";
static char __pyx_k_input[] = "input";
static char __pyx_k_range[] = "range";
static char __pyx_k_start[] = "start";
static char __pyx_k_stdin[] = "stdin";
static char __pyx_k_value[] = "value";
static char __pyx_k_write[] = "write";
static char __pyx_k_DOUBLE[] = "DOUBLE";
static char __pyx_k_Struct[] = "Struct";
static char __pyx_k_USHORT[] = "USHORT";
static char __pyx_k_buffer[] = "buffer";
static char __pyx_k_decode[] = "decode";
static char __pyx_k_delete[] = "delete";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_isatty[] = "isatty";
static char __pyx_k_reader[] = "reader";
static char __pyx_k_stdout[] = "stdout";
static char __pyx_k_struct[] = "struct";
static char __pyx_k_IOError[] = "IOError";
static char __pyx_k_message[] = "message";
static char __pyx_k_defaults[] = "defaults";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_position[] = "position";
static char __pyx_k_tempfile[] = "tempfile";
static char __pyx_k_truncate[] = "truncate";
static char __pyx_k_writeInt[] = "writeInt";
static char __pyx_k_010editor[] = "010editor";
static char __pyx_k_raw_input[] = "raw_input";
static char __pyx_k_traceback[] = "traceback";
static char __pyx_k_utf_16_le[] = "utf-16-le";
static char __pyx_k_writeByte[] = "writeByte";
static char __pyx_k_SystemExit[] = "SystemExit";
static char __pyx_k_asUnsigned[] = "asUnsigned";
static char __pyx_k_openEditor[] = "openEditor";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_structType[] = "structType";
static char __pyx_k_subprocess[] = "subprocess";
static char __pyx_k_print_stack[] = "print_stack";
static char __pyx_k_writeStruct[] = "writeStruct";
static char __pyx_k_checkDefault[] = "checkDefault";
static char __pyx_k_lastPosition[] = "lastPosition";
static char __pyx_k_reprDefaults[] = "reprDefaults";
static char __pyx_k_s_bytes_required[] = "%s bytes required";
static char __pyx_k_NamedTemporaryFile[] = "NamedTemporaryFile";
static char __pyx_k_mmfparser_bytereader[] = "mmfparser.bytereader";
static char __pyx_k_Press_enter_to_open_hex_editor[] = "Press enter to open hex editor...";
static char __pyx_k_unimplemented_value_at_s_size_s[] = "unimplemented value at %s, size %s (should be %s but was %s)";
static char __pyx_k_C_LAPTOP_Downloads_AnacondaDev_b[] = "C:\\LAPTOP\\Downloads\\AnacondaDev-b2c583a408de197bd210236d50a501047dce6853\\AnacondaDev-b2c583a408de197bd210236d50a501047dce6853\\mmfparser\\bytereader.pyx";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_010editor;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_BYTE;
static PyObject *__pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b;
static PyObject *__pyx_n_s_DOUBLE;
static PyObject *__pyx_n_s_FLOAT;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_INT;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_NamedTemporaryFile;
static PyObject *__pyx_n_s_Popen;
static PyObject *__pyx_kp_s_Press_enter_to_open_hex_editor;
static PyObject *__pyx_n_s_SHORT;
static PyObject *__pyx_n_s_Struct;
static PyObject *__pyx_n_s_SystemExit;
static PyObject *__pyx_n_s_UBYTE;
static PyObject *__pyx_n_s_UINT;
static PyObject *__pyx_n_s_USHORT;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s_asUnsigned;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_buffer;
static PyObject *__pyx_n_s_checkDefault;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_defaults;
static PyObject *__pyx_n_s_delete;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_kp_s_enter;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input;
static PyObject *__pyx_n_s_isatty;
static PyObject *__pyx_n_s_lastPosition;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_mmfparser_bytereader;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_openEditor;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_print_stack;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw_input;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reader;
static PyObject *__pyx_n_s_reprDefaults;
static PyObject *__pyx_kp_s_s_bytes_required;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_n_s_seek;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_stdin;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_structType;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_tell;
static PyObject *__pyx_n_s_tempfile;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_truncate;
static PyObject *__pyx_kp_s_unimplemented_value_at_s_size_s;
static PyObject *__pyx_kp_s_utf_16_le;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_wb;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeByte;
static PyObject *__pyx_n_s_writeInt;
static PyObject *__pyx_n_s_writeStruct;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;

/* "mmfparser\bytereader.pyx":46
 * cdef class ByteReader
 * 
 * cdef inline int check_available(ByteReader reader, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     if reader.pos + size > reader.data_size:
 *         import traceback
 */

static CYTHON_INLINE int __pyx_f_9mmfparser_10bytereader_check_available(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, size_t __pyx_v_size) {
  PyObject *__pyx_v_traceback = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_available", 0);

  /* "mmfparser\bytereader.pyx":47
 * 
 * cdef inline int check_available(ByteReader reader, size_t size) except -1:
 *     if reader.pos + size > reader.data_size:             # <<<<<<<<<<<<<<
 *         import traceback
 *         traceback.print_stack()
 */
  __pyx_t_1 = (((__pyx_v_reader->pos + __pyx_v_size) > __pyx_v_reader->data_size) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":48
 * cdef inline int check_available(ByteReader reader, size_t size) except -1:
 *     if reader.pos + size > reader.data_size:
 *         import traceback             # <<<<<<<<<<<<<<
 *         traceback.print_stack()
 *         raise struct.error('%s bytes required' % size)
 */
    __pyx_t_2 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_traceback = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":49
 *     if reader.pos + size > reader.data_size:
 *         import traceback
 *         traceback.print_stack()             # <<<<<<<<<<<<<<
 *         raise struct.error('%s bytes required' % size)
 *     return 0
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_traceback, __pyx_n_s_print_stack); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":50
 *         import traceback
 *         traceback.print_stack()
 *         raise struct.error('%s bytes required' % size)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_s_bytes_required, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "mmfparser\bytereader.pyx":51
 *         traceback.print_stack()
 *         raise struct.error('%s bytes required' % size)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline void ensure_size(ByteReader reader, size_t size):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":46
 * cdef class ByteReader
 * 
 * cdef inline int check_available(ByteReader reader, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     if reader.pos + size > reader.data_size:
 *         import traceback
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.check_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_traceback);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":53
 *     return 0
 * 
 * cdef inline void ensure_size(ByteReader reader, size_t size):             # <<<<<<<<<<<<<<
 *     if size < reader.data_size:
 *         size = reader.data_size
 */

static CYTHON_INLINE void __pyx_f_9mmfparser_10bytereader_ensure_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, size_t __pyx_v_size) {
  char *__pyx_v_buf;
  PyObject *__pyx_v_newData = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ensure_size", 0);

  /* "mmfparser\bytereader.pyx":54
 * 
 * cdef inline void ensure_size(ByteReader reader, size_t size):
 *     if size < reader.data_size:             # <<<<<<<<<<<<<<
 *         size = reader.data_size
 *     if len(reader.original) >= (reader.start + size) and not reader.shared:
 */
  __pyx_t_1 = ((__pyx_v_size < __pyx_v_reader->data_size) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":55
 * cdef inline void ensure_size(ByteReader reader, size_t size):
 *     if size < reader.data_size:
 *         size = reader.data_size             # <<<<<<<<<<<<<<
 *     if len(reader.original) >= (reader.start + size) and not reader.shared:
 *         if size > reader.data_size:
 */
    __pyx_t_2 = __pyx_v_reader->data_size;
    __pyx_v_size = __pyx_t_2;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "mmfparser\bytereader.pyx":56
 *     if size < reader.data_size:
 *         size = reader.data_size
 *     if len(reader.original) >= (reader.start + size) and not reader.shared:             # <<<<<<<<<<<<<<
 *         if size > reader.data_size:
 *             reader.data_size = size
 */
  __pyx_t_3 = __pyx_v_reader->original;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyBytes_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((__pyx_t_4 >= (__pyx_v_reader->start + __pyx_v_size)) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = ((!(__pyx_v_reader->shared != 0)) != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":57
 *         size = reader.data_size
 *     if len(reader.original) >= (reader.start + size) and not reader.shared:
 *         if size > reader.data_size:             # <<<<<<<<<<<<<<
 *             reader.data_size = size
 *         return
 */
    __pyx_t_1 = ((__pyx_v_size > __pyx_v_reader->data_size) != 0);
    if (__pyx_t_1) {

      /* "mmfparser\bytereader.pyx":58
 *     if len(reader.original) >= (reader.start + size) and not reader.shared:
 *         if size > reader.data_size:
 *             reader.data_size = size             # <<<<<<<<<<<<<<
 *         return
 *     cdef char * buf
 */
      __pyx_v_reader->data_size = __pyx_v_size;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "mmfparser\bytereader.pyx":59
 *         if size > reader.data_size:
 *             reader.data_size = size
 *         return             # <<<<<<<<<<<<<<
 *     cdef char * buf
 *     newData = allocate_memory(size * 3, &buf)
 */
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":61
 *         return
 *     cdef char * buf
 *     newData = allocate_memory(size * 3, &buf)             # <<<<<<<<<<<<<<
 *     memcpy(buf, reader.buffer, reader.data_size)
 *     reader.original = newData
 */
  __pyx_t_3 = __pyx_f_9mmfparser_6common_allocate_memory((__pyx_v_size * 3), (&__pyx_v_buf)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_newData = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":62
 *     cdef char * buf
 *     newData = allocate_memory(size * 3, &buf)
 *     memcpy(buf, reader.buffer, reader.data_size)             # <<<<<<<<<<<<<<
 *     reader.original = newData
 *     reader.buffer = <unsigned char *>buf
 */
  memcpy(__pyx_v_buf, __pyx_v_reader->buffer, __pyx_v_reader->data_size);

  /* "mmfparser\bytereader.pyx":63
 *     newData = allocate_memory(size * 3, &buf)
 *     memcpy(buf, reader.buffer, reader.data_size)
 *     reader.original = newData             # <<<<<<<<<<<<<<
 *     reader.buffer = <unsigned char *>buf
 *     reader.data_size = size
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_newData))||((__pyx_v_newData) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_newData)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_newData;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_reader->original);
  __Pyx_DECREF(__pyx_v_reader->original);
  __pyx_v_reader->original = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":64
 *     memcpy(buf, reader.buffer, reader.data_size)
 *     reader.original = newData
 *     reader.buffer = <unsigned char *>buf             # <<<<<<<<<<<<<<
 *     reader.data_size = size
 *     reader.start = 0
 */
  __pyx_v_reader->buffer = ((unsigned char *)__pyx_v_buf);

  /* "mmfparser\bytereader.pyx":65
 *     reader.original = newData
 *     reader.buffer = <unsigned char *>buf
 *     reader.data_size = size             # <<<<<<<<<<<<<<
 *     reader.start = 0
 *     reader.shared = False
 */
  __pyx_v_reader->data_size = __pyx_v_size;

  /* "mmfparser\bytereader.pyx":66
 *     reader.buffer = <unsigned char *>buf
 *     reader.data_size = size
 *     reader.start = 0             # <<<<<<<<<<<<<<
 *     reader.shared = False
 * 
 */
  __pyx_v_reader->start = 0;

  /* "mmfparser\bytereader.pyx":67
 *     reader.data_size = size
 *     reader.start = 0
 *     reader.shared = False             # <<<<<<<<<<<<<<
 * 
 * cdef inline void ensure_write_size(ByteReader reader, size_t size):
 */
  __pyx_v_reader->shared = 0;

  /* "mmfparser\bytereader.pyx":53
 *     return 0
 * 
 * cdef inline void ensure_size(ByteReader reader, size_t size):             # <<<<<<<<<<<<<<
 *     if size < reader.data_size:
 *         size = reader.data_size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("mmfparser.bytereader.ensure_size", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_newData);
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\bytereader.pyx":69
 *     reader.shared = False
 * 
 * cdef inline void ensure_write_size(ByteReader reader, size_t size):             # <<<<<<<<<<<<<<
 *     ensure_size(reader, reader.pos + size)
 * 
 */

static CYTHON_INLINE void __pyx_f_9mmfparser_10bytereader_ensure_write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, size_t __pyx_v_size) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ensure_write_size", 0);

  /* "mmfparser\bytereader.pyx":70
 * 
 * cdef inline void ensure_write_size(ByteReader reader, size_t size):
 *     ensure_size(reader, reader.pos + size)             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_f_9mmfparser_10bytereader_ensure_size(__pyx_v_reader, (__pyx_v_reader->pos + __pyx_v_size));

  /* "mmfparser\bytereader.pyx":69
 *     reader.shared = False
 * 
 * cdef inline void ensure_write_size(ByteReader reader, size_t size):             # <<<<<<<<<<<<<<
 *     ensure_size(reader, reader.pos + size)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "mmfparser\bytereader.pyx":76
 * @cython.final
 * cdef class ByteReader:
 *     def __cinit__(self, input = None, start = None, size = None):             # <<<<<<<<<<<<<<
 *         self.pos = 0
 *         if isinstance(input, file):
 */

/* Python wrapper */
static int __pyx_pw_9mmfparser_10bytereader_10ByteReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9mmfparser_10bytereader_10ByteReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input,&__pyx_n_s_start,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input = values[0];
    __pyx_v_start = values[1];
    __pyx_v_size = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader___cinit__(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_input, __pyx_v_start, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9mmfparser_10bytereader_10ByteReader___cinit__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_input, PyObject *__pyx_v_start, PyObject *__pyx_v_size) {
  PyObject *__pyx_v_data = NULL;
  int __pyx_v_isChild;
  unsigned char *__pyx_v_c_data;
  int __pyx_v_int_start;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  unsigned char *__pyx_t_5;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mmfparser\bytereader.pyx":77
 * cdef class ByteReader:
 *     def __cinit__(self, input = None, start = None, size = None):
 *         self.pos = 0             # <<<<<<<<<<<<<<
 *         if isinstance(input, file):
 *             IF not IS_PYPY:
 */
  __pyx_v_self->pos = 0;

  /* "mmfparser\bytereader.pyx":78
 *     def __cinit__(self, input = None, start = None, size = None):
 *         self.pos = 0
 *         if isinstance(input, file):             # <<<<<<<<<<<<<<
 *             IF not IS_PYPY:
 *                 self.fp = PyFile_AsFile(input)
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_input, __pyx_builtin_file); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":81
 *             IF not IS_PYPY:
 *                 self.fp = PyFile_AsFile(input)
 *             self.python_fp = input             # <<<<<<<<<<<<<<
 *             self.shared = False
 *             self.start = 0
 */
    __Pyx_INCREF(__pyx_v_input);
    __Pyx_GIVEREF(__pyx_v_input);
    __Pyx_GOTREF(__pyx_v_self->python_fp);
    __Pyx_DECREF(__pyx_v_self->python_fp);
    __pyx_v_self->python_fp = __pyx_v_input;

    /* "mmfparser\bytereader.pyx":82
 *                 self.fp = PyFile_AsFile(input)
 *             self.python_fp = input
 *             self.shared = False             # <<<<<<<<<<<<<<
 *             self.start = 0
 *             return
 */
    __pyx_v_self->shared = 0;

    /* "mmfparser\bytereader.pyx":83
 *             self.python_fp = input
 *             self.shared = False
 *             self.start = 0             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */
    __pyx_v_self->start = 0;

    /* "mmfparser\bytereader.pyx":84
 *             self.shared = False
 *             self.start = 0
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             self.python_fp = None
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "mmfparser\bytereader.pyx":86
 *             return
 *         else:
 *             self.python_fp = None             # <<<<<<<<<<<<<<
 *             if input is not None:
 *                 data = input
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->python_fp);
    __Pyx_DECREF(__pyx_v_self->python_fp);
    __pyx_v_self->python_fp = Py_None;

    /* "mmfparser\bytereader.pyx":87
 *         else:
 *             self.python_fp = None
 *             if input is not None:             # <<<<<<<<<<<<<<
 *                 data = input
 *             else:
 */
    __pyx_t_2 = (__pyx_v_input != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "mmfparser\bytereader.pyx":88
 *             self.python_fp = None
 *             if input is not None:
 *                 data = input             # <<<<<<<<<<<<<<
 *             else:
 *                 data = ''
 */
      __Pyx_INCREF(__pyx_v_input);
      __pyx_v_data = __pyx_v_input;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "mmfparser\bytereader.pyx":90
 *                 data = input
 *             else:
 *                 data = ''             # <<<<<<<<<<<<<<
 *         cdef bint isChild = start is not None and size is not None
 *         self.shared = isChild
 */
      __Pyx_INCREF(__pyx_kp_s_);
      __pyx_v_data = __pyx_kp_s_;
    }
    __pyx_L4:;
  }

  /* "mmfparser\bytereader.pyx":91
 *             else:
 *                 data = ''
 *         cdef bint isChild = start is not None and size is not None             # <<<<<<<<<<<<<<
 *         self.shared = isChild
 *         self.original = data
 */
  __pyx_t_2 = (__pyx_v_start != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_size != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __pyx_v_isChild = __pyx_t_1;

  /* "mmfparser\bytereader.pyx":92
 *                 data = ''
 *         cdef bint isChild = start is not None and size is not None
 *         self.shared = isChild             # <<<<<<<<<<<<<<
 *         self.original = data
 *         cdef unsigned char * c_data
 */
  __pyx_v_self->shared = __pyx_v_isChild;

  /* "mmfparser\bytereader.pyx":93
 *         cdef bint isChild = start is not None and size is not None
 *         self.shared = isChild
 *         self.original = data             # <<<<<<<<<<<<<<
 *         cdef unsigned char * c_data
 *         c_data = data
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_data)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->original);
  __Pyx_DECREF(__pyx_v_self->original);
  __pyx_v_self->original = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mmfparser\bytereader.pyx":95
 *         self.original = data
 *         cdef unsigned char * c_data
 *         c_data = data             # <<<<<<<<<<<<<<
 *         cdef int int_start
 *         if isChild:
 */
  __pyx_t_5 = __Pyx_PyObject_AsUString(__pyx_v_data); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_data = __pyx_t_5;

  /* "mmfparser\bytereader.pyx":97
 *         c_data = data
 *         cdef int int_start
 *         if isChild:             # <<<<<<<<<<<<<<
 *             int_start = start
 *             self.start = int_start
 */
  __pyx_t_1 = (__pyx_v_isChild != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":98
 *         cdef int int_start
 *         if isChild:
 *             int_start = start             # <<<<<<<<<<<<<<
 *             self.start = int_start
 *             c_data += int_start
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_int_start = __pyx_t_6;

    /* "mmfparser\bytereader.pyx":99
 *         if isChild:
 *             int_start = start
 *             self.start = int_start             # <<<<<<<<<<<<<<
 *             c_data += int_start
 *         if isChild:
 */
    __pyx_v_self->start = __pyx_v_int_start;

    /* "mmfparser\bytereader.pyx":100
 *             int_start = start
 *             self.start = int_start
 *             c_data += int_start             # <<<<<<<<<<<<<<
 *         if isChild:
 *             self.data_size = size
 */
    __pyx_v_c_data = (__pyx_v_c_data + __pyx_v_int_start);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "mmfparser\bytereader.pyx":101
 *             self.start = int_start
 *             c_data += int_start
 *         if isChild:             # <<<<<<<<<<<<<<
 *             self.data_size = size
 *         else:
 */
  __pyx_t_1 = (__pyx_v_isChild != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":102
 *             c_data += int_start
 *         if isChild:
 *             self.data_size = size             # <<<<<<<<<<<<<<
 *         else:
 *             self.data_size = len(data)
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_size); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->data_size = __pyx_t_7;
    goto __pyx_L8;
  }
  /*else*/ {

    /* "mmfparser\bytereader.pyx":104
 *             self.data_size = size
 *         else:
 *             self.data_size = len(data)             # <<<<<<<<<<<<<<
 * 
 *         self.buffer = c_data
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->data_size = __pyx_t_8;
  }
  __pyx_L8:;

  /* "mmfparser\bytereader.pyx":106
 *             self.data_size = len(data)
 * 
 *         self.buffer = c_data             # <<<<<<<<<<<<<<
 * 
 *     cpdef int tell(self):
 */
  __pyx_v_self->buffer = __pyx_v_c_data;

  /* "mmfparser\bytereader.pyx":76
 * @cython.final
 * cdef class ByteReader:
 *     def __cinit__(self, input = None, start = None, size = None):             # <<<<<<<<<<<<<<
 *         self.pos = 0
 *         if isinstance(input, file):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":108
 *         self.buffer = c_data
 * 
 *     cpdef int tell(self):             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             if self.python_fp:
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_3tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tell", 0);

  /* "mmfparser\bytereader.pyx":110
 *     cpdef int tell(self):
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 return self.python_fp.tell()
 *         ELSE:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":111
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 return self.python_fp.tell()             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_tell); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":116
 *                 return ftell(self.fp)
 * 
 *         return self.pos             # <<<<<<<<<<<<<<
 * 
 *     cpdef data(self):
 */
  __pyx_r = __pyx_v_self->pos;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":108
 *         self.buffer = c_data
 * 
 *     cpdef int tell(self):             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             if self.python_fp:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("mmfparser.bytereader.ByteReader.tell", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_3tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_3tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tell (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_2tell(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_2tell(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tell", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.tell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":118
 *         return self.pos
 * 
 *     cpdef data(self):             # <<<<<<<<<<<<<<
 *         cdef int pos
 *         IF IS_PYPY:
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_5data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_data(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_pos;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data", 0);

  /* "mmfparser\bytereader.pyx":121
 *         cdef int pos
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 pos = self.tell()
 *                 self.seek(0)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":122
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 pos = self.tell()             # <<<<<<<<<<<<<<
 *                 self.seek(0)
 *                 data = self.read()
 */
    __pyx_v_pos = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

    /* "mmfparser\bytereader.pyx":123
 *             if self.python_fp:
 *                 pos = self.tell()
 *                 self.seek(0)             # <<<<<<<<<<<<<<
 *                 data = self.read()
 *                 self.seek(pos)
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, 0, 0, NULL);

    /* "mmfparser\bytereader.pyx":124
 *                 pos = self.tell()
 *                 self.seek(0)
 *                 data = self.read()             # <<<<<<<<<<<<<<
 *                 self.seek(pos)
 *                 return data
 */
    __pyx_t_2 = __pyx_f_9mmfparser_10bytereader_10ByteReader_read(__pyx_v_self, 0, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_data = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":125
 *                 self.seek(0)
 *                 data = self.read()
 *                 self.seek(pos)             # <<<<<<<<<<<<<<
 *                 return data
 *         ELSE:
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, __pyx_v_pos, 0, NULL);

    /* "mmfparser\bytereader.pyx":126
 *                 data = self.read()
 *                 self.seek(pos)
 *                 return data             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = __pyx_v_data;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":135
 *                 return data
 * 
 *         return self.buffer[0:self.data_size]             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint seek(self, int pos, int mode = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_self->buffer) + 0, __pyx_v_self->data_size - 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":118
 *         return self.pos
 * 
 *     cpdef data(self):             # <<<<<<<<<<<<<<
 *         cdef int pos
 *         IF IS_PYPY:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_5data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_5data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("data (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_4data(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_4data(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_data(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":137
 *         return self.buffer[0:self.data_size]
 * 
 *     cpdef bint seek(self, int pos, int mode = 0):             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             if self.python_fp:
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_7seek(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_pos, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args) {
  int __pyx_v_mode = ((int)0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_mode = __pyx_optional_args->mode;
    }
  }

  /* "mmfparser\bytereader.pyx":139
 *     cpdef bint seek(self, int pos, int mode = 0):
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 self.python_fp.seek(pos, mode)
 *                 return True
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":140
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 self.python_fp.seek(pos, mode)             # <<<<<<<<<<<<<<
 *                 return True
 *         ELSE:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_seek); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_pos); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_mode); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    }
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":141
 *             if self.python_fp:
 *                 self.python_fp.seek(pos, mode)
 *                 return True             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":149
 *         if mode == 2:
 *             pos += self.data_size
 *         elif mode == 1:             # <<<<<<<<<<<<<<
 *             pos += self.pos
 *         if pos > self.data_size:
 */
  switch (__pyx_v_mode) {

    /* "mmfparser\bytereader.pyx":147
 *                 return True
 * 
 *         if mode == 2:             # <<<<<<<<<<<<<<
 *             pos += self.data_size
 *         elif mode == 1:
 */
    case 2:

    /* "mmfparser\bytereader.pyx":148
 * 
 *         if mode == 2:
 *             pos += self.data_size             # <<<<<<<<<<<<<<
 *         elif mode == 1:
 *             pos += self.pos
 */
    __pyx_v_pos = (__pyx_v_pos + __pyx_v_self->data_size);
    break;

    /* "mmfparser\bytereader.pyx":149
 *         if mode == 2:
 *             pos += self.data_size
 *         elif mode == 1:             # <<<<<<<<<<<<<<
 *             pos += self.pos
 *         if pos > self.data_size:
 */
    case 1:

    /* "mmfparser\bytereader.pyx":150
 *             pos += self.data_size
 *         elif mode == 1:
 *             pos += self.pos             # <<<<<<<<<<<<<<
 *         if pos > self.data_size:
 *             pos = self.data_size
 */
    __pyx_v_pos = (__pyx_v_pos + __pyx_v_self->pos);
    break;
    default: break;
  }

  /* "mmfparser\bytereader.pyx":151
 *         elif mode == 1:
 *             pos += self.pos
 *         if pos > self.data_size:             # <<<<<<<<<<<<<<
 *             pos = self.data_size
 *         if pos < 0:
 */
  __pyx_t_1 = ((__pyx_v_pos > __pyx_v_self->data_size) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":152
 *             pos += self.pos
 *         if pos > self.data_size:
 *             pos = self.data_size             # <<<<<<<<<<<<<<
 *         if pos < 0:
 *             pos = 0
 */
    __pyx_t_9 = __pyx_v_self->data_size;
    __pyx_v_pos = __pyx_t_9;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "mmfparser\bytereader.pyx":153
 *         if pos > self.data_size:
 *             pos = self.data_size
 *         if pos < 0:             # <<<<<<<<<<<<<<
 *             pos = 0
 *         self.pos = pos
 */
  __pyx_t_1 = ((__pyx_v_pos < 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":154
 *             pos = self.data_size
 *         if pos < 0:
 *             pos = 0             # <<<<<<<<<<<<<<
 *         self.pos = pos
 *         return True
 */
    __pyx_v_pos = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "mmfparser\bytereader.pyx":155
 *         if pos < 0:
 *             pos = 0
 *         self.pos = pos             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_v_self->pos = __pyx_v_pos;

  /* "mmfparser\bytereader.pyx":156
 *             pos = 0
 *         self.pos = pos
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef adjust(self, int to):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":137
 *         return self.buffer[0:self.data_size]
 * 
 *     cpdef bint seek(self, int pos, int mode = 0):             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             if self.python_fp:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("mmfparser.bytereader.ByteReader.seek", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_7seek(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_7seek(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pos;
  int __pyx_v_mode;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos,&__pyx_n_s_mode,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "seek") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_mode = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mode == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mode = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_6seek(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_pos, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_6seek(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_pos, int __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.mode = __pyx_v_mode;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->seek(__pyx_v_self, __pyx_v_pos, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":158
 *         return True
 * 
 *     cpdef adjust(self, int to):             # <<<<<<<<<<<<<<
 *         cdef int value = to - (self.tell() % to)
 * 
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_9adjust(PyObject *__pyx_v_self, PyObject *__pyx_arg_to); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_adjust(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_to, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adjust", 0);

  /* "mmfparser\bytereader.pyx":159
 * 
 *     cpdef adjust(self, int to):
 *         cdef int value = to - (self.tell() % to)             # <<<<<<<<<<<<<<
 * 
 *         IF IS_PYPY:
 */
  __pyx_v_value = (__pyx_v_to - (__pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0) % __pyx_v_to));

  /* "mmfparser\bytereader.pyx":162
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 self.seek(self.tell() + value)
 *                 return
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":163
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 self.seek(self.tell() + value)             # <<<<<<<<<<<<<<
 *                 return
 *         ELSE:
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, (__pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0) + __pyx_v_value), 0, NULL);

    /* "mmfparser\bytereader.pyx":164
 *             if self.python_fp:
 *                 self.seek(self.tell() + value)
 *                 return             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":170
 *                 return
 * 
 *         self.pos += value             # <<<<<<<<<<<<<<
 * 
 *     cdef bint _read(self, void * value, int size) except False:
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_value);

  /* "mmfparser\bytereader.pyx":158
 *         return True
 * 
 *     cpdef adjust(self, int to):             # <<<<<<<<<<<<<<
 *         cdef int value = to - (self.tell() % to)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_9adjust(PyObject *__pyx_v_self, PyObject *__pyx_arg_to); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_9adjust(PyObject *__pyx_v_self, PyObject *__pyx_arg_to) {
  int __pyx_v_to;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adjust (wrapper)", 0);
  assert(__pyx_arg_to); {
    __pyx_v_to = __Pyx_PyInt_As_int(__pyx_arg_to); if (unlikely((__pyx_v_to == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_8adjust(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((int)__pyx_v_to));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_8adjust(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_to) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adjust", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_adjust(__pyx_v_self, __pyx_v_to, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":172
 *         self.pos += value
 * 
 *     cdef bint _read(self, void * value, int size) except False:             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             cdef char * data_c
 */

static int __pyx_f_9mmfparser_10bytereader_10ByteReader__read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, void *__pyx_v_value, int __pyx_v_size) {
  char *__pyx_v_data_c;
  PyObject *__pyx_v_data = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  char *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_read", 0);

  /* "mmfparser\bytereader.pyx":175
 *         IF IS_PYPY:
 *             cdef char * data_c
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 data = self.python_fp.read(size)
 *                 if len(data) < size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":176
 *             cdef char * data_c
 *             if self.python_fp:
 *                 data = self.python_fp.read(size)             # <<<<<<<<<<<<<<
 *                 if len(data) < size:
 *                     raise struct.error('%s bytes required' % size)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_data = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":177
 *             if self.python_fp:
 *                 data = self.python_fp.read(size)
 *                 if len(data) < size:             # <<<<<<<<<<<<<<
 *                     raise struct.error('%s bytes required' % size)
 *                 data_c = data
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((__pyx_t_7 < __pyx_v_size) != 0);
    if (__pyx_t_1) {

      /* "mmfparser\bytereader.pyx":178
 *                 data = self.python_fp.read(size)
 *                 if len(data) < size:
 *                     raise struct.error('%s bytes required' % size)             # <<<<<<<<<<<<<<
 *                 data_c = data
 *                 memcpy(value, data_c, len(data))
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s_bytes_required, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "mmfparser\bytereader.pyx":179
 *                 if len(data) < size:
 *                     raise struct.error('%s bytes required' % size)
 *                 data_c = data             # <<<<<<<<<<<<<<
 *                 memcpy(value, data_c, len(data))
 *                 return True
 */
    __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_data_c = __pyx_t_8;

    /* "mmfparser\bytereader.pyx":180
 *                     raise struct.error('%s bytes required' % size)
 *                 data_c = data
 *                 memcpy(value, data_c, len(data))             # <<<<<<<<<<<<<<
 *                 return True
 *         ELSE:
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    memcpy(__pyx_v_value, __pyx_v_data_c, __pyx_t_7);

    /* "mmfparser\bytereader.pyx":181
 *                 data_c = data
 *                 memcpy(value, data_c, len(data))
 *                 return True             # <<<<<<<<<<<<<<
 *         ELSE:
 *             cdef size_t read_bytes
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":190
 *                 return True
 * 
 *         check_available(self, size)             # <<<<<<<<<<<<<<
 *         memcpy(value, (self.buffer + self.pos), size)
 *         self.pos += size
 */
  __pyx_t_9 = __pyx_f_9mmfparser_10bytereader_check_available(__pyx_v_self, __pyx_v_size); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":191
 * 
 *         check_available(self, size)
 *         memcpy(value, (self.buffer + self.pos), size)             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return True
 */
  memcpy(__pyx_v_value, (__pyx_v_self->buffer + __pyx_v_self->pos), __pyx_v_size);

  /* "mmfparser\bytereader.pyx":192
 *         check_available(self, size)
 *         memcpy(value, (self.buffer + self.pos), size)
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "mmfparser\bytereader.pyx":193
 *         memcpy(value, (self.buffer + self.pos), size)
 *         self.pos += size
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, int size = -1):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":172
 *         self.pos += value
 * 
 *     cdef bint _read(self, void * value, int size) except False:             # <<<<<<<<<<<<<<
 *         IF IS_PYPY:
 *             cdef char * data_c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader._read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":195
 *         return True
 * 
 *     cpdef read(self, int size = -1):             # <<<<<<<<<<<<<<
 *         cdef char * buf
 *         cdef size_t read_bytes
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args) {
  int __pyx_v_size = ((int)-1);
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }

  /* "mmfparser\bytereader.pyx":200
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 if size == -1:
 *                     size = self.size() - self.tell()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":201
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 if size == -1:             # <<<<<<<<<<<<<<
 *                     size = self.size() - self.tell()
 *                 return self.python_fp.read(size)
 */
    __pyx_t_1 = ((__pyx_v_size == -1) != 0);
    if (__pyx_t_1) {

      /* "mmfparser\bytereader.pyx":202
 *             if self.python_fp:
 *                 if size == -1:
 *                     size = self.size() - self.tell()             # <<<<<<<<<<<<<<
 *                 return self.python_fp.read(size)
 *         ELSE:
 */
      __pyx_v_size = (__pyx_f_9mmfparser_10bytereader_10ByteReader_size(__pyx_v_self, 0) - __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0));
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "mmfparser\bytereader.pyx":203
 *                 if size == -1:
 *                     size = self.size() - self.tell()
 *                 return self.python_fp.read(size)             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":212
 *                 return newData
 * 
 *         if size == -1 or size + self.pos > self.data_size:             # <<<<<<<<<<<<<<
 *             size = self.data_size - self.pos
 *         if size < 0:
 */
  __pyx_t_7 = ((__pyx_v_size == -1) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_7 = (((__pyx_v_size + __pyx_v_self->pos) > __pyx_v_self->data_size) != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":213
 * 
 *         if size == -1 or size + self.pos > self.data_size:
 *             size = self.data_size - self.pos             # <<<<<<<<<<<<<<
 *         if size < 0:
 *             size = 0
 */
    __pyx_v_size = (__pyx_v_self->data_size - __pyx_v_self->pos);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "mmfparser\bytereader.pyx":214
 *         if size == -1 or size + self.pos > self.data_size:
 *             size = self.data_size - self.pos
 *         if size < 0:             # <<<<<<<<<<<<<<
 *             size = 0
 *         data = self.buffer[self.pos:self.pos+size]
 */
  __pyx_t_1 = ((__pyx_v_size < 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":215
 *             size = self.data_size - self.pos
 *         if size < 0:
 *             size = 0             # <<<<<<<<<<<<<<
 *         data = self.buffer[self.pos:self.pos+size]
 *         self.pos += size
 */
    __pyx_v_size = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "mmfparser\bytereader.pyx":216
 *         if size < 0:
 *             size = 0
 *         data = self.buffer[self.pos:self.pos+size]             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         if self.pos > self.data_size:
 */
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_self->buffer) + __pyx_v_self->pos, (__pyx_v_self->pos + __pyx_v_size) - __pyx_v_self->pos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_data = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmfparser\bytereader.pyx":217
 *             size = 0
 *         data = self.buffer[self.pos:self.pos+size]
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         if self.pos > self.data_size:
 *             self.pos = self.data_size
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "mmfparser\bytereader.pyx":218
 *         data = self.buffer[self.pos:self.pos+size]
 *         self.pos += size
 *         if self.pos > self.data_size:             # <<<<<<<<<<<<<<
 *             self.pos = self.data_size
 *         return data
 */
  __pyx_t_1 = ((__pyx_v_self->pos > __pyx_v_self->data_size) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":219
 *         self.pos += size
 *         if self.pos > self.data_size:
 *             self.pos = self.data_size             # <<<<<<<<<<<<<<
 *         return data
 * 
 */
    __pyx_t_8 = __pyx_v_self->data_size;
    __pyx_v_self->pos = __pyx_t_8;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "mmfparser\bytereader.pyx":220
 *         if self.pos > self.data_size:
 *             self.pos = self.data_size
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":195
 *         return True
 * 
 *     cpdef read(self, int size = -1):             # <<<<<<<<<<<<<<
 *         cdef char * buf
 *         cdef size_t read_bytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_size = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_10read(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_10read(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.size = __pyx_v_size;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->read(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":222
 *         return data
 * 
 *     cpdef size_t size(self):             # <<<<<<<<<<<<<<
 *         cdef int pos
 *         cdef int size
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_13size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_9mmfparser_10bytereader_10ByteReader_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_pos;
  int __pyx_v_size;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "mmfparser\bytereader.pyx":227
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 pos = self.tell()
 *                 self.seek(0, 2)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":228
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 pos = self.tell()             # <<<<<<<<<<<<<<
 *                 self.seek(0, 2)
 *                 size = self.tell()
 */
    __pyx_v_pos = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

    /* "mmfparser\bytereader.pyx":229
 *             if self.python_fp:
 *                 pos = self.tell()
 *                 self.seek(0, 2)             # <<<<<<<<<<<<<<
 *                 size = self.tell()
 *                 self.seek(pos)
 */
    __pyx_t_2.__pyx_n = 1;
    __pyx_t_2.mode = 2;
    __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, 0, 0, &__pyx_t_2); 

    /* "mmfparser\bytereader.pyx":230
 *                 pos = self.tell()
 *                 self.seek(0, 2)
 *                 size = self.tell()             # <<<<<<<<<<<<<<
 *                 self.seek(pos)
 *                 return size
 */
    __pyx_v_size = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

    /* "mmfparser\bytereader.pyx":231
 *                 self.seek(0, 2)
 *                 size = self.tell()
 *                 self.seek(pos)             # <<<<<<<<<<<<<<
 *                 return size
 *         ELSE:
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, __pyx_v_pos, 0, NULL);

    /* "mmfparser\bytereader.pyx":232
 *                 size = self.tell()
 *                 self.seek(pos)
 *                 return size             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __pyx_r = __pyx_v_size;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":241
 *                 return size
 * 
 *         return self.data_size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_r = __pyx_v_self->data_size;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":222
 *         return data
 * 
 *     cpdef size_t size(self):             # <<<<<<<<<<<<<<
 *         cdef int pos
 *         cdef int size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("mmfparser.bytereader.ByteReader.size", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_13size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_13size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_12size(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_12size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_9mmfparser_10bytereader_10ByteReader_size(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":243
 *         return self.data_size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9mmfparser_10bytereader_10ByteReader_15__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9mmfparser_10bytereader_10ByteReader_15__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_14__len__(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9mmfparser_10bytereader_10ByteReader_14__len__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmfparser\bytereader.pyx":244
 * 
 *     def __len__(self):
 *         return self.size()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_r = __pyx_f_9mmfparser_10bytereader_10ByteReader_size(__pyx_v_self, 0);
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":243
 *         return self.data_size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":246
 *         return self.size()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.data()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_17__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_17__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_16__str__(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_16__str__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "mmfparser\bytereader.pyx":247
 * 
 *     def __str__(self):
 *         return self.data()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_data(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":246
 *         return self.size()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.data()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":249
 *         return self.data()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(str(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_19__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_19__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_18__repr__(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_18__repr__(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "mmfparser\bytereader.pyx":250
 * 
 *     def __repr__(self):
 *         return repr(str(self))             # <<<<<<<<<<<<<<
 * 
 *     cpdef short readByte(self, bint asUnsigned = False) except? -10:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Repr(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":249
 *         return self.data()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(str(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":252
 *         return repr(str(self))
 * 
 *     cpdef short readByte(self, bint asUnsigned = False) except? -10:             # <<<<<<<<<<<<<<
 *         cdef char value
 *         self._read(&value, 1)
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_21readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static short __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args) {
  int __pyx_v_asUnsigned = ((int)0);
  char __pyx_v_value;
  short __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readByte", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_asUnsigned = __pyx_optional_args->asUnsigned;
    }
  }

  /* "mmfparser\bytereader.pyx":254
 *     cpdef short readByte(self, bint asUnsigned = False) except? -10:
 *         cdef char value
 *         self._read(&value, 1)             # <<<<<<<<<<<<<<
 *         if asUnsigned:
 *             return <unsigned char>value
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_value), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":255
 *         cdef char value
 *         self._read(&value, 1)
 *         if asUnsigned:             # <<<<<<<<<<<<<<
 *             return <unsigned char>value
 *         return value
 */
  __pyx_t_1 = (__pyx_v_asUnsigned != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":256
 *         self._read(&value, 1)
 *         if asUnsigned:
 *             return <unsigned char>value             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
    __pyx_r = ((unsigned char)__pyx_v_value);
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":257
 *         if asUnsigned:
 *             return <unsigned char>value
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef int readShort(self, bint asUnsigned = False) except? -10:
 */
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":252
 *         return repr(str(self))
 * 
 *     cpdef short readByte(self, bint asUnsigned = False) except? -10:             # <<<<<<<<<<<<<<
 *         cdef char value
 *         self._read(&value, 1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -10;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_21readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_21readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_asUnsigned;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readByte (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asUnsigned,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readByte") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_asUnsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_asUnsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asUnsigned = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readByte", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_20readByte(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_20readByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readByte", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = __pyx_v_asUnsigned;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->readByte(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":259
 *         return value
 * 
 *     cpdef int readShort(self, bint asUnsigned = False) except? -10:             # <<<<<<<<<<<<<<
 *         cdef short value
 *         cdef unsigned char byte1, byte2
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_23readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_readShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args) {
  int __pyx_v_asUnsigned = ((int)0);
  short __pyx_v_value;
  unsigned char __pyx_v_byte1;
  unsigned char __pyx_v_byte2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readShort", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_asUnsigned = __pyx_optional_args->asUnsigned;
    }
  }

  /* "mmfparser\bytereader.pyx":262
 *         cdef short value
 *         cdef unsigned char byte1, byte2
 *         self._read(&byte1, 1)             # <<<<<<<<<<<<<<
 *         self._read(&byte2, 1)
 *         value = (byte2 << 8) | byte1
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte1), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":263
 *         cdef unsigned char byte1, byte2
 *         self._read(&byte1, 1)
 *         self._read(&byte2, 1)             # <<<<<<<<<<<<<<
 *         value = (byte2 << 8) | byte1
 *         if asUnsigned:
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte2), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":264
 *         self._read(&byte1, 1)
 *         self._read(&byte2, 1)
 *         value = (byte2 << 8) | byte1             # <<<<<<<<<<<<<<
 *         if asUnsigned:
 *             return <unsigned short>value
 */
  __pyx_v_value = ((__pyx_v_byte2 << 8) | __pyx_v_byte1);

  /* "mmfparser\bytereader.pyx":265
 *         self._read(&byte2, 1)
 *         value = (byte2 << 8) | byte1
 *         if asUnsigned:             # <<<<<<<<<<<<<<
 *             return <unsigned short>value
 *         return value
 */
  __pyx_t_1 = (__pyx_v_asUnsigned != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":266
 *         value = (byte2 << 8) | byte1
 *         if asUnsigned:
 *             return <unsigned short>value             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
    __pyx_r = ((unsigned short)__pyx_v_value);
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":267
 *         if asUnsigned:
 *             return <unsigned short>value
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef float readFloat(self) except? -10:
 */
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":259
 *         return value
 * 
 *     cpdef int readShort(self, bint asUnsigned = False) except? -10:             # <<<<<<<<<<<<<<
 *         cdef short value
 *         cdef unsigned char byte1, byte2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -10;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_23readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_23readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_asUnsigned;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readShort (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asUnsigned,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readShort") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_asUnsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_asUnsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asUnsigned = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readShort", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_22readShort(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_22readShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readShort", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = __pyx_v_asUnsigned;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->readShort(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":269
 *         return value
 * 
 *     cpdef float readFloat(self) except? -10:             # <<<<<<<<<<<<<<
 *         cdef float value
 *         self._read(&value, 4)
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_25readFloat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static float __pyx_f_9mmfparser_10bytereader_10ByteReader_readFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  float __pyx_v_value;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readFloat", 0);

  /* "mmfparser\bytereader.pyx":271
 *     cpdef float readFloat(self) except? -10:
 *         cdef float value
 *         self._read(&value, 4)             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_value), 4); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":272
 *         cdef float value
 *         self._read(&value, 4)
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef double readDouble(self) except? -10:
 */
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":269
 *         return value
 * 
 *     cpdef float readFloat(self) except? -10:             # <<<<<<<<<<<<<<
 *         cdef float value
 *         self._read(&value, 4)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -10.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_25readFloat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_25readFloat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_24readFloat(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_24readFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readFloat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readFloat(__pyx_v_self, 1); if (unlikely(__pyx_t_1 == -10.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":274
 *         return value
 * 
 *     cpdef double readDouble(self) except? -10:             # <<<<<<<<<<<<<<
 *         cdef double value
 *         self._read(&value, 8)
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_27readDouble(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static double __pyx_f_9mmfparser_10bytereader_10ByteReader_readDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_value;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readDouble", 0);

  /* "mmfparser\bytereader.pyx":276
 *     cpdef double readDouble(self) except? -10:
 *         cdef double value
 *         self._read(&value, 8)             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_value), 8); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":277
 *         cdef double value
 *         self._read(&value, 8)
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef readInt(self, bint asUnsigned = False):
 */
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":274
 *         return value
 * 
 *     cpdef double readDouble(self) except? -10:             # <<<<<<<<<<<<<<
 *         cdef double value
 *         self._read(&value, 8)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readDouble", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -10.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_27readDouble(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_27readDouble(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readDouble (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_26readDouble(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_26readDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readDouble", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readDouble(__pyx_v_self, 1); if (unlikely(__pyx_t_1 == -10.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readDouble", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":279
 *         return value
 * 
 *     cpdef readInt(self, bint asUnsigned = False):             # <<<<<<<<<<<<<<
 *         cdef int value
 *         cdef unsigned char byte1, byte2, byte3, byte4
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_29readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args) {
  int __pyx_v_asUnsigned = ((int)0);
  int __pyx_v_value;
  unsigned char __pyx_v_byte1;
  unsigned char __pyx_v_byte2;
  unsigned char __pyx_v_byte3;
  unsigned char __pyx_v_byte4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readInt", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_asUnsigned = __pyx_optional_args->asUnsigned;
    }
  }

  /* "mmfparser\bytereader.pyx":282
 *         cdef int value
 *         cdef unsigned char byte1, byte2, byte3, byte4
 *         self._read(&byte1, 1)             # <<<<<<<<<<<<<<
 *         self._read(&byte2, 1)
 *         self._read(&byte3, 1)
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte1), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":283
 *         cdef unsigned char byte1, byte2, byte3, byte4
 *         self._read(&byte1, 1)
 *         self._read(&byte2, 1)             # <<<<<<<<<<<<<<
 *         self._read(&byte3, 1)
 *         self._read(&byte4, 1)
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte2), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":284
 *         self._read(&byte1, 1)
 *         self._read(&byte2, 1)
 *         self._read(&byte3, 1)             # <<<<<<<<<<<<<<
 *         self._read(&byte4, 1)
 *         value = ((byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1)
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte3), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":285
 *         self._read(&byte2, 1)
 *         self._read(&byte3, 1)
 *         self._read(&byte4, 1)             # <<<<<<<<<<<<<<
 *         value = ((byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1)
 *         if asUnsigned:
 */
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader__read(__pyx_v_self, (&__pyx_v_byte4), 1); if (unlikely(__pyx_t_1 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":286
 *         self._read(&byte3, 1)
 *         self._read(&byte4, 1)
 *         value = ((byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1)             # <<<<<<<<<<<<<<
 *         if asUnsigned:
 *             return <unsigned int>value
 */
  __pyx_v_value = ((((__pyx_v_byte4 << 24) | (__pyx_v_byte3 << 16)) | (__pyx_v_byte2 << 8)) | __pyx_v_byte1);

  /* "mmfparser\bytereader.pyx":287
 *         self._read(&byte4, 1)
 *         value = ((byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1)
 *         if asUnsigned:             # <<<<<<<<<<<<<<
 *             return <unsigned int>value
 *         return value
 */
  __pyx_t_1 = (__pyx_v_asUnsigned != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":288
 *         value = ((byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1)
 *         if asUnsigned:
 *             return <unsigned int>value             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(((unsigned int)__pyx_v_value)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":289
 *         if asUnsigned:
 *             return <unsigned int>value
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes readString(self, size=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":279
 *         return value
 * 
 *     cpdef readInt(self, bint asUnsigned = False):             # <<<<<<<<<<<<<<
 *         cdef int value
 *         cdef unsigned char byte1, byte2, byte3, byte4
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_29readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_29readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_asUnsigned;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readInt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asUnsigned,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_asUnsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_asUnsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asUnsigned = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readInt", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_28readInt(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_28readInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, int __pyx_v_asUnsigned) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readInt", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = __pyx_v_asUnsigned;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->readInt(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":291
 *         return value
 * 
 *     cpdef bytes readString(self, size=None):             # <<<<<<<<<<<<<<
 *         if size is not None:
 *             return self.readReader(size).readString()
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_31readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args) {
  PyObject *__pyx_v_size = ((PyObject *)Py_None);
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readString", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }

  /* "mmfparser\bytereader.pyx":292
 * 
 *     cpdef bytes readString(self, size=None):
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             return self.readReader(size).readString()
 *         data = ''
 */
  __pyx_t_1 = (__pyx_v_size != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":293
 *     cpdef bytes readString(self, size=None):
 *         if size is not None:
 *             return self.readReader(size).readString()             # <<<<<<<<<<<<<<
 *         data = ''
 *         while 1:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = ((PyObject *)__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(__pyx_v_self, __pyx_t_3, 0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_4), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":294
 *         if size is not None:
 *             return self.readReader(size).readString()
 *         data = ''             # <<<<<<<<<<<<<<
 *         while 1:
 *             c = self.read(1)
 */
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_v_data = __pyx_kp_s_;

  /* "mmfparser\bytereader.pyx":295
 *             return self.readReader(size).readString()
 *         data = ''
 *         while 1:             # <<<<<<<<<<<<<<
 *             c = self.read(1)
 *             if c in ('\x00', ''):
 */
  while (1) {

    /* "mmfparser\bytereader.pyx":296
 *         data = ''
 *         while 1:
 *             c = self.read(1)             # <<<<<<<<<<<<<<
 *             if c in ('\x00', ''):
 *                 break
 */
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.size = 1;
    __pyx_t_5 = __pyx_f_9mmfparser_10bytereader_10ByteReader_read(__pyx_v_self, 0, &__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mmfparser\bytereader.pyx":297
 *         while 1:
 *             c = self.read(1)
 *             if c in ('\x00', ''):             # <<<<<<<<<<<<<<
 *                 break
 *             data += c
 */
    __Pyx_INCREF(__pyx_v_c);
    __pyx_t_5 = __pyx_v_c;
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __pyx_t_1;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "mmfparser\bytereader.pyx":298
 *             c = self.read(1)
 *             if c in ('\x00', ''):
 *                 break             # <<<<<<<<<<<<<<
 *             data += c
 *         return data
 */
      goto __pyx_L5_break;
    }

    /* "mmfparser\bytereader.pyx":299
 *             if c in ('\x00', ''):
 *                 break
 *             data += c             # <<<<<<<<<<<<<<
 *         return data
 * 
 */
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_data, __pyx_v_c); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L5_break:;

  /* "mmfparser\bytereader.pyx":300
 *                 break
 *             data += c
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     cpdef unicode readUnicodeString(self, size=None):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_data)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = ((PyObject*)__pyx_v_data);
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":291
 *         return value
 * 
 *     cpdef bytes readString(self, size=None):             # <<<<<<<<<<<<<<
 *         if size is not None:
 *             return self.readReader(size).readString()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_31readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_31readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readString", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_30readString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_30readString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.size = __pyx_v_size;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->readString(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":302
 *         return data
 * 
 *     cpdef unicode readUnicodeString(self, size=None):             # <<<<<<<<<<<<<<
 *         if size is not None:
 *             return self.readReader(size*2).readUnicodeString()
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_33readUnicodeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args) {
  PyObject *__pyx_v_size = ((PyObject *)Py_None);
  CYTHON_UNUSED int __pyx_v_currentPosition;
  CYTHON_UNUSED int __pyx_v_endPosition;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readUnicodeString", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }

  /* "mmfparser\bytereader.pyx":303
 * 
 *     cpdef unicode readUnicodeString(self, size=None):
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             return self.readReader(size*2).readUnicodeString()
 * 
 */
  __pyx_t_1 = (__pyx_v_size != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":304
 *     cpdef unicode readUnicodeString(self, size=None):
 *         if size is not None:
 *             return self.readReader(size*2).readUnicodeString()             # <<<<<<<<<<<<<<
 * 
 *         cdef int currentPosition = self.tell()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_size, __pyx_int_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(__pyx_v_self, __pyx_t_4, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readUnicodeString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_3), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":306
 *             return self.readReader(size*2).readUnicodeString()
 * 
 *         cdef int currentPosition = self.tell()             # <<<<<<<<<<<<<<
 *         cdef int endPosition
 *         data = ''
 */
  __pyx_v_currentPosition = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

  /* "mmfparser\bytereader.pyx":308
 *         cdef int currentPosition = self.tell()
 *         cdef int endPosition
 *         data = ''             # <<<<<<<<<<<<<<
 *         while 1:
 *             endPosition = self.tell()
 */
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_v_data = __pyx_kp_s_;

  /* "mmfparser\bytereader.pyx":309
 *         cdef int endPosition
 *         data = ''
 *         while 1:             # <<<<<<<<<<<<<<
 *             endPosition = self.tell()
 *             c = self.read(2)
 */
  while (1) {

    /* "mmfparser\bytereader.pyx":310
 *         data = ''
 *         while 1:
 *             endPosition = self.tell()             # <<<<<<<<<<<<<<
 *             c = self.read(2)
 *             if len(c) != 2:
 */
    __pyx_v_endPosition = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

    /* "mmfparser\bytereader.pyx":311
 *         while 1:
 *             endPosition = self.tell()
 *             c = self.read(2)             # <<<<<<<<<<<<<<
 *             if len(c) != 2:
 *                 break
 */
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.size = 2;
    __pyx_t_5 = __pyx_f_9mmfparser_10bytereader_10ByteReader_read(__pyx_v_self, 0, &__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mmfparser\bytereader.pyx":312
 *             endPosition = self.tell()
 *             c = self.read(2)
 *             if len(c) != 2:             # <<<<<<<<<<<<<<
 *                 break
 *             if c == '\x00\x00':
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_c); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_7 != 2) != 0);
    if (__pyx_t_2) {

      /* "mmfparser\bytereader.pyx":313
 *             c = self.read(2)
 *             if len(c) != 2:
 *                 break             # <<<<<<<<<<<<<<
 *             if c == '\x00\x00':
 *                 break
 */
      goto __pyx_L5_break;
    }

    /* "mmfparser\bytereader.pyx":314
 *             if len(c) != 2:
 *                 break
 *             if c == '\x00\x00':             # <<<<<<<<<<<<<<
 *                 break
 *             data += c
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_c, __pyx_kp_s__3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "mmfparser\bytereader.pyx":315
 *                 break
 *             if c == '\x00\x00':
 *                 break             # <<<<<<<<<<<<<<
 *             data += c
 * 
 */
      goto __pyx_L5_break;
    }

    /* "mmfparser\bytereader.pyx":316
 *             if c == '\x00\x00':
 *                 break
 *             data += c             # <<<<<<<<<<<<<<
 * 
 *         return data.decode('utf-16-le')
 */
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_data, __pyx_v_c); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L5_break:;

  /* "mmfparser\bytereader.pyx":318
 *             data += c
 * 
 *         return data.decode('utf-16-le')             # <<<<<<<<<<<<<<
 * 
 *     cpdef tuple readColor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_decode); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":302
 *         return data
 * 
 *     cpdef unicode readUnicodeString(self, size=None):             # <<<<<<<<<<<<<<
 *         if size is not None:
 *             return self.readReader(size*2).readUnicodeString()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readUnicodeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_33readUnicodeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_33readUnicodeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readUnicodeString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readUnicodeString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readUnicodeString", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readUnicodeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_32readUnicodeString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_32readUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readUnicodeString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.size = __pyx_v_size;
  __pyx_t_1 = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader->readUnicodeString(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readUnicodeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":320
 *         return data.decode('utf-16-le')
 * 
 *     cpdef tuple readColor(self):             # <<<<<<<<<<<<<<
 *         cdef int currentPosition = self.tell()
 *         cdef short r = self.readByte(True)
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_35readColor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_9mmfparser_10bytereader_10ByteReader_readColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  CYTHON_UNUSED int __pyx_v_currentPosition;
  short __pyx_v_r;
  short __pyx_v_g;
  short __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readColor", 0);

  /* "mmfparser\bytereader.pyx":321
 * 
 *     cpdef tuple readColor(self):
 *         cdef int currentPosition = self.tell()             # <<<<<<<<<<<<<<
 *         cdef short r = self.readByte(True)
 *         cdef short g = self.readByte(True)
 */
  __pyx_v_currentPosition = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

  /* "mmfparser\bytereader.pyx":322
 *     cpdef tuple readColor(self):
 *         cdef int currentPosition = self.tell()
 *         cdef short r = self.readByte(True)             # <<<<<<<<<<<<<<
 *         cdef short g = self.readByte(True)
 *         cdef short b = self.readByte(True)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(__pyx_v_self, 0, &__pyx_t_2); if (unlikely(__pyx_t_1 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = __pyx_t_1;

  /* "mmfparser\bytereader.pyx":323
 *         cdef int currentPosition = self.tell()
 *         cdef short r = self.readByte(True)
 *         cdef short g = self.readByte(True)             # <<<<<<<<<<<<<<
 *         cdef short b = self.readByte(True)
 *         self.skipBytes(1)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(__pyx_v_self, 0, &__pyx_t_2); if (unlikely(__pyx_t_1 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_g = __pyx_t_1;

  /* "mmfparser\bytereader.pyx":324
 *         cdef short r = self.readByte(True)
 *         cdef short g = self.readByte(True)
 *         cdef short b = self.readByte(True)             # <<<<<<<<<<<<<<
 *         self.skipBytes(1)
 *         return (r, g, b)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readByte(__pyx_v_self, 0, &__pyx_t_2); if (unlikely(__pyx_t_1 == -10 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_b = __pyx_t_1;

  /* "mmfparser\bytereader.pyx":325
 *         cdef short g = self.readByte(True)
 *         cdef short b = self.readByte(True)
 *         self.skipBytes(1)             # <<<<<<<<<<<<<<
 *         return (r, g, b)
 * 
 */
  __pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes(__pyx_v_self, 1, 0);

  /* "mmfparser\bytereader.pyx":326
 *         cdef short b = self.readByte(True)
 *         self.skipBytes(1)
 *         return (r, g, b)             # <<<<<<<<<<<<<<
 * 
 *     cpdef ByteReader readReader(self, size_t size):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_r); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_short(__pyx_v_g); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_b); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":320
 *         return data.decode('utf-16-le')
 * 
 *     cpdef tuple readColor(self):             # <<<<<<<<<<<<<<
 *         cdef int currentPosition = self.tell()
 *         cdef short r = self.readByte(True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_35readColor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_35readColor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readColor (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_34readColor(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_34readColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readColor", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readColor(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":328
 *         return (r, g, b)
 * 
 *     cpdef ByteReader readReader(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef ByteReader reader
 * 
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_37readReader(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader = 0;
  PyObject *__pyx_v_data = NULL;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readReader", 0);

  /* "mmfparser\bytereader.pyx":332
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 data = self.read(size)
 *                 reader = ByteReader(data, 0, len(data))
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":333
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 data = self.read(size)             # <<<<<<<<<<<<<<
 *                 reader = ByteReader(data, 0, len(data))
 *                 return reader
 */
    __pyx_t_3.__pyx_n = 1;
    __pyx_t_3.size = __pyx_v_size;
    __pyx_t_2 = __pyx_f_9mmfparser_10bytereader_10ByteReader_read(__pyx_v_self, 0, &__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_data = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":334
 *             if self.python_fp:
 *                 data = self.read(size)
 *                 reader = ByteReader(data, 0, len(data))             # <<<<<<<<<<<<<<
 *                 return reader
 *         ELSE:
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_10bytereader_ByteReader)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":335
 *                 data = self.read(size)
 *                 reader = ByteReader(data, 0, len(data))
 *                 return reader             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_reader));
    __pyx_r = __pyx_v_reader;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":342
 *                 return reader
 * 
 *         check_available(self, size)             # <<<<<<<<<<<<<<
 *         self.shared = True
 *         reader = ByteReader(self.original, self.pos + self.start, size)
 */
  __pyx_t_6 = __pyx_f_9mmfparser_10bytereader_check_available(__pyx_v_self, __pyx_v_size); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":343
 * 
 *         check_available(self, size)
 *         self.shared = True             # <<<<<<<<<<<<<<
 *         reader = ByteReader(self.original, self.pos + self.start, size)
 *         self.pos += size
 */
  __pyx_v_self->shared = 1;

  /* "mmfparser\bytereader.pyx":344
 *         check_available(self, size)
 *         self.shared = True
 *         reader = ByteReader(self.original, self.pos + self.start, size)             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return reader
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int((__pyx_v_self->pos + __pyx_v_self->start)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_self->original);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_self->original);
  __Pyx_GIVEREF(__pyx_v_self->original);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9mmfparser_10bytereader_ByteReader)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "mmfparser\bytereader.pyx":345
 *         self.shared = True
 *         reader = ByteReader(self.original, self.pos + self.start, size)
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return reader
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "mmfparser\bytereader.pyx":346
 *         reader = ByteReader(self.original, self.pos + self.start, size)
 *         self.pos += size
 *         return reader             # <<<<<<<<<<<<<<
 * 
 *     def readIntString(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_reader));
  __pyx_r = __pyx_v_reader;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":328
 *         return (r, g, b)
 * 
 *     cpdef ByteReader readReader(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef ByteReader reader
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readReader", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_37readReader(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_37readReader(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readReader (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readReader", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_36readReader(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_36readReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readReader", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readReader", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":348
 *         return reader
 * 
 *     def readIntString(self):             # <<<<<<<<<<<<<<
 *         cdef size_t length = self.readInt(True)
 *         return self.read(length)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_39readIntString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_39readIntString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readIntString (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_38readIntString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_38readIntString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  size_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt __pyx_t_2;
  size_t __pyx_t_3;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readIntString", 0);

  /* "mmfparser\bytereader.pyx":349
 * 
 *     def readIntString(self):
 *         cdef size_t length = self.readInt(True)             # <<<<<<<<<<<<<<
 *         return self.read(length)
 * 
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.asUnsigned = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_readInt(__pyx_v_self, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_length = __pyx_t_3;

  /* "mmfparser\bytereader.pyx":350
 *     def readIntString(self):
 *         cdef size_t length = self.readInt(True)
 *         return self.read(length)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint write(self, bytes data):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.size = __pyx_v_length;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_read(__pyx_v_self, 0, &__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":348
 *         return reader
 * 
 *     def readIntString(self):             # <<<<<<<<<<<<<<
 *         cdef size_t length = self.readInt(True)
 *         return self.read(length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.readIntString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":352
 *         return self.read(length)
 * 
 *     cpdef bint write(self, bytes data):             # <<<<<<<<<<<<<<
 *         cdef size_t size = len(data)
 *         if size == 0:
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_41write(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_data, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_size;
  char *__pyx_v_c_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "mmfparser\bytereader.pyx":353
 * 
 *     cpdef bint write(self, bytes data):
 *         cdef size_t size = len(data)             # <<<<<<<<<<<<<<
 *         if size == 0:
 *             return False
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_1;

  /* "mmfparser\bytereader.pyx":354
 *     cpdef bint write(self, bytes data):
 *         cdef size_t size = len(data)
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef char * c_data
 */
  __pyx_t_2 = ((__pyx_v_size == 0) != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":355
 *         cdef size_t size = len(data)
 *         if size == 0:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef char * c_data
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":359
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 self.python_fp.write(data)
 *                 return True
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":360
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 self.python_fp.write(data)             # <<<<<<<<<<<<<<
 *                 return True
 *         ELSE:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_data);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_data);
      __Pyx_GIVEREF(__pyx_v_data);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mmfparser\bytereader.pyx":361
 *             if self.python_fp:
 *                 self.python_fp.write(data)
 *                 return True             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":367
 *                 return True
 * 
 *         ensure_write_size(self, size)             # <<<<<<<<<<<<<<
 *         c_data = data
 *         memcpy((self.buffer + self.pos), c_data, size)
 */
  __pyx_f_9mmfparser_10bytereader_ensure_write_size(__pyx_v_self, __pyx_v_size);

  /* "mmfparser\bytereader.pyx":368
 * 
 *         ensure_write_size(self, size)
 *         c_data = data             # <<<<<<<<<<<<<<
 *         memcpy((self.buffer + self.pos), c_data, size)
 *         self.pos += size
 */
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_data); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_data = __pyx_t_7;

  /* "mmfparser\bytereader.pyx":369
 *         ensure_write_size(self, size)
 *         c_data = data
 *         memcpy((self.buffer + self.pos), c_data, size)             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return True
 */
  memcpy((__pyx_v_self->buffer + __pyx_v_self->pos), __pyx_v_c_data, __pyx_v_size);

  /* "mmfparser\bytereader.pyx":370
 *         c_data = data
 *         memcpy((self.buffer + self.pos), c_data, size)
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "mmfparser\bytereader.pyx":371
 *         memcpy((self.buffer + self.pos), c_data, size)
 *         self.pos += size
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint write_size(self, char * data, size_t size):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":352
 *         return self.read(length)
 * 
 *     cpdef bint write(self, bytes data):             # <<<<<<<<<<<<<<
 *         cdef size_t size = len(data)
 *         if size == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("mmfparser.bytereader.ByteReader.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_41write(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_41write(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_40write(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject*)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_40write(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, __pyx_v_data, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":373
 *         return True
 * 
 *     cpdef bint write_size(self, char * data, size_t size):             # <<<<<<<<<<<<<<
 *         if size == 0:
 *             return False
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_43write_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_size", 0);

  /* "mmfparser\bytereader.pyx":374
 * 
 *     cpdef bint write_size(self, char * data, size_t size):
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = ((__pyx_v_size == 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":375
 *     cpdef bint write_size(self, char * data, size_t size):
 *         if size == 0:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         IF IS_PYPY:
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":378
 * 
 *         IF IS_PYPY:
 *             if self.python_fp:             # <<<<<<<<<<<<<<
 *                 self.python_fp.write(buffer(data, 0, size))
 *                 return True
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":379
 *         IF IS_PYPY:
 *             if self.python_fp:
 *                 self.python_fp.write(buffer(data, 0, size))             # <<<<<<<<<<<<<<
 *                 return True
 *         ELSE:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_data); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_buffer, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mmfparser\bytereader.pyx":380
 *             if self.python_fp:
 *                 self.python_fp.write(buffer(data, 0, size))
 *                 return True             # <<<<<<<<<<<<<<
 *         ELSE:
 *             if self.fp != NULL:
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":386
 *                 return True
 * 
 *         ensure_write_size(self, size)             # <<<<<<<<<<<<<<
 *         memcpy((self.buffer + self.pos), data, size)
 *         self.pos += size
 */
  __pyx_f_9mmfparser_10bytereader_ensure_write_size(__pyx_v_self, __pyx_v_size);

  /* "mmfparser\bytereader.pyx":387
 * 
 *         ensure_write_size(self, size)
 *         memcpy((self.buffer + self.pos), data, size)             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return True
 */
  memcpy((__pyx_v_self->buffer + __pyx_v_self->pos), __pyx_v_data, __pyx_v_size);

  /* "mmfparser\bytereader.pyx":388
 *         ensure_write_size(self, size)
 *         memcpy((self.buffer + self.pos), data, size)
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "mmfparser\bytereader.pyx":389
 *         memcpy((self.buffer + self.pos), data, size)
 *         self.pos += size
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def writeByte(self, value, asUnsigned = False):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":373
 *         return True
 * 
 *     cpdef bint write_size(self, char * data, size_t size):             # <<<<<<<<<<<<<<
 *         if size == 0:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("mmfparser.bytereader.ByteReader.write_size", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_43write_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_43write_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_data;
  size_t __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_size", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_size") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_data = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_data) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_size", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.write_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_42write_size(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_data, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_42write_size(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, char *__pyx_v_data, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_9mmfparser_10bytereader_10ByteReader_write_size(__pyx_v_self, __pyx_v_data, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.write_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":391
 *         return True
 * 
 *     def writeByte(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = UBYTE if asUnsigned else BYTE
 *         self.writeStruct(format, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_45writeByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_45writeByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_asUnsigned = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeByte (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_asUnsigned,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeByte") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_asUnsigned = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeByte", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_44writeByte(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_value, __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_44writeByte(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned) {
  PyObject *__pyx_v_format = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeByte", 0);

  /* "mmfparser\bytereader.pyx":392
 * 
 *     def writeByte(self, value, asUnsigned = False):
 *         format = UBYTE if asUnsigned else BYTE             # <<<<<<<<<<<<<<
 *         self.writeStruct(format, value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asUnsigned); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_format = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":393
 *     def writeByte(self, value, asUnsigned = False):
 *         format = UBYTE if asUnsigned else BYTE
 *         self.writeStruct(format, value)             # <<<<<<<<<<<<<<
 * 
 *     def writeShort(self, value, asUnsigned = False):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeStruct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_format);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_format);
  __Pyx_GIVEREF(__pyx_v_format);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":391
 *         return True
 * 
 *     def writeByte(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = UBYTE if asUnsigned else BYTE
 *         self.writeStruct(format, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":395
 *         self.writeStruct(format, value)
 * 
 *     def writeShort(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = USHORT if asUnsigned else SHORT
 *         self.writeStruct(format, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_47writeShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_47writeShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_asUnsigned = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeShort (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_asUnsigned,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeShort") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_asUnsigned = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeShort", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_46writeShort(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_value, __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_46writeShort(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned) {
  PyObject *__pyx_v_format = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeShort", 0);

  /* "mmfparser\bytereader.pyx":396
 * 
 *     def writeShort(self, value, asUnsigned = False):
 *         format = USHORT if asUnsigned else SHORT             # <<<<<<<<<<<<<<
 *         self.writeStruct(format, value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asUnsigned); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_format = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":397
 *     def writeShort(self, value, asUnsigned = False):
 *         format = USHORT if asUnsigned else SHORT
 *         self.writeStruct(format, value)             # <<<<<<<<<<<<<<
 * 
 *     def writeFloat(self, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeStruct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_format);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_format);
  __Pyx_GIVEREF(__pyx_v_format);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":395
 *         self.writeStruct(format, value)
 * 
 *     def writeShort(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = USHORT if asUnsigned else SHORT
 *         self.writeStruct(format, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":399
 *         self.writeStruct(format, value)
 * 
 *     def writeFloat(self, value):             # <<<<<<<<<<<<<<
 *         self.writeStruct(FLOAT, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_49writeFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_49writeFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_48writeFloat(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_48writeFloat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeFloat", 0);

  /* "mmfparser\bytereader.pyx":400
 * 
 *     def writeFloat(self, value):
 *         self.writeStruct(FLOAT, value)             # <<<<<<<<<<<<<<
 * 
 *     def writeDouble(self, value):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeStruct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":399
 *         self.writeStruct(format, value)
 * 
 *     def writeFloat(self, value):             # <<<<<<<<<<<<<<
 *         self.writeStruct(FLOAT, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":402
 *         self.writeStruct(FLOAT, value)
 * 
 *     def writeDouble(self, value):             # <<<<<<<<<<<<<<
 *         self.writeStruct(DOUBLE, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_51writeDouble(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_51writeDouble(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeDouble (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_50writeDouble(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_50writeDouble(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeDouble", 0);

  /* "mmfparser\bytereader.pyx":403
 * 
 *     def writeDouble(self, value):
 *         self.writeStruct(DOUBLE, value)             # <<<<<<<<<<<<<<
 * 
 *     def writeInt(self, value, asUnsigned = False):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeStruct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":402
 *         self.writeStruct(FLOAT, value)
 * 
 *     def writeDouble(self, value):             # <<<<<<<<<<<<<<
 *         self.writeStruct(DOUBLE, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeDouble", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":405
 *         self.writeStruct(DOUBLE, value)
 * 
 *     def writeInt(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = UINT if asUnsigned else INT
 *         self.writeStruct(format, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_53writeInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_53writeInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_asUnsigned = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeInt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_asUnsigned,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asUnsigned);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_asUnsigned = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeInt", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_52writeInt(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_value, __pyx_v_asUnsigned);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_52writeInt(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_asUnsigned) {
  PyObject *__pyx_v_format = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeInt", 0);

  /* "mmfparser\bytereader.pyx":406
 * 
 *     def writeInt(self, value, asUnsigned = False):
 *         format = UINT if asUnsigned else INT             # <<<<<<<<<<<<<<
 *         self.writeStruct(format, value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asUnsigned); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_format = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":407
 *     def writeInt(self, value, asUnsigned = False):
 *         format = UINT if asUnsigned else INT
 *         self.writeStruct(format, value)             # <<<<<<<<<<<<<<
 * 
 *     def writeString(self, value, size_t size = -1):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeStruct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_format);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_format);
  __Pyx_GIVEREF(__pyx_v_format);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":405
 *         self.writeStruct(DOUBLE, value)
 * 
 *     def writeInt(self, value, asUnsigned = False):             # <<<<<<<<<<<<<<
 *         format = UINT if asUnsigned else INT
 *         self.writeStruct(format, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":409
 *         self.writeStruct(format, value)
 * 
 *     def writeString(self, value, size_t size = -1):             # <<<<<<<<<<<<<<
 *         cdef unsigned int currentPosition
 *         if size == -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_55writeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_55writeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  size_t __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    if (values[1]) {
      __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((size_t)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeString", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_54writeString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_value, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_54writeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, size_t __pyx_v_size) {
  unsigned int __pyx_v_currentPosition;
  CYTHON_UNUSED size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeString", 0);

  /* "mmfparser\bytereader.pyx":411
 *     def writeString(self, value, size_t size = -1):
 *         cdef unsigned int currentPosition
 *         if size == -1:             # <<<<<<<<<<<<<<
 *             self.write(value + "\x00")
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_size == -1) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":412
 *         cdef unsigned int currentPosition
 *         if size == -1:
 *             self.write(value + "\x00")             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(size):
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_value, __pyx_kp_s__2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_2), 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mmfparser\bytereader.pyx":414
 *             self.write(value + "\x00")
 *         else:
 *             for i in range(size):             # <<<<<<<<<<<<<<
 *                 self.writeByte(0)
 *             currentPosition = self.tell()
 */
    __pyx_t_3 = __pyx_v_size;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "mmfparser\bytereader.pyx":415
 *         else:
 *             for i in range(size):
 *                 self.writeByte(0)             # <<<<<<<<<<<<<<
 *             currentPosition = self.tell()
 *             self.rewind(size)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "mmfparser\bytereader.pyx":416
 *             for i in range(size):
 *                 self.writeByte(0)
 *             currentPosition = self.tell()             # <<<<<<<<<<<<<<
 *             self.rewind(size)
 *             self.write(value[:size-1])
 */
    __pyx_v_currentPosition = __pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0);

    /* "mmfparser\bytereader.pyx":417
 *                 self.writeByte(0)
 *             currentPosition = self.tell()
 *             self.rewind(size)             # <<<<<<<<<<<<<<
 *             self.write(value[:size-1])
 *             self.seek(currentPosition)
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_rewind(__pyx_v_self, __pyx_v_size, 0);

    /* "mmfparser\bytereader.pyx":418
 *             currentPosition = self.tell()
 *             self.rewind(size)
 *             self.write(value[:size-1])             # <<<<<<<<<<<<<<
 *             self.seek(currentPosition)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_value, 0, (__pyx_v_size - 1), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyBytes_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_5), 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mmfparser\bytereader.pyx":419
 *             self.rewind(size)
 *             self.write(value[:size-1])
 *             self.seek(currentPosition)             # <<<<<<<<<<<<<<
 * 
 *     def writeUnicodeString(self, value):
 */
    __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, __pyx_v_currentPosition, 0, NULL);
  }
  __pyx_L3:;

  /* "mmfparser\bytereader.pyx":409
 *         self.writeStruct(format, value)
 * 
 *     def writeString(self, value, size_t size = -1):             # <<<<<<<<<<<<<<
 *         cdef unsigned int currentPosition
 *         if size == -1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":421
 *             self.seek(currentPosition)
 * 
 *     def writeUnicodeString(self, value):             # <<<<<<<<<<<<<<
 *         self.write(value.encode('utf-16-le') + "\x00\x00")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_57writeUnicodeString(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_57writeUnicodeString(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeUnicodeString (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_56writeUnicodeString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_56writeUnicodeString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeUnicodeString", 0);

  /* "mmfparser\bytereader.pyx":422
 * 
 *     def writeUnicodeString(self, value):
 *         self.write(value.encode('utf-16-le') + "\x00\x00")             # <<<<<<<<<<<<<<
 * 
 *     def writeColor(self, colorTuple):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_1), 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":421
 *             self.seek(currentPosition)
 * 
 *     def writeUnicodeString(self, value):             # <<<<<<<<<<<<<<
 *         self.write(value.encode('utf-16-le') + "\x00\x00")
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeUnicodeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":424
 *         self.write(value.encode('utf-16-le') + "\x00\x00")
 * 
 *     def writeColor(self, colorTuple):             # <<<<<<<<<<<<<<
 *         r, g, b = colorTuple
 *         self.writeByte(r, True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_59writeColor(PyObject *__pyx_v_self, PyObject *__pyx_v_colorTuple); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_59writeColor(PyObject *__pyx_v_self, PyObject *__pyx_v_colorTuple) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeColor (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_58writeColor(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_colorTuple));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_58writeColor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_colorTuple) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeColor", 0);

  /* "mmfparser\bytereader.pyx":425
 * 
 *     def writeColor(self, colorTuple):
 *         r, g, b = colorTuple             # <<<<<<<<<<<<<<
 *         self.writeByte(r, True)
 *         self.writeByte(g, True)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_colorTuple))) || (PyList_CheckExact(__pyx_v_colorTuple))) {
    PyObject* sequence = __pyx_v_colorTuple;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_colorTuple); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_g = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":426
 *     def writeColor(self, colorTuple):
 *         r, g, b = colorTuple
 *         self.writeByte(r, True)             # <<<<<<<<<<<<<<
 *         self.writeByte(g, True)
 *         self.writeByte(b, True)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_1) {
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
  }
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __Pyx_INCREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":427
 *         r, g, b = colorTuple
 *         self.writeByte(r, True)
 *         self.writeByte(g, True)             # <<<<<<<<<<<<<<
 *         self.writeByte(b, True)
 *         self.writeByte(0)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  __Pyx_INCREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":428
 *         self.writeByte(r, True)
 *         self.writeByte(g, True)
 *         self.writeByte(b, True)             # <<<<<<<<<<<<<<
 *         self.writeByte(0)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_1) {
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
  }
  __Pyx_INCREF(__pyx_v_b);
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_b);
  __Pyx_GIVEREF(__pyx_v_b);
  __Pyx_INCREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":429
 *         self.writeByte(g, True)
 *         self.writeByte(b, True)
 *         self.writeByte(0)             # <<<<<<<<<<<<<<
 * 
 *     def writeFormat(self, format, *values):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeByte); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mmfparser\bytereader.pyx":424
 *         self.write(value.encode('utf-16-le') + "\x00\x00")
 * 
 *     def writeColor(self, colorTuple):             # <<<<<<<<<<<<<<
 *         r, g, b = colorTuple
 *         self.writeByte(r, True)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":431
 *         self.writeByte(0)
 * 
 *     def writeFormat(self, format, *values):             # <<<<<<<<<<<<<<
 *         self.write(struct.pack(format, *values))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_61writeFormat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_61writeFormat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_values = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeFormat (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_values = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_values)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_values);
  } else {
    __pyx_v_values = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "writeFormat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_format = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeFormat", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_values); __pyx_v_values = 0;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_60writeFormat(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_format, __pyx_v_values);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_60writeFormat(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_values) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeFormat", 0);

  /* "mmfparser\bytereader.pyx":432
 * 
 *     def writeFormat(self, format, *values):
 *         self.write(struct.pack(format, *values))             # <<<<<<<<<<<<<<
 * 
 *     def writeStruct(self, structType, *values):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_pack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_format);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_format);
  __Pyx_GIVEREF(__pyx_v_format);
  __pyx_t_3 = PySequence_Tuple(__pyx_v_values); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_3), 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":431
 *         self.writeByte(0)
 * 
 *     def writeFormat(self, format, *values):             # <<<<<<<<<<<<<<
 *         self.write(struct.pack(format, *values))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":434
 *         self.write(struct.pack(format, *values))
 * 
 *     def writeStruct(self, structType, *values):             # <<<<<<<<<<<<<<
 *         self.write(structType.pack(*values))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_63writeStruct(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_63writeStruct(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_structType = 0;
  PyObject *__pyx_v_values = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeStruct (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_values = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_values)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_values);
  } else {
    __pyx_v_values = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_structType,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_structType)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "writeStruct") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_structType = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeStruct", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_values); __pyx_v_values = 0;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeStruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_62writeStruct(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_structType, __pyx_v_values);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_62writeStruct(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_structType, PyObject *__pyx_v_values) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeStruct", 0);

  /* "mmfparser\bytereader.pyx":435
 * 
 *     def writeStruct(self, structType, *values):
 *         self.write(structType.pack(*values))             # <<<<<<<<<<<<<<
 * 
 *     def writeReader(self, reader):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_structType, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_Tuple(__pyx_v_values); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_3), 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mmfparser\bytereader.pyx":434
 *         self.write(struct.pack(format, *values))
 * 
 *     def writeStruct(self, structType, *values):             # <<<<<<<<<<<<<<
 *         self.write(structType.pack(*values))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeStruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":437
 *         self.write(structType.pack(*values))
 * 
 *     def writeReader(self, reader):             # <<<<<<<<<<<<<<
 *         self.write(reader.data())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_65writeReader(PyObject *__pyx_v_self, PyObject *__pyx_v_reader); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_65writeReader(PyObject *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeReader (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_64writeReader(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_reader));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_64writeReader(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_reader) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeReader", 0);

  /* "mmfparser\bytereader.pyx":438
 * 
 *     def writeReader(self, reader):
 *         self.write(reader.data())             # <<<<<<<<<<<<<<
 * 
 *     def writeIntString(self, value):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_t_1), 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":437
 *         self.write(structType.pack(*values))
 * 
 *     def writeReader(self, reader):             # <<<<<<<<<<<<<<
 *         self.write(reader.data())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeReader", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":440
 *         self.write(reader.data())
 * 
 *     def writeIntString(self, value):             # <<<<<<<<<<<<<<
 *         self.writeInt(len(value), True)
 *         self.write(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_67writeIntString(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_67writeIntString(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeIntString (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_66writeIntString(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_66writeIntString(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeIntString", 0);

  /* "mmfparser\bytereader.pyx":441
 * 
 *     def writeIntString(self, value):
 *         self.writeInt(len(value), True)             # <<<<<<<<<<<<<<
 *         self.write(value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_writeInt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_5) {
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_3, Py_True);
  __Pyx_GIVEREF(Py_True);
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":442
 *     def writeIntString(self, value):
 *         self.writeInt(len(value), True)
 *         self.write(value)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint skipBytes(self, size_t n):
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_9mmfparser_10bytereader_10ByteReader_write(__pyx_v_self, ((PyObject*)__pyx_v_value), 0);

  /* "mmfparser\bytereader.pyx":440
 *         self.write(reader.data())
 * 
 *     def writeIntString(self, value):             # <<<<<<<<<<<<<<
 *         self.writeInt(len(value), True)
 *         self.write(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.writeIntString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":444
 *         self.write(value)
 * 
 *     cpdef bint skipBytes(self, size_t n):             # <<<<<<<<<<<<<<
 *         self.seek(n, 1)
 * 
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_69skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek __pyx_t_2;
  __Pyx_RefNannySetupContext("skipBytes", 0);

  /* "mmfparser\bytereader.pyx":445
 * 
 *     cpdef bint skipBytes(self, size_t n):
 *         self.seek(n, 1)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint rewind(self, size_t n):
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.mode = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, __pyx_v_n, 0, &__pyx_t_2); 

  /* "mmfparser\bytereader.pyx":444
 *         self.write(value)
 * 
 *     cpdef bint skipBytes(self, size_t n):             # <<<<<<<<<<<<<<
 *         self.seek(n, 1)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_69skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_69skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  size_t __pyx_v_n;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skipBytes (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_size_t(__pyx_arg_n); if (unlikely((__pyx_v_n == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.skipBytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_68skipBytes(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((size_t)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_68skipBytes(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("skipBytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes(__pyx_v_self, __pyx_v_n, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.skipBytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":447
 *         self.seek(n, 1)
 * 
 *     cpdef bint rewind(self, size_t n):             # <<<<<<<<<<<<<<
 *         self.seek(-n, 1)
 * 
 */

static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_71rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_f_9mmfparser_10bytereader_10ByteReader_rewind(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek __pyx_t_2;
  __Pyx_RefNannySetupContext("rewind", 0);

  /* "mmfparser\bytereader.pyx":448
 * 
 *     cpdef bint rewind(self, size_t n):
 *         self.seek(-n, 1)             # <<<<<<<<<<<<<<
 * 
 *     def truncate(self, value):
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.mode = 1;
  __pyx_t_1 = __pyx_f_9mmfparser_10bytereader_10ByteReader_seek(__pyx_v_self, (-__pyx_v_n), 0, &__pyx_t_2); 

  /* "mmfparser\bytereader.pyx":447
 *         self.seek(n, 1)
 * 
 *     cpdef bint rewind(self, size_t n):             # <<<<<<<<<<<<<<
 *         self.seek(-n, 1)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_71rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_71rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  size_t __pyx_v_n;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rewind (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_size_t(__pyx_arg_n); if (unlikely((__pyx_v_n == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.rewind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_70rewind(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((size_t)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_70rewind(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, size_t __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rewind", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_9mmfparser_10bytereader_10ByteReader_rewind(__pyx_v_self, __pyx_v_n, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.rewind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":450
 *         self.seek(-n, 1)
 * 
 *     def truncate(self, value):             # <<<<<<<<<<<<<<
 *         self.buffer.truncate(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_73truncate(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_73truncate(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truncate (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_72truncate(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_72truncate(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("truncate", 0);

  /* "mmfparser\bytereader.pyx":451
 * 
 *     def truncate(self, value):
 *         self.buffer.truncate(value)             # <<<<<<<<<<<<<<
 * 
 *     def checkDefault(self, value, *defaults):
 */
  __pyx_t_2 = __Pyx_PyBytes_FromUString(__pyx_v_self->buffer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_truncate); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":450
 *         self.seek(-n, 1)
 * 
 *     def truncate(self, value):             # <<<<<<<<<<<<<<
 *         self.buffer.truncate(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.truncate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":453
 *         self.buffer.truncate(value)
 * 
 *     def checkDefault(self, value, *defaults):             # <<<<<<<<<<<<<<
 *         return checkDefault(self, value, *defaults)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_75checkDefault(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_75checkDefault(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkDefault (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_defaults = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_defaults)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_defaults);
  } else {
    __pyx_v_defaults = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "checkDefault") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkDefault", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_defaults); __pyx_v_defaults = 0;
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.checkDefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_74checkDefault(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self), __pyx_v_value, __pyx_v_defaults);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_defaults);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_74checkDefault(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_defaults) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkDefault", 0);

  /* "mmfparser\bytereader.pyx":454
 * 
 *     def checkDefault(self, value, *defaults):
 *         return checkDefault(self, value, *defaults)             # <<<<<<<<<<<<<<
 * 
 *     def openEditor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_checkDefault); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_3 = PySequence_Tuple(__pyx_v_defaults); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":453
 *         self.buffer.truncate(value)
 * 
 *     def checkDefault(self, value, *defaults):             # <<<<<<<<<<<<<<
 *         return checkDefault(self, value, *defaults)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.checkDefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":456
 *         return checkDefault(self, value, *defaults)
 * 
 *     def openEditor(self):             # <<<<<<<<<<<<<<
 *         cdef object name
 *         if self.python_fp:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_77openEditor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9mmfparser_10bytereader_10ByteReader_77openEditor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openEditor (wrapper)", 0);
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_10ByteReader_76openEditor(((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_10ByteReader_76openEditor(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_self) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_fp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("openEditor", 0);

  /* "mmfparser\bytereader.pyx":458
 *     def openEditor(self):
 *         cdef object name
 *         if self.python_fp:             # <<<<<<<<<<<<<<
 *             name = self.python_fp.name
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->python_fp); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "mmfparser\bytereader.pyx":459
 *         cdef object name
 *         if self.python_fp:
 *             name = self.python_fp.name             # <<<<<<<<<<<<<<
 *         else:
 *             fp = tempfile.NamedTemporaryFile('wb', delete = False)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->python_fp, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_name = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mmfparser\bytereader.pyx":461
 *             name = self.python_fp.name
 *         else:
 *             fp = tempfile.NamedTemporaryFile('wb', delete = False)             # <<<<<<<<<<<<<<
 *             fp.write(self.data())
 *             fp.close()
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_tempfile); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_NamedTemporaryFile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_delete, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__8, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_fp = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mmfparser\bytereader.pyx":462
 *         else:
 *             fp = tempfile.NamedTemporaryFile('wb', delete = False)
 *             fp.write(self.data())             # <<<<<<<<<<<<<<
 *             fp.close()
 *             name = fp.name
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_f_9mmfparser_10bytereader_10ByteReader_data(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser\bytereader.pyx":463
 *             fp = tempfile.NamedTemporaryFile('wb', delete = False)
 *             fp.write(self.data())
 *             fp.close()             # <<<<<<<<<<<<<<
 *             name = fp.name
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser\bytereader.pyx":464
 *             fp.write(self.data())
 *             fp.close()
 *             name = fp.name             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_name = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "mmfparser\bytereader.pyx":466
 *             name = fp.name
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             raw_input('Press enter to open hex editor...')
 *             openEditor(name, self.tell())
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "mmfparser\bytereader.pyx":467
 * 
 *         try:
 *             raw_input('Press enter to open hex editor...')             # <<<<<<<<<<<<<<
 *             openEditor(name, self.tell())
 *         except IOError:
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_raw_input, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mmfparser\bytereader.pyx":468
 *         try:
 *             raw_input('Press enter to open hex editor...')
 *             openEditor(name, self.tell())             # <<<<<<<<<<<<<<
 *         except IOError:
 *             pass
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_openEditor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_self, 0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_10 = 1;
        }
      }
      __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mmfparser\bytereader.pyx":469
 *             raw_input('Press enter to open hex editor...')
 *             openEditor(name, self.tell())
 *         except IOError:             # <<<<<<<<<<<<<<
 *             pass
 *         raw_input('(enter)')
 */
    __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_11) {
      PyErr_Restore(0,0,0);
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    __pyx_L11_try_end:;
  }

  /* "mmfparser\bytereader.pyx":471
 *         except IOError:
 *             pass
 *         raw_input('(enter)')             # <<<<<<<<<<<<<<
 * 
 * def openEditor(filename, position):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_raw_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mmfparser\bytereader.pyx":456
 *         return checkDefault(self, value, *defaults)
 * 
 *     def openEditor(self):             # <<<<<<<<<<<<<<
 *         cdef object name
 *         if self.python_fp:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mmfparser.bytereader.ByteReader.openEditor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_fp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":473
 *         raw_input('(enter)')
 * 
 * def openEditor(filename, position):             # <<<<<<<<<<<<<<
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_1openEditor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_10bytereader_1openEditor = {"openEditor", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_1openEditor, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_10bytereader_1openEditor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_position = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openEditor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_position,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("openEditor", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "openEditor") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_position = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("openEditor", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmfparser.bytereader.openEditor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_openEditor(__pyx_self, __pyx_v_filename, __pyx_v_position);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_openEditor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("openEditor", 0);

  /* "mmfparser\bytereader.pyx":474
 * 
 * def openEditor(filename, position):
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])             # <<<<<<<<<<<<<<
 * 
 * def checkDefault(ByteReader reader, value, *defaults):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_subprocess); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Popen); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_position);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_position);
  __Pyx_GIVEREF(__pyx_v_position);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_010editor);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_010editor);
  __Pyx_GIVEREF(__pyx_kp_s_010editor);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmfparser\bytereader.pyx":473
 *         raw_input('(enter)')
 * 
 * def openEditor(filename, position):             # <<<<<<<<<<<<<<
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmfparser.bytereader.openEditor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\bytereader.pyx":476
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 * def checkDefault(ByteReader reader, value, *defaults):             # <<<<<<<<<<<<<<
 *     if value in defaults:
 *         return False
 */

/* Python wrapper */
static PyObject *__pyx_pw_9mmfparser_10bytereader_3checkDefault(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9mmfparser_10bytereader_3checkDefault = {"checkDefault", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_3checkDefault, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9mmfparser_10bytereader_3checkDefault(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkDefault (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_defaults = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_defaults)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_defaults);
  } else {
    __pyx_v_defaults = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reader,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reader)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkDefault", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "checkDefault") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_reader = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkDefault", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_defaults); __pyx_v_defaults = 0;
  __Pyx_AddTraceback("mmfparser.bytereader.checkDefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_9mmfparser_10bytereader_ByteReader, 1, "reader", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9mmfparser_10bytereader_2checkDefault(__pyx_self, __pyx_v_reader, __pyx_v_value, __pyx_v_defaults);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaults);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9mmfparser_10bytereader_2checkDefault(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9mmfparser_10bytereader_ByteReader *__pyx_v_reader, PyObject *__pyx_v_value, PyObject *__pyx_v_defaults) {
  int __pyx_v_lastPosition;
  size_t __pyx_v_size;
  PyObject *__pyx_v_reprDefaults = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_message = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkDefault", 0);

  /* "mmfparser\bytereader.pyx":477
 * 
 * def checkDefault(ByteReader reader, value, *defaults):
 *     if value in defaults:             # <<<<<<<<<<<<<<
 *         return False
 *     cdef int lastPosition = reader.lastPosition
 */
  __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_value, __pyx_v_defaults, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":478
 * def checkDefault(ByteReader reader, value, *defaults):
 *     if value in defaults:
 *         return False             # <<<<<<<<<<<<<<
 *     cdef int lastPosition = reader.lastPosition
 *     cdef size_t size = reader.tell() - lastPosition
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "mmfparser\bytereader.pyx":479
 *     if value in defaults:
 *         return False
 *     cdef int lastPosition = reader.lastPosition             # <<<<<<<<<<<<<<
 *     cdef size_t size = reader.tell() - lastPosition
 *     reprDefaults = defaults
 */
  __pyx_t_3 = __pyx_v_reader->lastPosition;
  __pyx_v_lastPosition = __pyx_t_3;

  /* "mmfparser\bytereader.pyx":480
 *         return False
 *     cdef int lastPosition = reader.lastPosition
 *     cdef size_t size = reader.tell() - lastPosition             # <<<<<<<<<<<<<<
 *     reprDefaults = defaults
 *     if len(defaults) == 1:
 */
  __pyx_v_size = (__pyx_f_9mmfparser_10bytereader_10ByteReader_tell(__pyx_v_reader, 0) - __pyx_v_lastPosition);

  /* "mmfparser\bytereader.pyx":481
 *     cdef int lastPosition = reader.lastPosition
 *     cdef size_t size = reader.tell() - lastPosition
 *     reprDefaults = defaults             # <<<<<<<<<<<<<<
 *     if len(defaults) == 1:
 *         reprDefaults, = defaults
 */
  __Pyx_INCREF(__pyx_v_defaults);
  __pyx_v_reprDefaults = __pyx_v_defaults;

  /* "mmfparser\bytereader.pyx":482
 *     cdef size_t size = reader.tell() - lastPosition
 *     reprDefaults = defaults
 *     if len(defaults) == 1:             # <<<<<<<<<<<<<<
 *         reprDefaults, = defaults
 *     cdef str message = ('unimplemented value at %s, size %s (should be '
 */
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_defaults); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_4 == 1) != 0);
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":483
 *     reprDefaults = defaults
 *     if len(defaults) == 1:
 *         reprDefaults, = defaults             # <<<<<<<<<<<<<<
 *     cdef str message = ('unimplemented value at %s, size %s (should be '
 *         '%s but was %s)' % (lastPosition, size, reprDefaults, value))
 */
    if (1) {
      PyObject* sequence = __pyx_v_defaults;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 1)) {
        if (size > 1) __Pyx_RaiseTooManyValuesError(1);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __Pyx_DECREF_SET(__pyx_v_reprDefaults, __pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "mmfparser\bytereader.pyx":485
 *         reprDefaults, = defaults
 *     cdef str message = ('unimplemented value at %s, size %s (should be '
 *         '%s but was %s)' % (lastPosition, size, reprDefaults, value))             # <<<<<<<<<<<<<<
 *     traceback.print_stack(file=sys.stdout)
 *     # print message
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_lastPosition); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_reprDefaults);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_reprDefaults);
  __Pyx_GIVEREF(__pyx_v_reprDefaults);
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_unimplemented_value_at_s_size_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_6))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_message = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "mmfparser\bytereader.pyx":486
 *     cdef str message = ('unimplemented value at %s, size %s (should be '
 *         '%s but was %s)' % (lastPosition, size, reprDefaults, value))
 *     traceback.print_stack(file=sys.stdout)             # <<<<<<<<<<<<<<
 *     # print message
 *     if sys.stdin.isatty():
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_print_stack); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_stdout); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_file, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mmfparser\bytereader.pyx":488
 *     traceback.print_stack(file=sys.stdout)
 *     # print message
 *     if sys.stdin.isatty():             # <<<<<<<<<<<<<<
 *         reader.openEditor()
 *     raise SystemExit
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_stdin); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_isatty); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_2) {

    /* "mmfparser\bytereader.pyx":489
 *     # print message
 *     if sys.stdin.isatty():
 *         reader.openEditor()             # <<<<<<<<<<<<<<
 *     raise SystemExit
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reader), __pyx_n_s_openEditor); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "mmfparser\bytereader.pyx":490
 *     if sys.stdin.isatty():
 *         reader.openEditor()
 *     raise SystemExit             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_SystemExit, 0, 0, 0);
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":476
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 * def checkDefault(ByteReader reader, value, *defaults):             # <<<<<<<<<<<<<<
 *     if value in defaults:
 *         return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mmfparser.bytereader.checkDefault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reprDefaults);
  __Pyx_XDECREF(__pyx_v_message);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

static CYTHON_INLINE PyObject *__pyx_f_9mmfparser_6common_allocate_memory(int __pyx_v_size, char **__pyx_v_i) {
  PyObject *__pyx_v_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allocate_memory", 0);

  /* "mmfparser\common.pxd":24
 * 
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:             # <<<<<<<<<<<<<<
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 */
  __pyx_t_1 = ((__pyx_v_size < 0) != 0);
  if (__pyx_t_1) {

    /* "mmfparser\common.pxd":25
 * cdef inline object allocate_memory(int size, char ** i):
 *     if size < 0:
 *         size = 0             # <<<<<<<<<<<<<<
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 */
    __pyx_v_size = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "mmfparser\common.pxd":26
 *     if size < 0:
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)             # <<<<<<<<<<<<<<
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob
 */
  __pyx_t_2 = PyString_FromStringAndSize(NULL, __pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ob = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mmfparser\common.pxd":27
 *         size = 0
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)             # <<<<<<<<<<<<<<
 *     return ob
 */
  (__pyx_v_i[0]) = PyString_AS_STRING(__pyx_v_ob);

  /* "mmfparser\common.pxd":28
 *     cdef object ob = PyString_FromStringAndSize(NULL, size)
 *     i[0] = PyString_AS_STRING(ob)
 *     return ob             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ob);
  __pyx_r = __pyx_v_ob;
  goto __pyx_L0;

  /* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmfparser.common.allocate_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9mmfparser_10bytereader_ByteReader __pyx_vtable_9mmfparser_10bytereader_ByteReader;

static PyObject *__pyx_tp_new_9mmfparser_10bytereader_ByteReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_9mmfparser_10bytereader_ByteReader;
  p->original = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->python_fp = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9mmfparser_10bytereader_10ByteReader_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9mmfparser_10bytereader_ByteReader(PyObject *o) {
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *p = (struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->original);
  Py_CLEAR(p->python_fp);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9mmfparser_10bytereader_ByteReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *p = (struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)o;
  if (p->python_fp) {
    e = (*v)(p->python_fp, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9mmfparser_10bytereader_ByteReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9mmfparser_10bytereader_ByteReader *p = (struct __pyx_obj_9mmfparser_10bytereader_ByteReader *)o;
  tmp = ((PyObject*)p->python_fp);
  p->python_fp = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9mmfparser_10bytereader_ByteReader[] = {
  {"tell", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_3tell, METH_NOARGS, 0},
  {"data", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_5data, METH_NOARGS, 0},
  {"seek", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_7seek, METH_VARARGS|METH_KEYWORDS, 0},
  {"adjust", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_9adjust, METH_O, 0},
  {"read", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_11read, METH_VARARGS|METH_KEYWORDS, 0},
  {"size", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_13size, METH_NOARGS, 0},
  {"readByte", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_21readByte, METH_VARARGS|METH_KEYWORDS, 0},
  {"readShort", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_23readShort, METH_VARARGS|METH_KEYWORDS, 0},
  {"readFloat", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_25readFloat, METH_NOARGS, 0},
  {"readDouble", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_27readDouble, METH_NOARGS, 0},
  {"readInt", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_29readInt, METH_VARARGS|METH_KEYWORDS, 0},
  {"readString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_31readString, METH_VARARGS|METH_KEYWORDS, 0},
  {"readUnicodeString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_33readUnicodeString, METH_VARARGS|METH_KEYWORDS, 0},
  {"readColor", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_35readColor, METH_NOARGS, 0},
  {"readReader", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_37readReader, METH_O, 0},
  {"readIntString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_39readIntString, METH_NOARGS, 0},
  {"write", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_41write, METH_O, 0},
  {"write_size", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_43write_size, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeByte", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_45writeByte, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeShort", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_47writeShort, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeFloat", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_49writeFloat, METH_O, 0},
  {"writeDouble", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_51writeDouble, METH_O, 0},
  {"writeInt", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_53writeInt, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_55writeString, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeUnicodeString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_57writeUnicodeString, METH_O, 0},
  {"writeColor", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_59writeColor, METH_O, 0},
  {"writeFormat", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_61writeFormat, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeStruct", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_63writeStruct, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeReader", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_65writeReader, METH_O, 0},
  {"writeIntString", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_67writeIntString, METH_O, 0},
  {"skipBytes", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_69skipBytes, METH_O, 0},
  {"rewind", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_71rewind, METH_O, 0},
  {"truncate", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_73truncate, METH_O, 0},
  {"checkDefault", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_75checkDefault, METH_VARARGS|METH_KEYWORDS, 0},
  {"openEditor", (PyCFunction)__pyx_pw_9mmfparser_10bytereader_10ByteReader_77openEditor, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ByteReader = {
  __pyx_pw_9mmfparser_10bytereader_10ByteReader_15__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ByteReader = {
  __pyx_pw_9mmfparser_10bytereader_10ByteReader_15__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9mmfparser_10bytereader_ByteReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmfparser.bytereader.ByteReader", /*tp_name*/
  sizeof(struct __pyx_obj_9mmfparser_10bytereader_ByteReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9mmfparser_10bytereader_ByteReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_9mmfparser_10bytereader_10ByteReader_19__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ByteReader, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ByteReader, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_9mmfparser_10bytereader_10ByteReader_17__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9mmfparser_10bytereader_ByteReader, /*tp_traverse*/
  __pyx_tp_clear_9mmfparser_10bytereader_ByteReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9mmfparser_10bytereader_ByteReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9mmfparser_10bytereader_ByteReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "bytereader",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_010editor, __pyx_k_010editor, sizeof(__pyx_k_010editor), 0, 0, 1, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_BYTE, __pyx_k_BYTE, sizeof(__pyx_k_BYTE), 0, 0, 1, 1},
  {&__pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_k_C_LAPTOP_Downloads_AnacondaDev_b, sizeof(__pyx_k_C_LAPTOP_Downloads_AnacondaDev_b), 0, 0, 1, 0},
  {&__pyx_n_s_DOUBLE, __pyx_k_DOUBLE, sizeof(__pyx_k_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_FLOAT, __pyx_k_FLOAT, sizeof(__pyx_k_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_INT, __pyx_k_INT, sizeof(__pyx_k_INT), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_NamedTemporaryFile, __pyx_k_NamedTemporaryFile, sizeof(__pyx_k_NamedTemporaryFile), 0, 0, 1, 1},
  {&__pyx_n_s_Popen, __pyx_k_Popen, sizeof(__pyx_k_Popen), 0, 0, 1, 1},
  {&__pyx_kp_s_Press_enter_to_open_hex_editor, __pyx_k_Press_enter_to_open_hex_editor, sizeof(__pyx_k_Press_enter_to_open_hex_editor), 0, 0, 1, 0},
  {&__pyx_n_s_SHORT, __pyx_k_SHORT, sizeof(__pyx_k_SHORT), 0, 0, 1, 1},
  {&__pyx_n_s_Struct, __pyx_k_Struct, sizeof(__pyx_k_Struct), 0, 0, 1, 1},
  {&__pyx_n_s_SystemExit, __pyx_k_SystemExit, sizeof(__pyx_k_SystemExit), 0, 0, 1, 1},
  {&__pyx_n_s_UBYTE, __pyx_k_UBYTE, sizeof(__pyx_k_UBYTE), 0, 0, 1, 1},
  {&__pyx_n_s_UINT, __pyx_k_UINT, sizeof(__pyx_k_UINT), 0, 0, 1, 1},
  {&__pyx_n_s_USHORT, __pyx_k_USHORT, sizeof(__pyx_k_USHORT), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s_asUnsigned, __pyx_k_asUnsigned, sizeof(__pyx_k_asUnsigned), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_buffer, __pyx_k_buffer, sizeof(__pyx_k_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_checkDefault, __pyx_k_checkDefault, sizeof(__pyx_k_checkDefault), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_defaults, __pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 0, 1, 1},
  {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_kp_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 0},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},
  {&__pyx_n_s_isatty, __pyx_k_isatty, sizeof(__pyx_k_isatty), 0, 0, 1, 1},
  {&__pyx_n_s_lastPosition, __pyx_k_lastPosition, sizeof(__pyx_k_lastPosition), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_mmfparser_bytereader, __pyx_k_mmfparser_bytereader, sizeof(__pyx_k_mmfparser_bytereader), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_openEditor, __pyx_k_openEditor, sizeof(__pyx_k_openEditor), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_print_stack, __pyx_k_print_stack, sizeof(__pyx_k_print_stack), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw_input, __pyx_k_raw_input, sizeof(__pyx_k_raw_input), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
  {&__pyx_n_s_reprDefaults, __pyx_k_reprDefaults, sizeof(__pyx_k_reprDefaults), 0, 0, 1, 1},
  {&__pyx_kp_s_s_bytes_required, __pyx_k_s_bytes_required, sizeof(__pyx_k_s_bytes_required), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_seek, __pyx_k_seek, sizeof(__pyx_k_seek), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_stdin, __pyx_k_stdin, sizeof(__pyx_k_stdin), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_structType, __pyx_k_structType, sizeof(__pyx_k_structType), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_tell, __pyx_k_tell, sizeof(__pyx_k_tell), 0, 0, 1, 1},
  {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_truncate, __pyx_k_truncate, sizeof(__pyx_k_truncate), 0, 0, 1, 1},
  {&__pyx_kp_s_unimplemented_value_at_s_size_s, __pyx_k_unimplemented_value_at_s_size_s, sizeof(__pyx_k_unimplemented_value_at_s_size_s), 0, 0, 1, 0},
  {&__pyx_kp_s_utf_16_le, __pyx_k_utf_16_le, sizeof(__pyx_k_utf_16_le), 0, 0, 1, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeByte, __pyx_k_writeByte, sizeof(__pyx_k_writeByte), 0, 0, 1, 1},
  {&__pyx_n_s_writeInt, __pyx_k_writeInt, sizeof(__pyx_k_writeInt), 0, 0, 1, 1},
  {&__pyx_n_s_writeStruct, __pyx_k_writeStruct, sizeof(__pyx_k_writeStruct), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_file = __Pyx_GetBuiltinName(__pyx_n_s_file); if (!__pyx_builtin_file) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_buffer = __Pyx_GetBuiltinName(__pyx_n_s_buffer); if (!__pyx_builtin_buffer) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_raw_input = __Pyx_GetBuiltinName(__pyx_n_s_input); if (!__pyx_builtin_raw_input) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_raw_input = __Pyx_GetBuiltinName(__pyx_n_s_raw_input); if (!__pyx_builtin_raw_input) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_SystemExit = __Pyx_GetBuiltinName(__pyx_n_s_SystemExit); if (!__pyx_builtin_SystemExit) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mmfparser\bytereader.pyx":318
 *             data += c
 * 
 *         return data.decode('utf-16-le')             # <<<<<<<<<<<<<<
 * 
 *     cpdef tuple readColor(self):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_utf_16_le); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "mmfparser\bytereader.pyx":415
 *         else:
 *             for i in range(size):
 *                 self.writeByte(0)             # <<<<<<<<<<<<<<
 *             currentPosition = self.tell()
 *             self.rewind(size)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "mmfparser\bytereader.pyx":422
 * 
 *     def writeUnicodeString(self, value):
 *         self.write(value.encode('utf-16-le') + "\x00\x00")             # <<<<<<<<<<<<<<
 * 
 *     def writeColor(self, colorTuple):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_utf_16_le); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "mmfparser\bytereader.pyx":429
 *         self.writeByte(g, True)
 *         self.writeByte(b, True)
 *         self.writeByte(0)             # <<<<<<<<<<<<<<
 * 
 *     def writeFormat(self, format, *values):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "mmfparser\bytereader.pyx":461
 *             name = self.python_fp.name
 *         else:
 *             fp = tempfile.NamedTemporaryFile('wb', delete = False)             # <<<<<<<<<<<<<<
 *             fp.write(self.data())
 *             fp.close()
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_wb); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "mmfparser\bytereader.pyx":467
 * 
 *         try:
 *             raw_input('Press enter to open hex editor...')             # <<<<<<<<<<<<<<
 *             openEditor(name, self.tell())
 *         except IOError:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Press_enter_to_open_hex_editor); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "mmfparser\bytereader.pyx":471
 *         except IOError:
 *             pass
 *         raw_input('(enter)')             # <<<<<<<<<<<<<<
 * 
 * def openEditor(filename, position):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_enter); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "mmfparser\bytereader.pyx":35
 * import tempfile
 * 
 * BYTE = struct.Struct('b')             # <<<<<<<<<<<<<<
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_b); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "mmfparser\bytereader.pyx":36
 * 
 * BYTE = struct.Struct('b')
 * UBYTE = struct.Struct('B')             # <<<<<<<<<<<<<<
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_B); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "mmfparser\bytereader.pyx":37
 * BYTE = struct.Struct('b')
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')             # <<<<<<<<<<<<<<
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_h); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "mmfparser\bytereader.pyx":38
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')             # <<<<<<<<<<<<<<
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_H); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "mmfparser\bytereader.pyx":39
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')             # <<<<<<<<<<<<<<
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_f); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "mmfparser\bytereader.pyx":40
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')             # <<<<<<<<<<<<<<
 * INT = struct.Struct('i')
 * UINT = struct.Struct('I')
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_d); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "mmfparser\bytereader.pyx":41
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')             # <<<<<<<<<<<<<<
 * UINT = struct.Struct('I')
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_i); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "mmfparser\bytereader.pyx":42
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')
 * UINT = struct.Struct('I')             # <<<<<<<<<<<<<<
 * 
 * cdef class ByteReader
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_I); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "mmfparser\bytereader.pyx":473
 *         raw_input('(enter)')
 * 
 * def openEditor(filename, position):             # <<<<<<<<<<<<<<
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_position); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_openEditor, 473, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mmfparser\bytereader.pyx":476
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 * def checkDefault(ByteReader reader, value, *defaults):             # <<<<<<<<<<<<<<
 *     if value in defaults:
 *         return False
 */
  __pyx_tuple__21 = PyTuple_Pack(7, __pyx_n_s_reader, __pyx_n_s_value, __pyx_n_s_defaults, __pyx_n_s_lastPosition, __pyx_n_s_size, __pyx_n_s_reprDefaults, __pyx_n_s_message); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_LAPTOP_Downloads_AnacondaDev_b, __pyx_n_s_checkDefault, 476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initbytereader(void); /*proto*/
PyMODINIT_FUNC initbytereader(void)
#else
PyMODINIT_FUNC PyInit_bytereader(void); /*proto*/
PyMODINIT_FUNC PyInit_bytereader(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_bytereader(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("bytereader", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_mmfparser__bytereader) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "mmfparser.bytereader")) {
      if (unlikely(PyDict_SetItemString(modules, "mmfparser.bytereader", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9mmfparser_10bytereader_ByteReader = &__pyx_vtable_9mmfparser_10bytereader_ByteReader;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.tell = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_tell;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.data = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_data;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.seek = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_seek *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_seek;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.read = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_read *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_read;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.adjust = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_adjust;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.size = (size_t (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_size;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readByte = (short (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readByte *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_readByte;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readShort = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readShort *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_readShort;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readFloat = (float (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_readFloat;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readDouble = (double (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_readDouble;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readInt = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readInt *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_readInt;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readString = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readString *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_readString;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readUnicodeString = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_9mmfparser_10bytereader_10ByteReader_readUnicodeString *__pyx_optional_args))__pyx_f_9mmfparser_10bytereader_10ByteReader_readUnicodeString;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readColor = (PyObject *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_readColor;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.readReader = (struct __pyx_obj_9mmfparser_10bytereader_ByteReader *(*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_readReader;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.write = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, PyObject *, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_write;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.write_size = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, char *, size_t, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_write_size;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.skipBytes = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_skipBytes;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader.rewind = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, size_t, int __pyx_skip_dispatch))__pyx_f_9mmfparser_10bytereader_10ByteReader_rewind;
  __pyx_vtable_9mmfparser_10bytereader_ByteReader._read = (int (*)(struct __pyx_obj_9mmfparser_10bytereader_ByteReader *, void *, int))__pyx_f_9mmfparser_10bytereader_10ByteReader__read;
  if (PyType_Ready(&__pyx_type_9mmfparser_10bytereader_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9mmfparser_10bytereader_ByteReader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9mmfparser_10bytereader_ByteReader.tp_dict, __pyx_vtabptr_9mmfparser_10bytereader_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ByteReader", (PyObject *)&__pyx_type_9mmfparser_10bytereader_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9mmfparser_10bytereader_ByteReader = &__pyx_type_9mmfparser_10bytereader_ByteReader;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "mmfparser\bytereader.pyx":28
 * from mmfparser.common cimport allocate_memory
 * 
 * import struct             # <<<<<<<<<<<<<<
 * import subprocess
 * import os
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":29
 * 
 * import struct
 * import subprocess             # <<<<<<<<<<<<<<
 * import os
 * import traceback
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_subprocess, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":30
 * import struct
 * import subprocess
 * import os             # <<<<<<<<<<<<<<
 * import traceback
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":31
 * import subprocess
 * import os
 * import traceback             # <<<<<<<<<<<<<<
 * import sys
 * import tempfile
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":32
 * import os
 * import traceback
 * import sys             # <<<<<<<<<<<<<<
 * import tempfile
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":33
 * import traceback
 * import sys
 * import tempfile             # <<<<<<<<<<<<<<
 * 
 * BYTE = struct.Struct('b')
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tempfile, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":35
 * import tempfile
 * 
 * BYTE = struct.Struct('b')             # <<<<<<<<<<<<<<
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BYTE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":36
 * 
 * BYTE = struct.Struct('b')
 * UBYTE = struct.Struct('B')             # <<<<<<<<<<<<<<
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UBYTE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":37
 * BYTE = struct.Struct('b')
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')             # <<<<<<<<<<<<<<
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SHORT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":38
 * UBYTE = struct.Struct('B')
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')             # <<<<<<<<<<<<<<
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_USHORT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":39
 * SHORT = struct.Struct('h')
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')             # <<<<<<<<<<<<<<
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLOAT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":40
 * USHORT = struct.Struct('H')
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')             # <<<<<<<<<<<<<<
 * INT = struct.Struct('i')
 * UINT = struct.Struct('I')
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOUBLE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":41
 * FLOAT = struct.Struct('f')
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')             # <<<<<<<<<<<<<<
 * UINT = struct.Struct('I')
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":42
 * DOUBLE = struct.Struct('d')
 * INT = struct.Struct('i')
 * UINT = struct.Struct('I')             # <<<<<<<<<<<<<<
 * 
 * cdef class ByteReader
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Struct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UINT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":473
 *         raw_input('(enter)')
 * 
 * def openEditor(filename, position):             # <<<<<<<<<<<<<<
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_10bytereader_1openEditor, NULL, __pyx_n_s_mmfparser_bytereader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_openEditor, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":476
 *     return subprocess.Popen(['010editor', '%s@%s' % (filename, position)])
 * 
 * def checkDefault(ByteReader reader, value, *defaults):             # <<<<<<<<<<<<<<
 *     if value in defaults:
 *         return False
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9mmfparser_10bytereader_3checkDefault, NULL, __pyx_n_s_mmfparser_bytereader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkDefault, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\bytereader.pyx":1
 * # Copyright (c) Mathias Kaerlev 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of Anaconda.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmfparser\common.pxd":23
 *     int Py_REFCNT(object v)
 * 
 * cdef inline object allocate_memory(int size, char ** i):             # <<<<<<<<<<<<<<
 *     if size < 0:
 *         size = 0
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmfparser.bytereader", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmfparser.bytereader");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
