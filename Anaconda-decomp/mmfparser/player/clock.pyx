# Copyright (c) Mathias Kaerlev 2012.

# This file is part of Anaconda.

# Anaconda is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Anaconda is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Anaconda.  If not, see <http://www.gnu.org/licenses/>.

from mmfparser.player.common cimport PlayerChildcdef class ScheduledItem:    cdef object func    cdef bint scheduled        cdef tuple args    cdef dict kwargs    cdef void init(self, func, args, kwargs):        self.scheduled = True        self.func = func        self.args = args        self.kwargs = kwargscdef class ScheduledIntervalItem:    cdef object func    cdef double interval, last    cdef bint once, scheduled        cdef tuple args    cdef dict kwargs        cdef void init(self, func, double interval, double last, bint once,                    args, kwargs):        self.scheduled = True        self.func = func        self.interval = interval        self.once = once        self.last = last        self.args = args        self.kwargs = kwargscdef class Clock:    def __init__(self, GamePlayer player):        self.player = player        self.scheduled_items = []        self.scheduled_interval_items = []    cdef void tick(self, double dt):        self.dt = dt        cdef ScheduledItem item        cdef ScheduledIntervalItem interval_item                cdef double time = self.player.time        self.time = time                for item in self.scheduled_items:            if not item.scheduled:                continue            item.func(dt, *item.args, **item.kwargs)            if self.player.finished:                return                for interval_item in self.scheduled_interval_items:            if not interval_item.scheduled:                break            if time - interval_item.last >= interval_item.interval:                interval_item.func(time - interval_item.last, *interval_item.args,                     **interval_item.kwargs)                if self.player.finished:                    return                if interval_item.once:                    if interval_item.scheduled:                        interval_item.scheduled = False                        self.scheduled_interval_items.remove(interval_item)                else:                    interval_item.last = time    cdef double get_fps(self):        if self.dt == 0:            return 0        return 1.0 / self.dt    def schedule(self, func, *args, **kwargs):        cdef ScheduledItem item = ScheduledItem.__new__(ScheduledItem)        item.init(func, args, kwargs)        self.scheduled_items.append(item)    def schedule_interval(self, func, double interval, *args, **kwargs):        cdef ScheduledIntervalItem item = ScheduledIntervalItem.__new__(            ScheduledIntervalItem)        item.init(func, interval, self.player.time, False, args, kwargs)        self.scheduled_interval_items.append(item)        def schedule_once(self, func, double delay, *args, **kwargs):        cdef ScheduledIntervalItem item = ScheduledIntervalItem.__new__(            ScheduledIntervalItem)        item.init(func, delay, self.player.time, True, args, kwargs)        self.scheduled_interval_items.append(item)    cpdef unschedule(self, func):        cdef ScheduledItem item        cdef ScheduledIntervalItem interval_item                for item in self.scheduled_items[:]:            if item.func == func:                item.scheduled = False                self.scheduled_items.remove(item)                        for interval_item in self.scheduled_interval_items[:]:            if interval_item.func == func:                interval_item.scheduled = False                self.scheduled_interval_items.remove(interval_item)