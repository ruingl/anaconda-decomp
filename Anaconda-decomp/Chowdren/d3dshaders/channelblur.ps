float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fCoeff : register(c3);
uniform bool _iA : register(c4);
uniform bool _iB : register(c5);
uniform bool _iG : register(c6);
uniform bool _iR : register(c7);
uniform sampler2D _texture : register(s0);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
void gl_main()
{
{
float4 _col = gl_texture2D(_texture, _texture_coordinate);
float4 _texT = gl_texture2D(_texture, vec2(_texture_coordinate.x, (_texture_coordinate.y - _fCoeff)));
float4 _texTL = gl_texture2D(_texture, vec2((_texture_coordinate.x - _fCoeff), (_texture_coordinate.y - _fCoeff)));
float4 _texL = gl_texture2D(_texture, vec2((_texture_coordinate.x - _fCoeff), _texture_coordinate.y));
float4 _texBL = gl_texture2D(_texture, vec2((_texture_coordinate.x - _fCoeff), (_texture_coordinate.y + _fCoeff)));
float4 _texB = gl_texture2D(_texture, vec2(_texture_coordinate.x, (_texture_coordinate.y + _fCoeff)));
float4 _texBR = gl_texture2D(_texture, vec2((_texture_coordinate.x + _fCoeff), (_texture_coordinate.y + _fCoeff)));
float4 _texR = gl_texture2D(_texture, vec2((_texture_coordinate.x + _fCoeff), _texture_coordinate.y));
float4 _texTR = gl_texture2D(_texture, vec2((_texture_coordinate.x + _fCoeff), (_texture_coordinate.y - _fCoeff)));
if (_iR)
{
(_col.x = (((((((((_col.x + _texT.x) + _texTL.x) + _texL.x) + _texBL.x) + _texB.x) + _texBR.x) + _texR.x) + _texTR.x) / 9.0));
}
;
if (_iG)
{
(_col.y = (((((((((_col.y + _texT.y) + _texTL.y) + _texL.y) + _texBL.y) + _texB.y) + _texBR.y) + _texR.y) + _texTR.y) / 9.0));
}
;
if (_iB)
{
(_col.z = (((((((((_col.z + _texT.z) + _texTL.z) + _texL.z) + _texBL.z) + _texB.z) + _texBR.z) + _texR.z) + _texTR.z) / 9.0));
}
;
if (_iA)
{
(_col.w = (((((((((_col.w + _texT.w) + _texTL.w) + _texL.w) + _texBL.w) + _texB.w) + _texBR.w) + _texR.w) + _texTR.w) / 9.0));
}
;
(gl_Color[0] = (_col * _blend_color));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
