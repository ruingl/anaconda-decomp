float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
float3 vec3(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform sampler2D _texture : register(s0);
uniform float _x_scale : register(c3);
uniform float _x_size : register(c4);
uniform float _y_scale : register(c5);
uniform float _y_size : register(c6);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
float4 _getter(in float2 _tc)
{
{
return gl_texture2D(_texture, _tc);
;
}
}
;
void gl_main()
{
{
float2 _sz = vec2(_x_size, _y_size);
float3 _step = vec3((1.0 / _x_scale), (1.0 / _y_scale), 0.0);
float2 _pixel = ((_sz * _texture_coordinate) + (_step.xy / 2.0));
float2 _corner = (floor(_pixel) + 1.0);
float2 _frac = min(((_corner - _pixel) * vec2(_x_scale, _y_scale)), float2(1.0, 1.0));
float4 _c1 = gl_texture2D(_texture, ((floor((_pixel + _step.zz)) + float2(0.5, 0.5)) / _sz));
float4 _c2 = gl_texture2D(_texture, ((floor((_pixel + _step.xz)) + float2(0.5, 0.5)) / _sz));
float4 _c3 = gl_texture2D(_texture, ((floor((_pixel + _step.zy)) + float2(0.5, 0.5)) / _sz));
float4 _c4 = gl_texture2D(_texture, ((floor((_pixel + _step.xy)) + float2(0.5, 0.5)) / _sz));
(_c1 *= (_frac.x * _frac.y));
(_c2 *= ((1.0 - _frac.x) * _frac.y));
(_c3 *= (_frac.x * (1.0 - _frac.y)));
(_c4 *= ((1.0 - _frac.x) * (1.0 - _frac.y)));
(gl_Color[0] = (_blend_color * (((_c1 + _c2) + _c3) + _c4)));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
