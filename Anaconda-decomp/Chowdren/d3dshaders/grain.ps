float2 vec2(float x0)
{
    return float2(x0, x0);
}
float4 vec4(float x0, float x1, float x2, float x3)
{
    return float4(x0, x1, x2, x3);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fSeed : register(c3);
uniform float _fStrength : register(c4);
uniform bool _iA : register(c5);
uniform bool _iB : register(c6);
uniform bool _iG : register(c7);
uniform bool _iInvert : register(c8);
uniform bool _iR : register(c9);
uniform sampler2D _texture : register(s0);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
float _mccool_rand(in float2 _ij)
{
{
float4 _a = vec4(pow(3.1415927, 4.0), exp(4.0), pow(10.0, 1.5707964), sqrt(1997.0));
float4 _result = vec4(_ij.x, _ij.y, _ij.x, _ij.y);
{for(int _i = 0; (_i < 3); (_i++))
{
{
(_result.x = frac(dot(_result, _a)));
(_result.y = frac(dot(_result, _a)));
(_result.z = frac(dot(_result, _a)));
(_result.w = frac(dot(_result, _a)));
}
;}
}
;
return _result.x;
;
}
}
float _mccool_randLod0(in float2 _ij)
{
{
float4 _a = vec4(pow(3.1415927, 4.0), exp(4.0), pow(10.0, 1.5707964), sqrt(1997.0));
float4 _result = vec4(_ij.x, _ij.y, _ij.x, _ij.y);
{for(int _i = 0; (_i < 3); (_i++))
{
{
(_result.x = frac(dot(_result, _a)));
(_result.y = frac(dot(_result, _a)));
(_result.z = frac(dot(_result, _a)));
(_result.w = frac(dot(_result, _a)));
}
;}
}
;
return _result.x;
;
}
}
;
void gl_main()
{
{
float4 _col = gl_texture2D(_texture, _texture_coordinate);
float _r = (_mccool_rand((_texture_coordinate + vec2(_fSeed))) * _fStrength);
float s0;
{
if (_iInvert)
{
    s0 = (1.0 - _r);
}
else
{
    s0 = _r;
}
}
(_r = s0);
if (_iR)
{
(_col.x *= _r);
}
;
if (_iG)
{
(_col.y *= _r);
}
;
if (_iB)
{
(_col.z *= _r);
}
;
if (_iA)
{
(_col.w *= _r);
}
;
(gl_Color[0] = (_col * _blend_color));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
