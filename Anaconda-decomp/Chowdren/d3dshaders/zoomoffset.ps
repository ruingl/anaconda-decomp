float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fHeight : register(c3);
uniform float _fWidth : register(c4);
uniform float _fX : register(c5);
uniform float _fY : register(c6);
uniform float _fZoomX : register(c7);
uniform float _fZoomY : register(c8);
uniform sampler2D _texture : register(s0);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
void gl_main()
{
{
float2 _In = _texture_coordinate;
(_In.x = ((_In.x + (_fZoomX * (_fWidth - 1.0))) + _fX));
(_In.y = ((_In.y + (_fZoomY * (_fHeight - 1.0))) + _fY));
float4 _color = gl_texture2D(_texture, vec2((_In.x / _fWidth), (_In.y / _fHeight)));
(gl_Color[0] = (_color * _blend_color));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
