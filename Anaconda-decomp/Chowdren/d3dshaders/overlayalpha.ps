// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate0 = {0, 0};
static  float2 _texture_coordinate1 = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform sampler2D _background_texture : register(s0);
uniform float _bgA : register(c3);
uniform sampler2D _texture : register(s1);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
void gl_main()
{
{
float4 _B = gl_texture2D(_background_texture, _texture_coordinate1);
float4 _L = (gl_texture2D(_texture, _texture_coordinate0) * _blend_color);
(_B.w = _bgA);
float4 _blend = {0, 0, 0, 0};
float s0;
{
if ((_B.x < 0.5))
{
    s0 = ((2.0 * _B.x) * _L.x);
}
else
{
    s0 = (1.0 - ((2.0 * (1.0 - _B.x)) * (1.0 - _L.x)));
}
}
(_blend.x = s0);
float s1;
{
if ((_B.y < 0.5))
{
    s1 = ((2.0 * _B.y) * _L.y);
}
else
{
    s1 = (1.0 - ((2.0 * (1.0 - _B.y)) * (1.0 - _L.y)));
}
}
(_blend.y = s1);
float s2;
{
if ((_B.z < 0.5))
{
    s2 = ((2.0 * _B.z) * _L.z);
}
else
{
    s2 = (1.0 - ((2.0 * (1.0 - _B.z)) * (1.0 - _L.z)));
}
}
(_blend.z = s2);
float s3;
{
if ((_B.w < 0.5))
{
    s3 = ((2.0 * _B.w) * _L.w);
}
else
{
    s3 = (1.0 - ((2.0 * (1.0 - _B.w)) * (1.0 - _L.w)));
}
}
(_blend.w = s3);
(gl_Color[0] = _blend);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate0 : TEXCOORD0;
    float2 _texture_coordinate1 : TEXCOORD1;
    float4 _blend_color : TEXCOORD2;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate0 = data._texture_coordinate0;
    _texture_coordinate1 = data._texture_coordinate1;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
