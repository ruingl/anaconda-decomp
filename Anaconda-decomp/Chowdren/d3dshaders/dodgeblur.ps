float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
// Varyings
static  float2 _texture_coordinate0 = {0, 0};
static  float2 _texture_coordinate1 = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform sampler2D _background_texture : register(s0);
uniform float _radius : register(c3);
uniform sampler2D _texture : register(s1);
uniform float2 _texture_size : register(c4);
uniform bool _vertical : register(c5);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
void gl_main()
{
{
float4 _b = float4(0.0, 0.0, 0.0, 0.0);
float4 _b2 = gl_texture2D(_background_texture, _texture_coordinate1);
float4 _o = gl_texture2D(_texture, _texture_coordinate0);
float2 _coeff = {0, 0};
if (_vertical)
{
(_coeff = vec2(0.0, (_texture_size.y * _radius)));
}
else
{
(_coeff = vec2((_texture_size.x * _radius), 0.0));
}
;
float4 _temp = {0, 0, 0, 0};
{for(int _i = 0; (_i < 28); (_i++))
{
{
float2 _val = (_texture_coordinate1 + ((_coeff * 2.0) * ((float(_i) / 27.0) - 0.5)));
(_temp = gl_texture2D(_background_texture, clamp(_val, 0.0, 0.99989998)));
(_b += max(_temp, _b2));
}
;}
}
;
(_b /= 28.0);
if (!all(_o == float4(1.0, 1.0, 1.0, 1.0)))
{
(_o = clamp((_b / (1.0 - _o)), 0.0, 1.0));
}
;
(_o.w = 1.0);
(gl_Color[0] = _o);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate0 : TEXCOORD0;
    float2 _texture_coordinate1 : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate0 = data._texture_coordinate0;
    _texture_coordinate1 = data._texture_coordinate1;
    gl_main();
    return gl_Color[0];
}
