// Varyings
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fAa : register(c3);
uniform float4 _fArgb : register(c4);
uniform float _fBa : register(c5);
uniform float4 _fBrgb : register(c6);
uniform float _fCoeff : register(c7);
uniform float _fFade : register(c8);
uniform float _fOffset : register(c9);
uniform bool _iF : register(c10);
uniform bool _iMask : register(c11);
uniform bool _iR : register(c12);
uniform int _iT : register(c13);
uniform sampler2D _texture : register(s0);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
;
;
;
;
;
;
void gl_main()
{
{
float _Temp = {0};
float _Gx = {0};
float _Gy = {0};
float _Ga = {0};
float4 _Gcol = {0, 0, 0, 0};
float4 _Out = {0, 0, 0, 0};
(_Gx = _texture_coordinate.x);
(_Gy = _texture_coordinate.y);
if (_iF)
{
{
(_Gx = (1.0 - _Gx));
(_Gy = (1.0 - _Gy));
}
;
}
;
if (_iR)
{
{
(_Temp = _Gy);
(_Gy = _Gx);
(_Gx = _Temp);
}
;
}
;
(_Out = gl_texture2D(_texture, _texture_coordinate));
if ((_iT == 0))
{
{
(_Gcol = (_fArgb + (((_fBrgb - _fArgb) * (_Gx + _fOffset)) * _fCoeff)));
(_Ga = (_fAa + (((_fBa - _fAa) * (_Gx + _fOffset)) * _fCoeff)));
}
;
}
;
if ((_iT == 1))
{
{
if (_iR)
{
(_Temp = (1.0 - _Gx));
}
else
{
(_Temp = _Gx);
}
;
(_Gcol = (_fArgb + (((_fBrgb - _fArgb) * ((_Gy * _Temp) + _fOffset)) * _fCoeff)));
(_Ga = (_fAa + (((_fBa - _fAa) * ((_Gy * _Temp) + _fOffset)) * _fCoeff)));
}
;
}
;
if ((_iT == 2))
{
{
(_Gcol = (_fArgb + ((_fBrgb - _fArgb) * abs(sin(((_Gx * _fCoeff) + _fOffset))))));
(_Ga = (_fAa + ((_fBa - _fAa) * abs(sin(((_Gx * _fCoeff) + _fOffset))))));
}
;
}
;
if (_iMask)
{
(_Out.w *= _Ga);
}
else
{
(_Out.w = _Ga);
}
;
(_Out.xyz += ((_Gcol.xyz - _Out.xyz) * _fFade));
(gl_Color[0] = _Out);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    gl_main();
    return gl_Color[0];
}
