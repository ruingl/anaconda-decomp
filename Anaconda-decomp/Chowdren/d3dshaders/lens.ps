// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate0 = {0, 0};
static  float2 _texture_coordinate1 = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform sampler2D _background_texture : register(s0);
uniform float _fBase : register(c3);
uniform float _fCoeff : register(c4);
uniform sampler2D _texture : register(s1);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

float2 mod(float2 x, float y)
{
    return x - y * floor(x / y);
}

;
;
;
;
;
;
void gl_main()
{
{
float _height = (_fBase + ((gl_texture2D(_texture, _texture_coordinate0).x * _blend_color.x) * _fCoeff));
float2 _In = _texture_coordinate1;
(_In += ((_height - 1.0) / 2.0));
(gl_Color[0] = gl_texture2D(_background_texture, mod((_In / _height), 1.0)));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate0 : TEXCOORD0;
    float2 _texture_coordinate1 : TEXCOORD1;
    float4 _blend_color : TEXCOORD2;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate0 = data._texture_coordinate0;
    _texture_coordinate1 = data._texture_coordinate1;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
