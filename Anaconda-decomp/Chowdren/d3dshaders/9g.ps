float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fAa : register(c3);
uniform float4 _fArgb : register(c4);
uniform float _fBa : register(c5);
uniform float4 _fBrgb : register(c6);
uniform float _fOffset : register(c7);
uniform sampler2D _texture : register(s0);
uniform float2 _texture_size : register(c8);
uniform float _xScale : register(c9);
uniform float _yScale : register(c10);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
;
;
;
;
void gl_main()
{
{
float4 _color = {0, 0, 0, 0};
float _orig_width = ((1.0 / _texture_size[0]) / _xScale);
float _orig_height = ((1.0 / _texture_size[1]) / _yScale);
float _chunk_width = (_orig_width / 3.0);
float _chunk_height = (_orig_height / 3.0);
float _width = (1.0 / _texture_size[0]);
float _height = (1.0 / _texture_size[1]);
float2 _pos = {0, 0};
(_pos.x = (_texture_coordinate.x * _width));
(_pos.y = (_texture_coordinate.y * _height));
float2 _orig_pos = {0, 0};
(_orig_pos.x = (_texture_coordinate.x * _xScale));
(_orig_pos.y = (_texture_coordinate.y * _yScale));
float _dx = (((_orig_width - _chunk_width) + _pos.x) - (_width - _chunk_width));
float _dy = (((_orig_height - _chunk_height) + _pos.y) - (_height - _chunk_height));
float2 _slice_pos = vec2(((_texture_coordinate.x + 1.0) / 3.0), ((_texture_coordinate.y + 1.0) / 3.0));
if ((_pos.y < _chunk_height))
{
{
(_slice_pos.y = _orig_pos.y);
}
;
}
;
if ((_pos.y > (_height - _chunk_height)))
{
{
(_slice_pos.y = ((_dy / _height) * _yScale));
}
;
}
;
if ((_pos.x < _chunk_width))
{
{
(_slice_pos.x = _orig_pos.x);
}
;
}
;
if ((_pos.x > (_width - _chunk_width)))
{
{
(_slice_pos.x = ((_dx / _width) * _xScale));
}
;
}
;
(_color = gl_texture2D(_texture, _slice_pos));
float4 _gradient = float4(0.0, 0.0, 0.0, 0.0);
float _f = (_texture_coordinate.x * (1.0 - _texture_coordinate.y));
(_f = max(0.0, min(1.0, (_f + _fOffset))));
(_gradient.w = (_fAa + ((_fBa - _fAa) * _f)));
(_gradient.xyz = lerp(_fArgb, _fBrgb, _f).xyz);
(_color.w *= (_gradient.w * _blend_color.w));
(_color.xyz = _gradient.xyz);
(gl_Color[0] = _color);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
