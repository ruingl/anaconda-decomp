// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float4 _color : register(c3);
uniform sampler2D _texture : register(s0);
uniform float2 _texture_size : register(c4);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
float4 _getter(in float4 _src)
{
{
if ((_src.w != 0.0))
{
return _src;
;
}
;
float4 _col = {0, 0, 0, 0};
(_col.xyz = _color.xyz);
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(1.0, 0.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(1.0, 1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(0.0, 1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(-1.0, 1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(-1.0, 0.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(-1.0, -1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(0.0, -1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
(_col.w = gl_texture2D(_texture, (_texture_coordinate + (float2(1.0, -1.0) * _texture_size))).w);
if ((_col.w > 0.0))
{
{
(_col.w *= _blend_color.w);
return _col;
;
}
;
}
;
return _src;
;
}
}
;
void gl_main()
{
{
float4 _src = (gl_texture2D(_texture, _texture_coordinate) * _blend_color);
(gl_Color[0] = _getter(_src));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
