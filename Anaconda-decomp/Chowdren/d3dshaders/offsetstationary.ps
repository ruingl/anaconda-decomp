float2 vec2(float x0, float x1)
{
    return float2(x0, x1);
}
// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate0 = {0, 0};
static  float2 _texture_coordinate1 = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform sampler2D _background_texture : register(s0);
uniform float _height : register(c3);
uniform sampler2D _texture : register(s1);
uniform float2 _texture_size : register(c4);
uniform float _width : register(c5);
uniform float _xoff : register(c6);
uniform float _yoff : register(c7);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
float _fmod1(in float _x)
{
{
if ((_x > 0.0))
{
return (_x - floor(_x));
;
}
else
{
return (_x - ceil(_x));
;
}
;
}
}
;
void gl_main()
{
{
float2 _In0 = _texture_coordinate0;
float2 _In1 = _texture_coordinate1;
float2 _shiftcoor = vec2(_fmod1((_In0.x + (_xoff * _texture_size.x))), _fmod1((_In0.y + (_yoff * _texture_size.y))));
float4 _shift = (gl_texture2D(_texture, _shiftcoor) * _blend_color);
float2 _off = (vec2(_width, _height) * _texture_size);
(_off.x *= (2.0 * (_shift.x - 0.5)));
(_off.y *= (-2.0 * (_shift.y - 0.5)));
float4 _o = gl_texture2D(_background_texture, (_In1 + _off));
(_o += gl_texture2D(_background_texture, ((_In1 + _off) + vec2((_texture_size.x * 0.5), 0.0))));
(_o += gl_texture2D(_background_texture, ((_In1 + _off) + vec2((_texture_size.x * -0.5), 0.0))));
(_o += gl_texture2D(_background_texture, ((_In1 + _off) + vec2(0.0, (_texture_size.y * 0.5)))));
(_o += gl_texture2D(_background_texture, ((_In1 + _off) + vec2(0.0, (_texture_size.y * -0.5)))));
(_o /= 5.0);
(gl_Color[0] = _o);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate0 : TEXCOORD0;
    float2 _texture_coordinate1 : TEXCOORD1;
    float4 _blend_color : TEXCOORD2;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate0 = data._texture_coordinate0;
    _texture_coordinate1 = data._texture_coordinate1;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
