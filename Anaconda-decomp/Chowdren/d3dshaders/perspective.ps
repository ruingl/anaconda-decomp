// Varyings
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform bool _direction : register(c3);
uniform int _offset : register(c4);
uniform int _sine_waves : register(c5);
uniform sampler2D _texture : register(s0);
uniform float2 _texture_size : register(c6);
uniform int _zoom : register(c7);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
void gl_main()
{
{
float _wave_increment = ((float(_sine_waves) * 360.0) / (_texture_size.x / _texture_size.y));
float2 _In = _texture_coordinate;
float s0;
{
if ((_direction == true))
{
    s0 = _texture_size.y;
}
else
{
    s0 = _texture_size.x;
}
}
float _pixel = s0;
float s1;
{
if ((_direction == true))
{
    s1 = _In.x;
}
else
{
    s1 = _In.y;
}
}
float _i = s1;
float _v = (sin((((_i * _wave_increment) + float(_offset)) * 0.017453289)) * float(_zoom));
if ((_direction == true))
{
(_In.y += (_v * _pixel));
}
else
{
(_In.x += (_v * _pixel));
}
;
float4 _col = {0, 0, 0, 0};
bool s2;
{
bool s3;
{
bool s4;
{
s4 = (_In.x < 0.0);
if (!s4)
{
    s4 = (_In.x > 1.0);
}
}
s3 = s4;
if (!s3)
{
    s3 = (_In.y < 0.0);
}
}
s2 = s3;
if (!s2)
{
    s2 = (_In.y > 1.0);
}
}
if (s2)
{
(_col = float4(0.0, 0.0, 0.0, 0.0));
}
else
{
(_col = gl_texture2D(_texture, _In));
}
;
(gl_Color[0] = _col);
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    gl_main();
    return gl_Color[0];
}
