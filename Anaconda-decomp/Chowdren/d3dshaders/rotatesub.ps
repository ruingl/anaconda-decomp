// Varyings
static  float4 _blend_color = {0, 0, 0, 0};
static  float2 _texture_coordinate = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _fA : register(c3);
uniform float _fSx : register(c4);
uniform float _fSy : register(c5);
uniform float _fX : register(c6);
uniform float _fY : register(c7);
uniform sampler2D _texture : register(s0);

#define GL_USES_FRAG_COLOR
float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, float2(t.x, t.y));

}

;
;
;
;
;
;
;
;
void gl_main()
{
{
float2 _coord = _texture_coordinate;
(_coord.x -= _fSx);
(_coord.y -= _fSy);
float _x = (_fX + 0.5);
float _y = (_fY + 0.5);
float _a = (_fA * 0.017453292);
float _xx = (_coord.x - _x);
float _yy = (_coord.y - _y);
float _Ray = sqrt(((_xx * _xx) + (_yy * _yy)));
float _Angle = {0};
if (((_coord.y - _y) > 0.0))
{
(_Angle = acos(((_coord.x - _x) / _Ray)));
}
else
{
(_Angle = (0.0 - acos(((_coord.x - _x) / _Ray))));
}
;
(_coord.x = (_x + (cos((_Angle + _a)) * _Ray)));
(_coord.y = (_y + (sin((_Angle + _a)) * _Ray)));
float4 _col = {0, 0, 0, 0};
bool s0;
{
bool s1;
{
bool s2;
{
s2 = (_coord.x >= 0.0);
if (s2)
{
    s2 = (_coord.x <= 1.0);
}
}
s1 = s2;
if (s1)
{
    s1 = (_coord.y >= 0.0);
}
}
s0 = s1;
if (s0)
{
    s0 = (_coord.y <= 1.0);
}
}
if (s0)
{
(_col = gl_texture2D(_texture, _coord));
}
else
{
(_col = float4(0.0, 0.0, 0.0, 0.0));
}
;
(gl_Color[0] = (_col * _blend_color));
}
}
;
struct VS_OUTPUT
{
    float2 _texture_coordinate : TEXCOORD0;
    float4 _blend_color : TEXCOORD1;
    float4 position : POSITION;
};

float4 main(VS_OUTPUT data) : COLOR0
{
    _texture_coordinate = data._texture_coordinate;
    _blend_color = data._blend_color;
    gl_main();
    return gl_Color[0];
}
